webpackJsonp([3],{

/***/ 926:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _index = __webpack_require__(179);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _index3 = __webpack_require__(184);
	
	var _index4 = _interopRequireDefault(_index3);
	
	var _react2 = __webpack_require__(15);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _index5 = __webpack_require__(185);
	
	var _index6 = _interopRequireDefault(_index5);
	
	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();
	
	var _reactDom = __webpack_require__(44);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _Oncoprint = __webpack_require__(927);
	
	var _Oncoprint2 = _interopRequireDefault(_Oncoprint);
	
	var _reactRedux = __webpack_require__(395);
	
	var _reactBootstrap = __webpack_require__(670);
	
	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}
	
	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var _components = {
	    QueryResultPage: {
	        displayName: 'QueryResultPage'
	    }
	};
	
	var _UsersAaronlismanWebstormProjectsCbioportalFrontendNode_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
	    filename: '/Users/aaronlisman/WebstormProjects/cbioportal-frontend/src/pages/queryResult/QueryResultPage.jsx',
	    components: _components,
	    locals: [module],
	    imports: [_react3.default]
	});
	
	var _UsersAaronlismanWebstormProjectsCbioportalFrontendNode_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
	    filename: '/Users/aaronlisman/WebstormProjects/cbioportal-frontend/src/pages/queryResult/QueryResultPage.jsx',
	    components: _components,
	    locals: [],
	    imports: [_react3.default, _index2.default]
	});
	
	function _wrapComponent(id) {
	    return function (Component) {
	        return _UsersAaronlismanWebstormProjectsCbioportalFrontendNode_modulesReactTransformHmrLibIndexJs2(_UsersAaronlismanWebstormProjectsCbioportalFrontendNode_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
	    };
	}
	
	var QueryResultPage = _wrapComponent('QueryResultPage')(function (_React$Component) {
	    _inherits(QueryResultPage, _React$Component);
	
	    function QueryResultPage() {
	        _classCallCheck(this, QueryResultPage);
	
	        return _possibleConstructorReturn(this, (QueryResultPage.__proto__ || Object.getPrototypeOf(QueryResultPage)).call(this));
	    }
	
	    _createClass(QueryResultPage, [{
	        key: 'changeSort',
	        value: function changeSort() {}
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react3.default.createElement('div', null, _react3.default.createElement('h1', null, 'Oncoprint'), _react3.default.createElement(_reactBootstrap.Tabs, { defaultActiveKey: 2 }, _react3.default.createElement(_reactBootstrap.Tab, { eventKey: 1, title: 'Oncoprint' }, _react3.default.createElement(_Oncoprint2.default, null)), _react3.default.createElement(_reactBootstrap.Tab, { eventKey: 2, title: 'Summary' }, 'Summary')));
	        }
	    }]);
	
	    return QueryResultPage;
	}(_react3.default.Component));
	
	exports.default = QueryResultPage;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(178)(module)))

/***/ },

/***/ 927:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _index = __webpack_require__(179);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _index3 = __webpack_require__(184);
	
	var _index4 = _interopRequireDefault(_index3);
	
	var _react2 = __webpack_require__(15);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _index5 = __webpack_require__(185);
	
	var _index6 = _interopRequireDefault(_index5);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _reactDom = __webpack_require__(44);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _setup = __webpack_require__(928);
	
	__webpack_require__(939);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	    PatientViewPage: {
	        displayName: 'PatientViewPage'
	    }
	};
	
	var _UsersAaronlismanWebstormProjectsCbioportalFrontendNode_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
	    filename: '/Users/aaronlisman/WebstormProjects/cbioportal-frontend/src/pages/queryResult/Oncoprint.jsx',
	    components: _components,
	    locals: [module],
	    imports: [_react3.default]
	});
	
	var _UsersAaronlismanWebstormProjectsCbioportalFrontendNode_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
	    filename: '/Users/aaronlisman/WebstormProjects/cbioportal-frontend/src/pages/queryResult/Oncoprint.jsx',
	    components: _components,
	    locals: [],
	    imports: [_react3.default, _index2.default]
	});
	
	function _wrapComponent(id) {
	    return function (Component) {
	        return _UsersAaronlismanWebstormProjectsCbioportalFrontendNode_modulesReactTransformHmrLibIndexJs2(_UsersAaronlismanWebstormProjectsCbioportalFrontendNode_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
	    };
	}
	
	var PatientViewPage = _wrapComponent('PatientViewPage')(function (_React$Component) {
	    _inherits(PatientViewPage, _React$Component);
	
	    function PatientViewPage() {
	        _classCallCheck(this, PatientViewPage);
	
	        return _possibleConstructorReturn(this, (PatientViewPage.__proto__ || Object.getPrototypeOf(PatientViewPage)).apply(this, arguments));
	    }
	
	    _createClass(PatientViewPage, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            return false;
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            (0, _setup.createCBioPortalOncoprintWithToolbar)(".moo");
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react3.default.createElement('div', { className: 'moo' });
	        }
	    }]);
	
	    return PatientViewPage;
	}(_react3.default.Component));
	
	exports.default = PatientViewPage;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(178)(module)))

/***/ },

/***/ 928:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.createCBioPortalOncoprintWithToolbar = createCBioPortalOncoprintWithToolbar;
	
	var _url = __webpack_require__(929);
	
	var _url2 = _interopRequireDefault(_url);
	
	var _utils = __webpack_require__(930);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _tooltipUtils = __webpack_require__(931);
	
	var _tooltipUtils2 = _interopRequireDefault(_tooltipUtils);
	
	var _state = __webpack_require__(932);
	
	var _state2 = _interopRequireDefault(_state);
	
	var _querySession = __webpack_require__(933);
	
	var _querySession2 = _interopRequireDefault(_querySession);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var makeComparatorMetric = function makeComparatorMetric(array_spec) {
	    var metric = {};
	    for (var i = 0; i < array_spec.length; i++) {
	        var equiv_values = [].concat(array_spec[i]);
	        for (var j = 0; j < equiv_values.length; j++) {
	            metric[equiv_values[j]] = i;
	        }
	    }
	    return metric;
	};
	
	console.log(_state2.default);
	
	var QuerySession = (0, _querySession2.default)();
	
	function createCBioPortalOncoprintWithToolbar(ctr_selector, toolbar_selector) {
	
	    $('#oncoprint #everything').show();
	    $('#oncoprint #oncoprint-diagram-toolbar-buttons').show();
	
	    $(ctr_selector).css({ 'position': 'relative' });
	
	    window.LoadingBar = function () {
	        var $loading_bar_svg = $('<svg width="100" height="50"></svg><br>').appendTo(ctr_selector).append(_utils2.default.makeSVGElement("rect", {
	            "width": 100,
	            "height": 25,
	            "stroke": "black",
	            "fill": "white"
	        }));
	        $loading_bar_svg.append(_utils2.default.makeSVGElement("rect", {
	            "width": 100,
	            "height": 25,
	            "stroke": "black",
	            "fill": "white"
	        }));
	        var $loading_bar = $(_utils2.default.makeSVGElement("rect", {
	            "width": 0,
	            "height": 25,
	            "fill": "green",
	            "stroke": "dark green"
	        })).appendTo($loading_bar_svg);
	        var $loading_bar_msg = $(_utils2.default.makeSVGElement("text", {
	            'x': 2,
	            'y': 15,
	            'font-size': 11,
	            'font-family': 'Arial',
	            'font-weight': 'normal',
	            'text-anchor': 'start'
	        })).appendTo($loading_bar_svg);
	
	        return {
	            'hide': function hide() {
	                $loading_bar_svg.hide();
	            },
	            'show': function show() {
	                $loading_bar_svg.show();
	            },
	            'msg': function msg(str) {
	                $loading_bar_msg[0].textContent = str;
	            },
	            'update': function update(proportion) {
	                $loading_bar.attr('width', proportion * parseFloat($loading_bar_svg.attr('width')));
	            },
	            'DOWNLOADING_MSG': 'Downloading data..'
	        };
	    }();
	
	    var oncoprint = new window.Oncoprint(ctr_selector, 1050);
	    var toolbar_fade_out_timeout;
	    $(ctr_selector).add(toolbar_selector).on("mouseover", function (evt) {
	        $(toolbar_selector).fadeIn('fast');
	        clearTimeout(toolbar_fade_out_timeout);
	    });
	    $(ctr_selector).add(toolbar_selector).on("mouseleave", function (evt) {
	        clearTimeout(toolbar_fade_out_timeout);
	        toolbar_fade_out_timeout = setTimeout(function () {
	            $(toolbar_selector).fadeOut();
	        }, 700);
	    });
	
	    var Toolbar = function () {
	        var events = [];
	
	        return {
	            'addEventHandler': function addEventHandler($elt, evt, callback) {
	                $elt.on(evt, callback);
	                events.push({ '$elt': $elt, 'evt': evt, 'callback': callback });
	            },
	            'onMouseDownAndClick': function onMouseDownAndClick($elt, mousedown_callback, click_callback) {
	                this.addEventHandler($elt, 'mousedown', mousedown_callback);
	                this.addEventHandler($elt, 'click', click_callback);
	            },
	            'onHover': function onHover($elt, enter_callback, leave_callback) {
	                this.addEventHandler($elt, 'mouseenter', enter_callback);
	                this.addEventHandler($elt, 'mouseleave', leave_callback);
	            },
	            'onClick': function onClick($elt, callback) {
	                this.addEventHandler($elt, 'click', callback);
	            },
	            'destroy': function destroy() {
	                // Destroy events
	                for (var i = 0; i < events.length; i++) {
	                    var event = events[i];
	                    event['$elt'].off(event['evt'], event['callback']);
	                }
	
	                // Destroy qtips
	
	                // Destroy elements
	            },
	            'refreshClinicalAttributeSelector': function refreshClinicalAttributeSelector() {
	                var attributes_to_populate = _state2.default.unused_clinical_attributes;
	                attributes_to_populate.sort(function (attrA, attrB) {
	                    return attrA.display_order - attrB.display_order;
	                });
	                var $selector = $(toolbar_selector + ' #select_clinical_attributes');
	                $selector.empty();
	                for (var i = 0; i < attributes_to_populate.length; i++) {
	                    $("<option></option>").appendTo($selector).attr("value", attributes_to_populate[i].attr_id).text(attributes_to_populate[i].display_name);
	                }
	                $(toolbar_selector + " #select_clinical_attributes").val('');
	                $(toolbar_selector + " #select_clinical_attributes").trigger("liszt:updated");
	                $(toolbar_selector + " #select_clinical_attributes_chzn").addClass("chzn-with-drop");
	            }
	        };
	    }();
	
	    _state2.default.clinical_attributes_fetched.then(function () {
	        _state2.default.unused_clinical_attributes.sort(function (attrA, attrB) {
	            var set_attribute_order = ["FRACTION_GENOME_ALTERED", "# mutations", "NO_CONTEXT_MUTATION_SIGNATURE"];
	            var attrA_index = set_attribute_order.indexOf(attrA.attr_id);
	            var attrB_index = set_attribute_order.indexOf(attrB.attr_id);
	            if (attrA_index < 0) {
	                attrA_index = set_attribute_order.length;
	            }
	            if (attrB_index < 0) {
	                attrB_index = set_attribute_order.length;
	            }
	            if (attrA_index === attrB_index) {
	                return attrA.display_name.localeCompare(attrB.display_name);
	            } else {
	                return _utils2.default.sign_of_diff(attrA_index, attrB_index);
	            }
	        });
	
	        for (var i = 0, _len = _state2.default.unused_clinical_attributes.length; i < _len; i++) {
	            _state2.default.unused_clinical_attributes[i].display_order = i;
	        }
	
	        var url_clinical_attr_ids = _url2.default.getInitUsedClinicalAttrs() || [];
	        for (var i = 0; i < url_clinical_attr_ids.length; i++) {
	            _state2.default.useAttribute(url_clinical_attr_ids[i]);
	        }
	
	        if (url_clinical_attr_ids.length > 0) {
	            $(toolbar_selector + ' #oncoprint-diagram-showlegend-icon').show();
	            _state2.default.addClinicalTracks(_state2.default.used_clinical_attributes.filter(function (attr) {
	                return url_clinical_attr_ids.indexOf(attr.attr_id) > -1;
	            }));
	        }
	
	        Toolbar.refreshClinicalAttributeSelector();
	
	        console.log("RESTORE CHOSEN");
	        //$(toolbar_selector + ' #select_clinical_attributes').chosen({width: "330px", "font-size": "12px", search_contains: true});
	
	        // add a title to the text input fields generated by Chosen for
	        // Section 508 accessibility compliance
	        $("div.chzn-search > input:first-child").attr("title", "Search");
	
	        Toolbar.onClick($(toolbar_selector + ' #select_clinical_attributes_chzn .chzn-search input'), function (e) {
	            e.stopPropagation();
	        });
	
	        $(toolbar_selector + " #select_clinical_attributes_chzn").mouseenter(function () {
	            $(toolbar_selector + " #select_clinical_attributes_chzn .chzn-search input").focus();
	        });
	        $(toolbar_selector + " #select_clinical_attributes_chzn").addClass("chzn-with-drop");
	
	        Toolbar.addEventHandler($(toolbar_selector + ' #select_clinical_attributes'), 'change', function (evt) {
	            if ($(toolbar_selector + ' #select_clinical_attributes').val().trim() === '') {
	                evt && evt.stopPropagation();
	                return;
	            }
	            var attr_id = $(toolbar_selector + ' #select_clinical_attributes option:selected').attr("value");
	            $(toolbar_selector + ' #select_clinical_attributes').val('').trigger('liszt:updated');
	            $(toolbar_selector + ' #clinical_dropdown').dropdown('toggle');
	            addClinicalAttributeTrack(attr_id);
	        });
	    });
	
	    var addClinicalAttributeTrack = function addClinicalAttributeTrack(attr_id) {
	        $(toolbar_selector + ' #oncoprint-diagram-showlegend-icon').show();
	        var index = _state2.default.unused_clinical_attributes.findIndex(function (attr) {
	            return attr.attr_id === attr_id;
	        });
	        if (index === -1) {
	            return;
	        }
	        var attr = _state2.default.unused_clinical_attributes[index];
	        _state2.default.useAttribute(attr_id);
	        Toolbar.refreshClinicalAttributeSelector();
	
	        return _state2.default.addAndPopulateClinicalTracks(attr);
	    };
	
	    (function initOncoprint() {
	        window.LoadingBar.show();
	        window.LoadingBar.msg(window.LoadingBar.DOWNLOADING_MSG);
	        var def = new $.Deferred();
	        oncoprint.setCellPaddingOn(_state2.default.cell_padding_on);
	        $.when(QuerySession.getOncoprintSampleGenomicEventData()).then(function (oncoprint_data) {
	            _state2.default.addGeneticTracks(oncoprint_data);
	        }).fail(function () {
	            def.reject();
	        }).then(function () {
	            (function fetchClinicalAttributes() {
	                QuerySession.getClinicalAttributes().then(function (attrs) {
	                    _state2.default.unused_clinical_attributes = attrs;
	                    _state2.default.clinical_attributes_fetched.resolve();
	                    def.resolve();
	                }).fail(function () {
	                    def.reject();
	                    _state2.default.clinical_attributes_fetched.reject();
	                });
	            })();
	        });
	        return def.promise();
	    })().then(function () {
	        var populate_data_promise = _state2.default.setDataType(_state2.default.using_sample_data ? 'sample' : 'patient');
	
	        $.when(QuerySession.getPatientIds(), QuerySession.getAlteredSamples(), QuerySession.getAlteredPatients(), QuerySession.getCaseUIDMap(), populate_data_promise).then(function (patient_ids, altered_samples, altered_patients, case_uid_map) {
	            if ((_state2.default.using_sample_data ? window.QuerySession.getSampleIds() : patient_ids).length > 200) {
	                // TODO: assume multiple studies
	                var study_id = QuerySession.getCancerStudyIds()[0];
	                var getUID = function getUID(id) {
	                    return case_uid_map[study_id][id];
	                };
	                oncoprint.setHorzZoomToFit(_state2.default.using_sample_data ? altered_samples.map(getUID) : altered_patients.map(getUID));
	            }
	            oncoprint.scrollTo(0);
	        });
	
	        return populate_data_promise;
	    });
	    window.oncoprint = oncoprint;
	
	    (function setUpToolbar() {
	        console.log("RESOTRE SETUP_TOOLBAR");
	        return;
	        var zoom_discount = 0.7;
	        var to_remove_on_destroy = [];
	        var to_remove_qtip_on_destroy = [];
	
	        var appendTo = function appendTo($elt, $target) {
	            $elt.appendTo($target);
	            to_remove_on_destroy.push($elt);
	        };
	        var addQTipTo = function addQTipTo($elt, qtip_params) {
	            $elt.qtip(qtip_params);
	            to_remove_qtip_on_destroy.push($elt);
	        };
	
	        var setUpHoverEffect = function setUpHoverEffect($elt) {
	            $elt.hover(function () {
	                $(this).css({
	                    'fill': '#0000FF',
	                    'font-size': '18px',
	                    'cursor': 'pointer'
	                });
	            }, function () {
	                $(this).css({
	                    'fill': '#87CEFA',
	                    'font-size': '12px'
	                });
	            });
	        };
	
	        var setUpButton = function setUpButton($elt, img_urls, qtip_descs, index_fn, callback) {
	            index_fn = index_fn || function () {
	                return 0;
	            };
	            var updateButton = function updateButton() {
	                if (img_urls.length > 0) {
	                    $elt.find('img').attr('src', img_urls[index_fn()]);
	                }
	                $elt.css({ 'background-color': '#efefef' });
	            };
	            var hoverButton = function hoverButton() {
	                if (img_urls.length > 0) {
	                    $elt.find('img').attr('src', img_urls[(index_fn() + 1) % img_urls.length]);
	                }
	                $elt.css({ 'background-color': '#d9d9d9' });
	            };
	            if (qtip_descs.length > 0) {
	                addQTipTo($elt, {
	                    content: {
	                        text: function text() {
	                            return qtip_descs[index_fn()];
	                        }
	                    },
	                    position: { my: 'bottom middle', at: 'top middle', viewport: $(window) },
	                    style: { classes: 'qtip-light qtip-rounded qtip-shadow qtip-lightwhite' },
	                    show: { event: "mouseover" },
	                    hide: { fixed: true, delay: 100, event: "mouseout" }
	                });
	            }
	            Toolbar.onHover($elt, function () {
	                hoverButton();
	            }, function () {
	                updateButton();
	            });
	            Toolbar.onMouseDownAndClick($elt, function () {
	                $elt.css({ 'background-color': '#c7c7c7' });
	            }, function () {
	                callback();
	                updateButton();
	            });
	            updateButton();
	        };
	        var $zoom_slider = function setUpZoom() {
	            var zoom_elt = $(toolbar_selector + ' #oncoprint_diagram_slider_icon');
	            var $slider = $('<input>', {
	                id: "oncoprint_zoom_slider",
	                type: "range",
	                min: 0,
	                max: 1,
	                step: 0.0001,
	                value: 1,
	                change: function change(evt) {
	                    if (evt.originalEvent) {
	                        this.value = oncoprint.setHorzZoom(parseFloat(this.value));
	                    } else {
	                        this.value = oncoprint.getHorzZoom();
	                    }
	                }
	            });
	
	            $('#oncoprint_zoom_scale_input').on("keypress", function (e) {
	                if (e.keyCode === 13) {
	                    // 'Enter' key
	                    var new_zoom = parseFloat($('#oncoprint_zoom_scale_input').val()) / 100;
	                    new_zoom = Math.min(1, new_zoom);
	                    new_zoom = Math.max(0, new_zoom);
	                    oncoprint.setHorzZoom(new_zoom);
	                }
	            });
	            oncoprint.onHorzZoom(function () {
	                $zoom_slider.trigger('change');
	                $('#oncoprint_zoom_scale_input').val(Math.round(10000 * oncoprint.getHorzZoom()) / 100);
	            });
	
	            appendTo($slider, zoom_elt);
	            addQTipTo($slider, {
	                id: 'oncoprint_zoom_slider_tooltip',
	                prerender: true,
	                content: { text: 'Zoom in/out of oncoprint' },
	                position: { my: 'bottom middle', at: 'top middle', viewport: $(window) },
	                style: { classes: 'qtip-light qtip-rounded qtip-shadow qtip-lightwhite' },
	                show: { event: "mouseover" },
	                hide: { fixed: true, delay: 100, event: "mouseout" }
	            });
	            // use aria-labelledby instead of aria-describedby, as Section 508
	            // requires that inputs have an explicit label for accessibility
	            $slider.attr('aria-labelledby', 'qtip-oncoprint_zoom_slider_tooltip');
	            $slider.removeAttr('aria-describedby');
	            setUpHoverEffect($slider);
	
	            setUpButton($(toolbar_selector + ' #oncoprint_zoomout'), [], ["Zoom out of oncoprint"], null, function () {
	                oncoprint.setHorzZoom(oncoprint.getHorzZoom() * zoom_discount);
	            });
	            setUpButton($(toolbar_selector + ' #oncoprint_zoomin'), [], ["Zoom in to oncoprint"], null, function () {
	                oncoprint.setHorzZoom(oncoprint.getHorzZoom() / zoom_discount);
	            });
	
	            return $slider;
	        }();
	
	        (function setUpToggleCellPadding() {
	            var $show_whitespace_checkbox = $(toolbar_selector).find('#oncoprint_diagram_view_menu').find('input[type="checkbox"][name="show_whitespace"]');
	            $show_whitespace_checkbox[0].checked = _state2.default.cell_padding_on;
	            $show_whitespace_checkbox.change(function () {
	                _state2.default.cell_padding_on = $show_whitespace_checkbox.is(":checked");
	                oncoprint.setCellPaddingOn(_state2.default.cell_padding_on);
	            });
	        })();
	        (function setUpHideUnalteredCases() {
	            var $show_unaltered_checkbox = $(toolbar_selector).find('#oncoprint_diagram_view_menu').find('input[type="checkbox"][name="show_unaltered"]');
	            $show_unaltered_checkbox[0].checked = !_state2.default.unaltered_cases_hidden;
	            $show_unaltered_checkbox.change(function () {
	                _state2.default.unaltered_cases_hidden = !$show_unaltered_checkbox.is(":checked");
	                if (_state2.default.unaltered_cases_hidden) {
	                    oncoprint.hideIds(_state2.default.getUnalteredIds(), true);
	                } else {
	                    oncoprint.hideIds([], true);
	                }
	            });
	        })();
	        (function setUpZoomToFit() {
	            setUpButton($(toolbar_selector + ' #oncoprint_zoomtofit'), [], ["Zoom to fit altered cases in screen"], null, function () {
	                $.when(QuerySession.getAlteredSamples(), QuerySession.getAlteredPatients(), QuerySession.getCaseUIDMap()).then(function (altered_samples, altered_patients, case_uid_map) {
	                    // TODO: assume multiple studies
	                    var study_id = QuerySession.getCancerStudyIds()[0];
	                    var getUID = function getUID(id) {
	                        return case_uid_map[study_id][id];
	                    };
	                    oncoprint.setHorzZoomToFit(_state2.default.getAlteredIds().map(getUID));
	                    oncoprint.scrollTo(0);
	                });
	            });
	        })();
	        (function setUpSortByAndColorBy() {
	            $('#oncoprint_diagram_showmutationcolor_icon').hide();
	            var updateSortByForm = function updateSortByForm() {
	                var sortby_type_checkbox = $('#oncoprint_diagram_sortby_group').find('input[type="checkbox"][name="type"]');
	                ;
	                var sortby_recurrence_checkbox = $('#oncoprint_diagram_sortby_group').find('input[type="checkbox"][name="recurrence"]');
	                if (_state2.default.sortby !== "data" || !_state2.default.colorby_type) {
	                    sortby_type_checkbox.attr("disabled", "disabled");
	                } else {
	                    sortby_type_checkbox.removeAttr("disabled");
	                }
	
	                if (_state2.default.sortby !== "data" || !_state2.default.colorby_knowledge) {
	                    sortby_recurrence_checkbox.attr("disabled", "disabled");
	                } else {
	                    sortby_recurrence_checkbox.removeAttr("disabled");
	                }
	            };
	
	            var updateMutationColorForm = function updateMutationColorForm() {
	                var colorby_knowledge_checkbox = $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="recurrence"]');
	                var colorby_hotspots_checkbox = $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="hotspots"]');
	                var colorby_cbioportal_checkbox = $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="cbioportal"]');
	                var colorby_cosmic_checkbox = $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="cosmic"]');
	                var colorby_oncokb_checkbox = $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="oncokb"]');
	                var hide_unknown_checkbox = $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="hide_unknown"]');
	                var cosmic_threshold_input = $('#oncoprint_diagram_mutation_color').find('#cosmic_threshold');
	                var cbioportal_threshold_input = $('#oncoprint_diagram_mutation_color').find('#cbioportal_threshold');
	
	                var known_mutation_settings = window.QuerySession.getKnownMutationSettings();
	                colorby_knowledge_checkbox.prop('checked', _state2.default.colorby_knowledge);
	                colorby_hotspots_checkbox.prop('checked', known_mutation_settings.recognize_hotspot);
	                colorby_cbioportal_checkbox.prop('checked', known_mutation_settings.recognize_cbioportal_count);
	                colorby_cosmic_checkbox.prop('checked', known_mutation_settings.recognize_cosmic_count);
	                colorby_oncokb_checkbox.prop('checked', known_mutation_settings.recognize_oncokb_oncogenic);
	                hide_unknown_checkbox.prop('checked', known_mutation_settings.ignore_unknown);
	
	                if (!_state2.default.colorby_knowledge) {
	                    hide_unknown_checkbox.attr('disabled', 'disabled');
	                } else {
	                    hide_unknown_checkbox.removeAttr('disabled');
	                }
	
	                cbioportal_threshold_input.val(known_mutation_settings.cbioportal_count_thresh);
	                cosmic_threshold_input.val(known_mutation_settings.cosmic_count_thresh);
	            };
	
	            var updateRuleSets = function updateRuleSets() {
	                var rule_set_params = _state2.default.getGeneticRuleSetParams();
	                var genetic_alteration_track_ids = _utils2.default.objectValues(_state2.default.genetic_alteration_tracks);
	                oncoprint.setRuleSet(genetic_alteration_track_ids[0], rule_set_params);
	                for (var i = 1; i < genetic_alteration_track_ids.length; i++) {
	                    oncoprint.shareRuleSet(genetic_alteration_track_ids[0], genetic_alteration_track_ids[i]);
	                }
	            };
	            var updateSortComparators = function updateSortComparators() {
	                var comparator = _state2.default.getGeneticComparator();
	                oncoprint.keepSorted(false);
	                var genetic_alteration_track_ids = _utils2.default.objectValues(_state2.default.genetic_alteration_tracks);
	                for (var i = 0; i < genetic_alteration_track_ids.length; i++) {
	                    oncoprint.setTrackSortComparator(genetic_alteration_track_ids[i], comparator);
	                }
	                oncoprint.keepSorted();
	            };
	            var updateSortConfig = function updateSortConfig() {
	                if (_state2.default.sortby === "data") {
	                    oncoprint.setSortConfig({ 'type': 'tracks' });
	                    _state2.default.sorting_by_given_order = false;
	                    _state2.default.sorting_alphabetically = false;
	                } else if (_state2.default.sortby === "id") {
	                    _state2.default.sorting_by_given_order = false;
	                    _state2.default.sorting_alphabetically = true;
	                    // TODO: assume multiple studies
	                    $.when(QuerySession.getCaseUIDMap(), _state2.default.patient_order_loaded).then(function (case_uid_map) {
	                        var study_id = QuerySession.getCancerStudyIds()[0];
	                        var getUID = function getUID(id) {
	                            return case_uid_map[study_id][id];
	                        };
	                        oncoprint.setSortConfig({
	                            'type': 'order',
	                            order: _state2.default.using_sample_data ? QuerySession.getSampleIds().slice().sort().map(getUID) : _state2.default.patient_order.slice().sort().map(getUID)
	                        });
	                    });
	                } else if (_state2.default.sortby === "custom") {
	                    _state2.default.sorting_by_given_order = true;
	                    _state2.default.sorting_alphabetically = false;
	                    // TODO: assume multiple studies
	                    $.when(QuerySession.getCaseUIDMap(), _state2.default.patient_order_loaded).then(function (case_uid_map) {
	                        var study_id = QuerySession.getCancerStudyIds()[0];
	                        var getUID = function getUID(id) {
	                            return case_uid_map[study_id][id];
	                        };
	                        oncoprint.setSortConfig({
	                            'type': 'order',
	                            order: _state2.default.using_sample_data ? QuerySession.getSampleIds().map(getUID) : _state2.default.patient_order.map(getUID)
	                        });
	                    });
	                }
	            };
	            $('#oncoprint_diagram_sortby_group').find('input[name="sortby"]').change(function () {
	                _state2.default.sortby = $('#oncoprint_diagram_sortby_group').find('input[name="sortby"]:checked').val();
	                updateSortByForm();
	                updateSortConfig();
	            });
	            $('#oncoprint_diagram_sortby_group').find('input[type="checkbox"][name="type"]').change(function () {
	                _state2.default.sortby_type = $('#oncoprint_diagram_sortby_group').find('input[type="checkbox"][name="type"]').is(":checked");
	                updateSortComparators();
	            });
	            $('#oncoprint_diagram_sortby_group').find('input[type="checkbox"][name="recurrence"]').change(function () {
	                _state2.default.sortby_recurrence = $('#oncoprint_diagram_sortby_group').find('input[type="checkbox"][name="recurrence"]').is(":checked");
	                updateSortComparators();
	            });
	            $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"]').change(function (e) {
	                if (e.originalEvent === undefined) {
	                    return true;
	                }
	                _state2.default.colorby_type = $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="type"]').is(":checked");
	                var old_colorby_knowledge = _state2.default.colorby_knowledge;
	                _state2.default.colorby_knowledge = $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="recurrence"]').is(":checked");
	
	                var new_known_mutation_settings = {
	                    recognize_hotspot: $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="hotspots"]').is(":checked"),
	                    recognize_cbioportal_count: $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="cbioportal"]').is(":checked"),
	                    recognize_cosmic_count: $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="cosmic"]').is(":checked"),
	                    recognize_oncokb_oncogenic: $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="oncokb"]').is(":checked"),
	                    ignore_unknown: $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="hide_unknown"]').is(":checked")
	                };
	
	                if (!old_colorby_knowledge && _state2.default.colorby_knowledge) {
	                    // If driver/passenger has just been selected, set defaults
	                    new_known_mutation_settings.recognize_hotspot = true;
	                    new_known_mutation_settings.recognize_cbioportal_count = true;
	                    new_known_mutation_settings.recognize_cosmic_count = true;
	                    new_known_mutation_settings.recognize_oncokb_oncogenic = true;
	                } else if (old_colorby_knowledge && !_state2.default.colorby_knowledge) {
	                    // If driver/passenger has just been deselected, set all to false
	                    new_known_mutation_settings.recognize_hotspot = false;
	                    new_known_mutation_settings.recognize_cbioportal_count = false;
	                    new_known_mutation_settings.recognize_cosmic_count = false;
	                    new_known_mutation_settings.recognize_oncokb_oncogenic = false;
	                }
	
	                if (new_known_mutation_settings.recognize_hotspot || new_known_mutation_settings.recognize_cbioportal_count || new_known_mutation_settings.recognize_cosmic_count || new_known_mutation_settings.recognize_oncokb_oncogenic) {
	                    // If at least one data source selected, update State
	                    _state2.default.colorby_knowledge = true;
	                } else {
	                    // If no data sources selected, turn off driver/passenger labeling..
	                    _state2.default.colorby_knowledge = false;
	                    // .. and filtering
	                    new_known_mutation_settings.ignore_unknown = false;
	                }
	
	                window.QuerySession.setKnownMutationSettings(new_known_mutation_settings);
	
	                updateMutationColorForm();
	                updateSortByForm();
	                updateRuleSets();
	                _state2.default.refreshData();
	            });
	            $('#oncoprint_diagram_mutation_color').find('#cosmic_threshold').change(function () {
	                window.QuerySession.setKnownMutationSettings({
	                    cosmic_count_thresh: parseInt($('#oncoprint_diagram_mutation_color').find('#cosmic_threshold').val(), 10) || 0
	                });
	                _state2.default.refreshData();
	            });
	            $('#oncoprint_diagram_mutation_color').find('#cbioportal_threshold').change(function () {
	                window.QuerySession.setKnownMutationSettings({
	                    cbioportal_count_thresh: parseInt($('#oncoprint_diagram_mutation_color').find('#cbioportal_threshold').val(), 10) || 0
	                });
	                _state2.default.refreshData();
	            });
	            (function initFormsFromState() {
	                var known_mutation_settings = window.QuerySession.getKnownMutationSettings();
	                $('#oncoprint_diagram_sortby_group').find('input[name="sortby"][value="' + _state2.default.sortby + '"]').prop("checked", true);
	                $('#oncoprint_diagram_sortby_group').find('input[type="checkbox"][name="type"]').prop("checked", _state2.default.sortby_type);
	                $('#oncoprint_diagram_sortby_group').find('input[type="checkbox"][name="recurrence"]').prop("checked", _state2.default.sortby_recurrence);
	
	                $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="type"]').prop("checked", _state2.default.colorby_type);
	                $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="recurrence"]').prop("checked", _state2.default.colorby_knowledge);
	                $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="hotspots"]').prop("checked", !!known_mutation_settings.recognize_hotspot);
	                $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="cbioportal"]').prop("checked", !!known_mutation_settings.recognize_cbioportal_count);
	                $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="cosmic"]').prop("checked", !!known_mutation_settings.recognize_cosmic_count);
	                $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="oncokb"]').prop("checked", !!known_mutation_settings.recognize_oncokb_oncogenic);
	                $('#oncoprint_diagram_mutation_color').find('input[type="checkbox"][name="hide_unknown"]').prop("checked", !!known_mutation_settings.ignore_unknown);
	
	                $('#oncoprint_diagram_mutation_color').find('#cosmic_threshold').val(known_mutation_settings.cosmic_count_thresh);
	                $('#oncoprint_diagram_mutation_color').find('#cbioportal_threshold').val(known_mutation_settings.cbioportal_count_thresh);
	
	                updateMutationColorForm();
	                updateSortByForm();
	            })();
	            (function initKnowledgeTooltipAndLinkout() {
	                $('#oncoprint_diagram_mutation_color').find('#colorby_hotspot_info').click(function () {
	                    window.open("http://www.cancerhotspots.org");
	                });
	                $('#oncoprint_diagram_mutation_color').find('#colorby_oncokb_info').click(function () {
	                    window.open("http://www.oncokb.org");
	                });
	                addQTipTo($('#oncoprint_diagram_mutation_color').find('#putative_driver_info_icon'), {
	                    content: { text: "For missense mutations." },
	                    position: { my: 'bottom middle', at: 'top middle', viewport: $(window) },
	                    style: { classes: 'qtip-light qtip-rounded qtip-shadow qtip-lightwhite' },
	                    show: { event: "mouseover" },
	                    hide: { fixed: true, delay: 100, event: "mouseout" }
	                });
	                addQTipTo($('#oncoprint_diagram_mutation_color').find('#colorby_hotspot_info'), {
	                    content: {
	                        text: function text() {
	                            return $("<p>Identified as a recurrent hotspot (statistically significant) in a " + "population-scale cohort of tumor samples of various cancer types using " + "methodology based in part on <a href='http://www.ncbi.nlm.nih.gov/pubmed/26619011' target='_blank'>Chang et al., Nat Biotechnol, 2016.</a>" + "\n" + "Explore all mutations at <a href='http://cancerhotspots.org' target='_blank'>http://cancerhotspots.org</a></p>");
	                        }
	                    },
	                    position: { my: 'bottom middle', at: 'top middle', viewport: $(window) },
	                    style: { classes: 'qtip-light qtip-rounded qtip-shadow qtip-lightwhite' },
	                    show: { event: "mouseover" },
	                    hide: { fixed: true, delay: 100, event: "mouseout" }
	                });
	                addQTipTo($('#oncoprint_diagram_mutation_color').find('#colorby_oncokb_info'), {
	                    content: { text: "Oncogenicity from OncoKB" },
	                    position: { my: 'bottom middle', at: 'top middle', viewport: $(window) },
	                    style: { classes: 'qtip-light qtip-rounded qtip-shadow qtip-lightwhite' },
	                    show: { event: "mouseover" },
	                    hide: { fixed: true, delay: 100, event: "mouseout" }
	                });
	            })();
	        })();
	        (function setUpShowClinicalLegendsBtn() {
	            // set initial state
	            var $show_clinical_legends_checkbox = $(toolbar_selector).find('#oncoprint_diagram_view_menu').find('input[type="checkbox"][name="show_clinical_legends"]');
	            $show_clinical_legends_checkbox[0].checked = _state2.default.clinical_track_legends_shown;
	            $show_clinical_legends_checkbox.change(function () {
	                _state2.default.clinical_track_legends_shown = $show_clinical_legends_checkbox.is(":checked");
	                var clinical_track_ids = Object.keys(_state2.default.clinical_tracks);
	                if (_state2.default.clinical_track_legends_shown) {
	                    oncoprint.showTrackLegends(clinical_track_ids);
	                } else {
	                    oncoprint.hideTrackLegends(clinical_track_ids);
	                }
	            });
	        })();
	        (function setUpTogglePatientSampleBtn() {
	            var $header_btn = $('#switchPatientSample');
	
	            $header_btn.click(function () {
	                var curr_selection = $(toolbar_selector).find('#oncoprint_diagram_view_menu').find('input[type="radio"][name="datatype"]:checked').val();
	                $(toolbar_selector).find('#oncoprint_diagram_view_menu').find('input[type="radio"][name="datatype"][value="' + (curr_selection === "sample" ? "patient" : "sample") + '"]').prop("checked", true);
	                $(toolbar_selector).find('#oncoprint_diagram_view_menu').find('input[type="radio"][name="datatype"]').trigger('change');
	            });
	
	            addQTipTo($header_btn, {
	                content: {
	                    text: function text() {
	                        if (_state2.default.using_sample_data) {
	                            return 'Each sample for each patient is in a separate column. Click to show only one column per patient';
	                        } else {
	                            return 'All samples from a patient are merged into one column. Click to split samples into multiple columns.';
	                        }
	                    }
	                },
	                position: { my: 'bottom middle', at: 'top middle', viewport: $(window) },
	                style: { classes: 'qtip-light qtip-rounded qtip-shadow qtip-lightwhite' },
	                show: { event: "mouseover" },
	                hide: { fixed: true, delay: 100, event: "mouseout" }
	            });
	
	            var updateHeaderBtnText = function updateHeaderBtnText() {
	                if (_state2.default.using_sample_data) {
	                    $header_btn.text('Show only one column per patient');
	                } else {
	                    $header_btn.text('Show all samples');
	                }
	            };
	
	            var updateDownloadIdOrderText = function updateDownloadIdOrderText() {
	                $('oncoprint-sample-download').text((_state2.default.using_sample_data ? "Sample" : "Patient") + " order");
	            };
	
	            updateHeaderBtnText();
	            updateDownloadIdOrderText();
	
	            // initialize radio buttons
	            $(toolbar_selector).find('#oncoprint_diagram_view_menu').find('input[type="radio"][name="datatype"][value="' + (_state2.default.using_sample_data ? "sample" : "patient") + '"]').prop("checked", true);
	
	            $(toolbar_selector).find('#oncoprint_diagram_view_menu').find('input[type="radio"][name="datatype"]').change(function (e) {
	                _state2.default.using_sample_data = $(toolbar_selector).find('#oncoprint_diagram_view_menu').find('input[type="radio"][name="datatype"]:checked').val() === 'sample';
	                if (_state2.default.using_sample_data) {
	                    _state2.default.setDataType('sample');
	                } else {
	                    _state2.default.setDataType('patient');
	                }
	                updateHeaderBtnText();
	                updateDownloadIdOrderText();
	            });
	        })();
	        (function setUpDownload() {
	            $('body').on('click', '.oncoprint-diagram-download', function () {
	                var fileType = $(this).attr("type");
	                var two_megabyte_limit = 2000000;
	                if (fileType === 'pdf') {
	                    var svg = oncoprint.toSVG(true);
	                    var serialized = cbio.download.serializeHtml(svg);
	                    if (serialized.length > two_megabyte_limit) {
	                        alert("Oncoprint too big to download as PDF - please download as SVG");
	                        return;
	                    }
	                    cbio.download.initDownload(serialized, {
	                        filename: "oncoprint.pdf",
	                        contentType: "application/pdf",
	                        servletName: "svgtopdf.do"
	                    });
	                } else if (fileType === 'svg') {
	                    cbio.download.initDownload(oncoprint.toSVG(), { filename: "oncoprint.svg" });
	                } else if (fileType === 'png') {
	                    var img = oncoprint.toCanvas(function (canvas, truncated) {
	                        canvas.toBlob(function (blob) {
	                            if (truncated) {
	                                alert("Oncoprint too large - PNG truncated to " + canvas.getAttribute("width") + " by " + canvas.getAttribute("height"));
	                            }
	                            saveAs(blob, "oncoprint.png");
	                        }, 'image/png');
	                    }, 2);
	                }
	            });
	
	            $('body').on('click', '.oncoprint-sample-download', function () {
	                var idTypeStr = _state2.default.using_sample_data ? "Sample" : "Patient";
	                var content = idTypeStr + " order in the Oncoprint is: \n";
	                content += oncoprint.getIdOrder().join('\n');
	                var downloadOpts = {
	                    filename: 'OncoPrint' + idTypeStr + 's.txt',
	                    contentType: "text/plain;charset=utf-8",
	                    preProcess: false
	                };
	
	                // send download request with filename & file content info
	                cbio.download.initDownload(content, downloadOpts);
	            });
	        })();
	    })();
	}
	
	window.CreateOncoprinterWithToolbar = function (ctr_selector, toolbar_selector) {
	
	    $('#oncoprint #everything').show();
	    $('#oncoprint #oncoprint-diagram-toolbar-buttons').show();
	
	    $(ctr_selector).css({ 'position': 'relative' });
	
	    window.LoadingBar = function () {
	        var $loading_bar_svg = $('<svg width="100" height="50"></svg><br>').appendTo(ctr_selector).append(_utils2.default.makeSVGElement("rect", {
	            "width": 100,
	            "height": 25,
	            "stroke": "black",
	            "fill": "white"
	        }));
	        $loading_bar_svg.append(_utils2.default.makeSVGElement("rect", {
	            "width": 100,
	            "height": 25,
	            "stroke": "black",
	            "fill": "white"
	        }));
	        var $loading_bar = $(_utils2.default.makeSVGElement("rect", {
	            "width": 0,
	            "height": 25,
	            "fill": "green",
	            "stroke": "dark green"
	        })).appendTo($loading_bar_svg);
	        var $loading_bar_msg = $(_utils2.default.makeSVGElement("text", {
	            'x': 2,
	            'y': 15,
	            'font-size': 11,
	            'font-family': 'Arial',
	            'font-weight': 'normal',
	            'text-anchor': 'start'
	        })).appendTo($loading_bar_svg);
	
	        return {
	            'hide': function hide() {
	                $loading_bar_svg.hide();
	            },
	            'show': function show() {
	                $loading_bar_svg.show();
	            },
	            'msg': function msg(str) {
	                $loading_bar_msg[0].textContent = str;
	            },
	            'update': function update(proportion) {
	                $loading_bar.attr('width', proportion * parseFloat($loading_bar_svg.attr('width')));
	            },
	            'DOWNLOADING_MSG': 'Downloading data..'
	        };
	    }();
	
	    window.LoadingBar.hide();
	
	    var oncoprint = new window.Oncoprint(ctr_selector, 1050);
	    var toolbar_fade_out_timeout;
	    $(ctr_selector).add(toolbar_selector).on("mouseover", function (evt) {
	        $(toolbar_selector).fadeIn('fast');
	        clearTimeout(toolbar_fade_out_timeout);
	    });
	    $(ctr_selector).add(toolbar_selector).on("mouseleave", function (evt) {
	        clearTimeout(toolbar_fade_out_timeout);
	        toolbar_fade_out_timeout = setTimeout(function () {
	            $(toolbar_selector).fadeOut();
	        }, 700);
	    });
	
	    _state2.default.addAndPopulateClinicalTracks();
	    var Toolbar = function () {
	        var events = [];
	        var qtips = [];
	        var elements = [];
	
	        return {
	            'addEventHandler': function addEventHandler($elt, evt, callback) {
	                $elt.on(evt, callback);
	                events.push({ '$elt': $elt, 'evt': evt, 'callback': callback });
	            },
	            'onMouseDownAndClick': function onMouseDownAndClick($elt, mousedown_callback, click_callback) {
	                this.addEventHandler($elt, 'mousedown', mousedown_callback);
	                this.addEventHandler($elt, 'click', click_callback);
	            },
	            'onHover': function onHover($elt, enter_callback, leave_callback) {
	                this.addEventHandler($elt, 'mouseenter', enter_callback);
	                this.addEventHandler($elt, 'mouseleave', leave_callback);
	            },
	            'onClick': function onClick($elt, callback) {
	                this.addEventHandler($elt, 'click', callback);
	            },
	            'destroy': function destroy() {
	                // Destroy events
	                for (var i = 0; i < events.length; i++) {
	                    var event = events[i];
	                    event['$elt'].off(event['evt'], event['callback']);
	                }
	
	                // Destroy qtips
	
	                // Destroy elements
	            }
	        };
	    }();
	
	    oncoprint.setCellPaddingOn(_state2.default.cell_padding_on);
	
	    (function setUpToolbar() {
	        var zoom_discount = 0.7;
	        var to_remove_on_destroy = [];
	        var to_remove_qtip_on_destroy = [];
	
	        var appendTo = function appendTo($elt, $target) {
	            $elt.appendTo($target);
	            to_remove_on_destroy.push($elt);
	        };
	        var addQTipTo = function addQTipTo($elt, qtip_params) {
	            $elt.qtip(qtip_params);
	            to_remove_qtip_on_destroy.push($elt);
	        };
	
	        var setUpHoverEffect = function setUpHoverEffect($elt) {
	            $elt.hover(function () {
	                $(this).css({
	                    'fill': '#0000FF',
	                    'font-size': '18px',
	                    'cursor': 'pointer'
	                });
	            }, function () {
	                $(this).css({
	                    'fill': '#87CEFA',
	                    'font-size': '12px'
	                });
	            });
	        };
	
	        var setUpButton = function setUpButton($elt, img_urls, qtip_descs, index_fn, callback) {
	            index_fn = index_fn || function () {
	                return 0;
	            };
	            var updateButton = function updateButton() {
	                if (img_urls.length > 0) {
	                    $elt.find('img').attr('src', img_urls[index_fn()]);
	                }
	                $elt.css({ 'background-color': '#efefef' });
	            };
	            var hoverButton = function hoverButton() {
	                if (img_urls.length > 0) {
	                    $elt.find('img').attr('src', img_urls[(index_fn() + 1) % img_urls.length]);
	                }
	                $elt.css({ 'background-color': '#d9d9d9' });
	            };
	            if (qtip_descs.length > 0) {
	                addQTipTo($elt, {
	                    content: {
	                        text: function text() {
	                            return qtip_descs[index_fn()];
	                        }
	                    },
	                    position: { my: 'bottom middle', at: 'top middle', viewport: $(window) },
	                    style: { classes: 'qtip-light qtip-rounded qtip-shadow qtip-lightwhite' },
	                    show: { event: "mouseover" },
	                    hide: { fixed: true, delay: 100, event: "mouseout" }
	                });
	            }
	            Toolbar.onHover($elt, function () {
	                hoverButton();
	            }, function () {
	                updateButton();
	            });
	            Toolbar.onMouseDownAndClick($elt, function () {
	                $elt.css({ 'background-color': '#c7c7c7' });
	            }, function () {
	                callback();
	                updateButton();
	            });
	            updateButton();
	        };
	        var $zoom_slider = function setUpZoom() {
	            var zoom_elt = $(toolbar_selector + ' #oncoprint_diagram_slider_icon');
	            var $slider = $('<input>', {
	                id: "oncoprint_zoom_slider",
	                type: "range",
	                min: 0,
	                max: 1,
	                step: 0.0001,
	                value: 1,
	                change: function change(evt) {
	                    if (evt.originalEvent) {
	                        this.value = oncoprint.setHorzZoom(parseFloat(this.value));
	                    } else {
	                        this.value = oncoprint.getHorzZoom();
	                    }
	                }
	            });
	
	            $('#oncoprint_zoom_scale_input').on("keypress", function (e) {
	                if (e.keyCode === 13) {
	                    // 'Enter' key
	                    var new_zoom = parseFloat($('#oncoprint_zoom_scale_input').val()) / 100;
	                    new_zoom = Math.min(1, new_zoom);
	                    new_zoom = Math.max(0, new_zoom);
	                    oncoprint.setHorzZoom(new_zoom);
	                }
	            });
	            oncoprint.onHorzZoom(function () {
	                $zoom_slider.trigger('change');
	                $('#oncoprint_zoom_scale_input').val(Math.round(10000 * oncoprint.getHorzZoom()) / 100);
	            });
	
	            appendTo($slider, zoom_elt);
	            addQTipTo($slider, {
	                id: 'oncoprint_zoom_slider_tooltip',
	                prerender: true,
	                content: { text: 'Zoom in/out of oncoprint' },
	                position: { my: 'bottom middle', at: 'top middle', viewport: $(window) },
	                style: { classes: 'qtip-light qtip-rounded qtip-shadow qtip-lightwhite' },
	                show: { event: "mouseover" },
	                hide: { fixed: true, delay: 100, event: "mouseout" }
	            });
	            // use aria-labelledby instead of aria-describedby, as Section 508
	            // requires that inputs have an explicit label for accessibility
	            $slider.attr('aria-labelledby', 'qtip-oncoprint_zoom_slider_tooltip');
	            $slider.removeAttr('aria-describedby');
	            setUpHoverEffect($slider);
	
	            setUpButton($(toolbar_selector + ' #oncoprint_zoomout'), [], ["Zoom out of oncoprint"], null, function () {
	                oncoprint.setHorzZoom(oncoprint.getHorzZoom() * zoom_discount);
	            });
	            setUpButton($(toolbar_selector + ' #oncoprint_zoomin'), [], ["Zoom in to oncoprint"], null, function () {
	                oncoprint.setHorzZoom(oncoprint.getHorzZoom() / zoom_discount);
	            });
	
	            return $slider;
	        }();
	
	        (function setUpSortBySelector() {
	            $(toolbar_selector + ' #by_data_a').click(function () {
	                oncoprint.setSortConfig({ 'type': 'tracks' });
	                _state2.default.sorting_by_given_order = false;
	            });
	            $(toolbar_selector + ' #alphabetically_first_a').click(function () {
	                oncoprint.setSortConfig({ 'type': 'alphabetical' });
	                _state2.default.sorting_by_given_order = false;
	            });
	            $(toolbar_selector + ' #user_defined_first_a').click(function () {
	                _state2.default.sorting_by_given_order = true;
	                _state2.default.patient_order_loaded.then(function () {
	                    oncoprint.setSortConfig({ 'type': 'order', order: _state2.default.user_specified_order });
	                });
	            });
	        })();
	
	        (function setUpToggleCellPadding() {
	            setUpButton($(toolbar_selector + ' #oncoprint-diagram-removeWhitespace-icon'), ['images/unremoveWhitespace.svg', 'images/removeWhitespace.svg'], ["Remove whitespace between columns", "Show whitespace between columns"], function () {
	                return _state2.default.cell_padding_on ? 0 : 1;
	            }, function () {
	                _state2.default.cell_padding_on = !_state2.default.cell_padding_on;
	                oncoprint.setCellPaddingOn(_state2.default.cell_padding_on);
	            });
	        })();
	        (function setUpHideUnalteredCases() {
	            setUpButton($(toolbar_selector + ' #oncoprint-diagram-removeUCases-icon'), ['images/unremoveUCases.svg', 'images/removeUCases.svg'], ['Hide unaltered cases', 'Show unaltered cases'], function () {
	                return _state2.default.unaltered_cases_hidden ? 1 : 0;
	            }, function () {
	                _state2.default.unaltered_cases_hidden = !_state2.default.unaltered_cases_hidden;
	                if (_state2.default.unaltered_cases_hidden) {
	                    oncoprint.hideIds(_state2.default.unaltered_ids, true);
	                } else {
	                    oncoprint.hideIds([], true);
	                }
	            });
	        })();
	        (function setUpZoomToFit() {
	            setUpButton($(toolbar_selector + ' #oncoprint_zoomtofit'), [], ["Zoom to fit altered cases in screen"], null, function () {
	                oncoprint.setHorzZoomToFit(_state2.default.altered_ids);
	                oncoprint.scrollTo(0);
	            });
	        })();
	        (function setUpChangeMutationRuleSet() {
	            $('#oncoprint_diagram_showmutationcolor_icon').show();
	            $('#oncoprint_diagram_mutation_color').hide();
	            var setGeneticAlterationTracksRuleSet = function setGeneticAlterationTracksRuleSet(rule_set_params) {
	                var genetic_alteration_track_ids = Object.keys(_state2.default.genetic_alteration_tracks);
	                oncoprint.setRuleSet(genetic_alteration_track_ids[0], rule_set_params);
	                for (var i = 1; i < genetic_alteration_track_ids.length; i++) {
	                    oncoprint.shareRuleSet(genetic_alteration_track_ids[0], genetic_alteration_track_ids[i]);
	                }
	            };
	
	            setUpButton($(toolbar_selector + ' #oncoprint_diagram_showmutationcolor_icon'), ['images/colormutations.svg', 'images/uncolormutations.svg', 'images/mutationcolorsort.svg'], ['Show all mutations with the same color', 'Color-code mutations but don\'t sort by type', 'Color-code mutations and sort by type'], function () {
	                if (_state2.default.mutations_colored_by_type && _state2.default.sorted_by_mutation_type) {
	                    return 0;
	                } else if (!_state2.default.mutations_colored_by_type) {
	                    return 1;
	                } else if (_state2.default.mutations_colored_by_type && !_state2.default.sorted_by_mutation_type) {
	                    return 2;
	                }
	            }, function () {
	                oncoprint.keepSorted(false);
	                oncoprint.suppressRendering();
	                var genetic_alteration_track_ids = Object.keys(_state2.default.genetic_alteration_tracks);
	                if (_state2.default.mutations_colored_by_type && !_state2.default.sorted_by_mutation_type) {
	                    _state2.default.sorted_by_mutation_type = true;
	                    for (var i = 0; i < genetic_alteration_track_ids.length; i++) {
	                        oncoprint.setTrackSortComparator(genetic_alteration_track_ids[i], comparator_utils.makeGeneticComparator(true));
	                    }
	                } else if (_state2.default.mutations_colored_by_type && _state2.default.sorted_by_mutation_type) {
	                    _state2.default.mutations_colored_by_type = false;
	                    setGeneticAlterationTracksRuleSet(window.geneticrules.genetic_rule_set_same_color_for_all_no_recurrence);
	                } else if (!_state2.default.mutations_colored_by_type) {
	                    _state2.default.mutations_colored_by_type = true;
	                    _state2.default.sorted_by_mutation_type = false;
	                    setGeneticAlterationTracksRuleSet(window.geneticrules.genetic_rule_set_different_colors_no_recurrence);
	                    for (var i = 0; i < genetic_alteration_track_ids.length; i++) {
	                        oncoprint.setTrackSortComparator(genetic_alteration_track_ids[i], comparator_utils.makeGeneticComparator(false));
	                    }
	                }
	                oncoprint.keepSorted();
	                oncoprint.releaseRendering();
	            });
	        })();
	        (function setUpDownload() {
	            var xml_serializer = new XMLSerializer();
	            addQTipTo($(toolbar_selector + ' #oncoprint-diagram-downloads-icon'), {
	                //id: "#oncoprint-diagram-downloads-icon-qtip",
	                style: { classes: 'qtip-light qtip-rounded qtip-shadow qtip-lightwhite' },
	                show: { event: "mouseover" },
	                hide: { fixed: true, delay: 100, event: "mouseout" },
	                position: { my: 'top center', at: 'bottom center', viewport: $(window) },
	                content: {
	                    text: function text() {
	                        return "<button class='oncoprint-diagram-download' type='pdf' style='cursor:pointer;width:90px;'>PDF</button> <br/>" + "<button class='oncoprint-diagram-download' type='png' style='cursor:pointer;width:90px;'>PNG</button> <br/>" + "<button class='oncoprint-diagram-download' type='svg' style='cursor:pointer;width:90px;'>SVG</button> <br/>" + "<button class='oncoprint-sample-download'  type='txt' style='cursor:pointer;width:90px;'>" + (_state2.default.using_sample_data ? "Sample" : "Patient") + " order</button>";
	                    }
	                },
	                events: {
	                    render: function render(event) {
	                        $('body').on('click', '.oncoprint-diagram-download', function () {
	                            var fileType = $(this).attr("type");
	                            var two_megabyte_limit = 2000000;
	                            if (fileType === 'pdf') {
	                                var svg = oncoprint.toSVG(true);
	                                var serialized = cbio.download.serializeHtml(svg);
	                                if (serialized.length > two_megabyte_limit) {
	                                    alert("Oncoprint too big to download as PDF - please download as SVG");
	                                    return;
	                                }
	                                cbio.download.initDownload(serialized, {
	                                    filename: "oncoprint.pdf",
	                                    contentType: "application/pdf",
	                                    servletName: "svgtopdf.do"
	                                });
	                            } else if (fileType === 'svg') {
	                                cbio.download.initDownload(oncoprint.toSVG(), { filename: "oncoprint.svg" });
	                            } else if (fileType === 'png') {
	                                var img = oncoprint.toCanvas(function (canvas, truncated) {
	                                    canvas.toBlob(function (blob) {
	                                        if (truncated) {
	                                            alert("Oncoprint too large - PNG truncated to " + canvas.getAttribute("width") + " by " + canvas.getAttribute("height"));
	                                        }
	                                        saveAs(blob, "oncoprint.png");
	                                    }, 'image/png');
	                                }, 2);
	                            }
	                        });
	
	                        $('body').on('click', '.oncoprint-sample-download', function () {
	                            var idTypeStr = _state2.default.using_sample_data ? "Sample" : "Patient";
	                            var content = idTypeStr + " order in the Oncoprint is: \n";
	                            content += oncoprint.getIdOrder().join('\n');
	                            var downloadOpts = {
	                                filename: 'OncoPrint' + idTypeStr + 's.txt',
	                                contentType: "text/plain;charset=utf-8",
	                                preProcess: false
	                            };
	
	                            // send download request with filename & file content info
	                            cbio.download.initDownload(content, downloadOpts);
	                        });
	                    }
	                }
	            });
	        })();
	    })();
	    return function (data_by_gene, id_key, altered_ids_by_gene, id_order, gene_order) {
	        _state2.default.setData(data_by_gene, id_key, altered_ids_by_gene, id_order, gene_order);
	    };
	};

/***/ },

/***/ 929:
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var changeURLParam = function changeURLParam(param, new_value, url) {
	    var index = url.indexOf(param + '=');
	    var before_url, after_url;
	    if (index === -1) {
	        before_url = url;
	        var indexOfQuestionMark = url.indexOf('?');
	        if (indexOfQuestionMark === -1) {
	            before_url += "?";
	        } else if (before_url[before_url.length - 1] !== "&") {
	            before_url += "&";
	        }
	        after_url = "";
	        index = url.length;
	    } else {
	        before_url = url.substring(0, index);
	        var next_amp = url.indexOf("&", index);
	        if (next_amp === -1) {
	            next_amp = url.length;
	        }
	        after_url = url.substring(next_amp);
	    }
	    return before_url + (new_value.length > 0 ? param + '=' + new_value : "") + after_url;
	};
	var currURL = function currURL() {
	    return window.location.href;
	};
	var getParamValue = function getParamValue(param) {
	    var url = currURL();
	    var param_index = url.indexOf(param + "=");
	    if (param_index > -1) {
	        var param_start = param_index + (param + "=").length;
	        var param_end = url.indexOf("&", param_index);
	        if (param_end === -1) {
	            param_end = url.length;
	        }
	        return url.substring(param_start, param_end);
	    } else {
	        return null;
	    }
	};
	
	var init_show_samples = getParamValue("show_samples");
	var init_clinical_attrs = getParamValue("clinicallist");
	var CLINICAL_ATTRS_PARAM = "clinicallist";
	var SAMPLE_DATA_PARAM = "show_samples";
	
	var exp = {
	    'update': function update(State) {
	        var new_url = currURL();
	        new_url = changeURLParam(CLINICAL_ATTRS_PARAM, State.used_clinical_attributes.map(function (attr) {
	            return encodeURIComponent(attr.attr_id);
	        }).join(","), new_url);
	        new_url = changeURLParam(SAMPLE_DATA_PARAM, State.using_sample_data + '', new_url);
	        window.history.pushState({ "html": window.location.html, "pageTitle": window.location.pageTitle }, "", new_url);
	    },
	    'getInitDataType': function getInitDataType() {
	        if (init_show_samples === null) {
	            return null;
	        } else {
	            return init_show_samples === 'true' ? 'sample' : 'patient';
	        }
	    },
	    'getInitUsedClinicalAttrs': function getInitUsedClinicalAttrs() {
	        if (init_clinical_attrs === null) {
	            return null;
	        } else {
	            return init_clinical_attrs.trim().split(",").map(decodeURIComponent);
	        }
	    },
	    'getDataType': function getDataType() {
	        var using_sample_data = getParamValue(SAMPLE_DATA_PARAM);
	        if (using_sample_data === null) {
	            return null;
	        } else {
	            return using_sample_data ? 'sample' : 'patient';
	        }
	    },
	    'getUsedClinicalAttrs': function getUsedClinicalAttrs() {
	        var clinical_attr_id_list = getParamValue(CLINICAL_ATTRS_PARAM);
	        if (clinical_attr_id_list === null) {
	            return null;
	        } else {
	            return clinical_attr_id_list.trim().split(",").map(decodeURIComponent);
	        }
	    }
	};
	
	exports.default = exp;

/***/ },

/***/ 930:
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var utils = {
	    'timeoutSeparatedLoop': function timeoutSeparatedLoop(array, loopFn) {
	        // loopFn is function(elt, index, array) {
	        var finished_promise = new $.Deferred();
	        var loopBlock = function loopBlock(i) {
	            if (i >= array.length) {
	                finished_promise.resolve();
	                return;
	            }
	
	            loopFn(array[i], i, array);
	            setTimeout(function () {
	                loopBlock(i + 1);
	            }, 0);
	        };
	        loopBlock(0);
	        return finished_promise.promise();
	    },
	    'sign': function sign(x) {
	        if (x > 0) {
	            return 1;
	        } else if (x < 0) {
	            return -1;
	        } else {
	            return 0;
	        }
	    },
	    'sign_of_diff': function sign_of_diff(a, b) {
	        if (a < b) {
	            return -1;
	        } else if (a === b) {
	            return 0;
	        } else if (a > b) {
	            return 1;
	        }
	    },
	    'invertArray': function invertArray(arr) {
	        var ret = {};
	        for (var i = 0; i < arr.length; i++) {
	            ret[arr[i]] = i;
	        }
	        return ret;
	    },
	    'makeSVGElement': function makeSVGElement(tag, attrs) {
	        var el = document.createElementNS('http://www.w3.org/2000/svg', tag);
	        for (var k in attrs) {
	            if (attrs.hasOwnProperty(k)) {
	                el.setAttribute(k, attrs[k]);
	            }
	        }
	        return el;
	    },
	    'objectValues': function objectValues(obj) {
	        return Object.keys(obj).map(function (k) {
	            return obj[k];
	        });
	    },
	    'proportionToPercentString': function proportionToPercentString(p) {
	        var percent = 100 * p;
	        if (p < 0.03) {
	            // if less than 3%, use one decimal figure
	            percent = Math.round(10 * percent) / 10;
	        } else {
	            percent = Math.round(percent);
	        }
	        return percent + '%';
	    }
	};
	
	exports.default = utils;

/***/ },

/***/ 931:
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var tooltipUtils = {
	    'sampleViewAnchorTag': function sampleViewAnchorTag(study_id, sample_id) {
	        var href = cbio.util.getLinkToSampleView(study_id, sample_id);
	        return '<a href="' + href + '" target="_blank">' + sample_id + '</a>';
	    },
	    'patientViewAnchorTag': function patientViewAnchorTag(study_id, patient_id) {
	        var href = cbio.util.getLinkToPatientView(study_id, patient_id);
	        return '<a href="' + href + '" target="_blank">' + patient_id + '</a>';
	    },
	    'makeGeneticTrackTooltip': function makeGeneticTrackTooltip(data_type, link_id) {
	        var listOfTooltipDataToHTML = function listOfTooltipDataToHTML(tooltip_data) {
	            var ret = [];
	            for (var i = 0; i < tooltip_data.length; i++) {
	                var new_ret_elt = '';
	                var tooltip_datum = tooltip_data[i];
	                new_ret_elt += tooltip_datum.amino_acid_change;
	                if (tooltip_datum.cancer_hotspots_hotspot) {
	                    new_ret_elt += ' <img src="images/oncokb-flame.svg" title="Hotspot" style="height:11px; width:11px;"/>';
	                }
	                if (tooltip_datum.oncokb_oncogenic) {
	                    new_ret_elt += ' <img src="images/oncokb-oncogenic-1.svg" title="' + tooltip_datum.oncokb_oncogenic + '" style="height:11px; width:11px;"/>';
	                }
	                ret.push(new_ret_elt);
	            }
	            return ret.join(", ");
	        };
	        return function (d) {
	            var ret = '';
	            var mutations = [];
	            var cna = [];
	            var mrna = [];
	            var prot = [];
	            var fusions = [];
	            for (var i = 0; i < d.data.length; i++) {
	                var datum = d.data[i];
	                if (datum.genetic_alteration_type === "MUTATION_EXTENDED") {
	                    var tooltip_datum = { 'amino_acid_change': datum.amino_acid_change };
	                    if (datum.cancer_hotspots_hotspot) {
	                        tooltip_datum.cancer_hotspots_hotspot = true;
	                    }
	                    if (typeof datum.oncokb_oncogenic !== "undefined" && ["Likely Oncogenic", "Oncogenic"].indexOf(datum.oncokb_oncogenic) > -1) {
	                        tooltip_datum.oncokb_oncogenic = datum.oncokb_oncogenic;
	                    }
	                    (datum.oncoprint_mutation_type === "fusion" ? fusions : mutations).push(tooltip_datum);
	                } else if (datum.genetic_alteration_type === "COPY_NUMBER_ALTERATION") {
	                    var disp_cna = { '-2': 'HOMODELETED', '-1': 'HETLOSS', '1': 'GAIN', '2': 'AMPLIFIED' };
	                    if (disp_cna.hasOwnProperty(datum.profile_data)) {
	                        cna.push(disp_cna[datum.profile_data]);
	                    }
	                } else if (datum.genetic_alteration_type === "MRNA_EXPRESSION" || datum.genetic_alteration_type === "PROTEIN_LEVEL") {
	                    if (datum.oql_regulation_direction) {
	                        (datum.genetic_alteration_type === "MRNA_EXPRESSION" ? mrna : prot).push(datum.oql_regulation_direction === 1 ? "UPREGULATED" : "DOWNREGULATED");
	                    }
	                }
	            }
	            if (fusions.length > 0) {
	                ret += "Fusion: <b>" + listOfTooltipDataToHTML(fusions) + "</b><br>";
	            }
	            if (mutations.length > 0) {
	                ret += 'Mutation: <b>' + listOfTooltipDataToHTML(mutations) + '</b><br>';
	            }
	            if (cna.length > 0) {
	                ret += 'Copy Number Alteration: <b>' + cna.join(", ") + '</b><br>';
	            }
	            if (mrna.length > 0) {
	                ret += 'MRNA: <b>' + mrna.join(", ") + '</b><br>';
	            }
	            if (prot.length > 0) {
	                ret += 'PROT: <b>' + prot.join(", ") + '</b><br>';
	            }
	            ret += data_type === 'sample' ? link_id ? tooltipUtils.sampleViewAnchorTag(d.study_id, d.sample) : d.sample : link_id ? tooltipUtils.patientViewAnchorTag(d.study_id, d.patient) : d.patient;
	            return ret;
	        };
	    },
	    'makeClinicalTrackTooltip': function makeClinicalTrackTooltip(attr, data_type, link_id) {
	        return function (d) {
	            var ret = '';
	            if (attr.attr_id === "NO_CONTEXT_MUTATION_SIGNATURE") {
	                for (var i = 0; i < attr.categories.length; i++) {
	                    ret += '<span style="color:' + attr.fills[i] + ';font-weight:bold;">' + attr.categories[i] + '</span>: ' + d.attr_val_counts[attr.categories[i]] + '<br>';
	                }
	            } else {
	                var attr_vals = d.attr_val_counts && Object.keys(d.attr_val_counts) || [];
	                if (attr_vals.length > 1) {
	                    ret += 'values:<br>';
	                    for (var i = 0; i < attr_vals.length; i++) {
	                        var val = attr_vals[i];
	                        ret += '<b>' + val + '</b>: ' + d.attr_val_counts[val] + '<br>';
	                    }
	                } else if (attr_vals.length === 1) {
	                    ret += 'value: <b>' + attr_vals[0] + '</b><br>';
	                }
	            }
	            ret += link_id ? data_type === 'sample' ? tooltipUtils.sampleViewAnchorTag(d.study_id, d.sample) : tooltipUtils.patientViewAnchorTag(d.study_id, d.patient) : data_type === 'sample' ? d.sample : d.patient;
	            return ret;
	        };
	    }
	};
	
	exports.default = tooltipUtils;

/***/ },

/***/ 932:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _url = __webpack_require__(929);
	
	var _url2 = _interopRequireDefault(_url);
	
	var _querySession = __webpack_require__(933);
	
	var _querySession2 = _interopRequireDefault(_querySession);
	
	var _comparitorUtils = __webpack_require__(937);
	
	var _comparitorUtils2 = _interopRequireDefault(_comparitorUtils);
	
	var _utils = __webpack_require__(930);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _clinicalData = __webpack_require__(938);
	
	var _clinicalData2 = _interopRequireDefault(_clinicalData);
	
	var _tooltipUtils = __webpack_require__(931);
	
	var _tooltipUtils2 = _interopRequireDefault(_tooltipUtils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var QuerySession = (0, _querySession2.default)();
	
	var exp = function () {
	    var oncoprintDatumIsAltered = function oncoprintDatumIsAltered(datum) {
	        return ['disp_mut', 'disp_cna', 'disp_mrna', 'disp_prot', 'disp_fusion'].map(function (x) {
	            return typeof datum[x] !== "undefined";
	        }).reduce(function (x, y) {
	            return x || y;
	        }, false);
	    };
	    var populateSampleData = function populateSampleData() {
	        var done = new $.Deferred();
	        var clinical_attrs = _utils2.default.objectValues(State.clinical_tracks);
	        window.LoadingBar.show();
	        window.LoadingBar.msg(window.LoadingBar.DOWNLOADING_MSG);
	        $.when(QuerySession.getOncoprintSampleGenomicEventData(true), _clinicalData2.default.getSampleData(clinical_attrs)).then(function (oncoprint_data_by_line, clinical_data) {
	
	            window.LoadingBar.msg("Loading oncoprint");
	            oncoprint.suppressRendering();
	            oncoprint.hideIds([], true);
	            oncoprint.keepSorted(false);
	
	            var total_tracks_to_add = Object.keys(State.genetic_alteration_tracks).length + Object.keys(State.clinical_tracks).length;
	
	            _utils2.default.timeoutSeparatedLoop(Object.keys(State.genetic_alteration_tracks), function (track_line, i) {
	                var track_id = State.genetic_alteration_tracks[track_line];
	                var track_data = oncoprint_data_by_line[track_line].oncoprint_data;
	                track_data = State.colorby_knowledge ? annotateOncoprintDataWithRecurrence(State, track_data) : track_data;
	                oncoprint.setTrackData(track_id, track_data, 'uid');
	                oncoprint.setTrackInfo(track_id, _utils2.default.proportionToPercentString(track_data.filter(oncoprintDatumIsAltered).length / QuerySession.getSampleIds().length));
	                oncoprint.setTrackTooltipFn(track_id, _tooltipUtils2.default.makeGeneticTrackTooltip('sample', true));
	                window.LoadingBar.update(i / total_tracks_to_add);
	            }).then(function () {
	                return _utils2.default.timeoutSeparatedLoop(Object.keys(State.clinical_tracks), function (track_id, i) {
	                    var attr = State.clinical_tracks[track_id];
	                    oncoprint.setTrackData(track_id, clinical_data[attr.attr_id], 'uid');
	                    oncoprint.setTrackTooltipFn(track_id, _tooltipUtils2.default.makeClinicalTrackTooltip(attr, 'sample', true));
	                    oncoprint.setTrackInfo(track_id, "");
	                    window.LoadingBar.update((i + Object.keys(State.genetic_alteration_tracks).length) / total_tracks_to_add);
	                });
	            }).then(function () {
	                oncoprint.keepSorted();
	                if (State.unaltered_cases_hidden) {
	                    oncoprint.hideIds(State.getUnalteredIds(), true);
	                }
	                oncoprint.releaseRendering();
	                window.LoadingBar.msg("");
	                window.LoadingBar.hide();
	                updateAlteredPercentIndicator(State);
	                oncoprint.updateHorzZoomToFitIds(State.getAlteredIds());
	                done.resolve();
	            });
	        }).fail(function () {
	            done.reject();
	        });
	        return done.promise();
	    };
	
	    var populatePatientData = function populatePatientData() {
	        var done = new $.Deferred();
	        var clinical_attrs = _utils2.default.objectValues(State.clinical_tracks);
	        window.LoadingBar.show();
	        window.LoadingBar.msg(window.LoadingBar.DOWNLOADING_MSG);
	        $.when(QuerySession.getOncoprintPatientGenomicEventData(true), _clinicalData2.default.getPatientData(clinical_attrs), QuerySession.getPatientIds()).then(function (oncoprint_data_by_line, clinical_data, patient_ids) {
	            window.LoadingBar.msg("Loading oncoprint");
	            oncoprint.suppressRendering();
	            oncoprint.hideIds([], true);
	            oncoprint.keepSorted(false);
	
	            var total_tracks_to_add = Object.keys(State.genetic_alteration_tracks).length + Object.keys(State.clinical_tracks).length;
	
	            _utils2.default.timeoutSeparatedLoop(Object.keys(State.genetic_alteration_tracks), function (track_line, i) {
	                var track_id = State.genetic_alteration_tracks[track_line];
	                var track_data = oncoprint_data_by_line[track_line].oncoprint_data;
	                track_data = State.colorby_knowledge ? annotateOncoprintDataWithRecurrence(State, track_data) : track_data;
	                oncoprint.setTrackData(track_id, track_data, 'uid');
	                oncoprint.setTrackInfo(track_id, _utils2.default.proportionToPercentString(track_data.filter(oncoprintDatumIsAltered).length / patient_ids.length));
	                oncoprint.setTrackTooltipFn(track_id, _tooltipUtils2.default.makeGeneticTrackTooltip('patient', true));
	                window.LoadingBar.update(i / total_tracks_to_add);
	            }).then(function () {
	                return _utils2.default.timeoutSeparatedLoop(Object.keys(State.clinical_tracks), function (track_id, i) {
	                    var attr = State.clinical_tracks[track_id];
	                    oncoprint.setTrackData(track_id, clinical_data[attr.attr_id], 'uid');
	                    oncoprint.setTrackTooltipFn(track_id, _tooltipUtils2.default.makeClinicalTrackTooltip(attr, 'patient', true));
	                    oncoprint.setTrackInfo(track_id, "");
	                    window.LoadingBar.update((i + Object.keys(State.genetic_alteration_tracks).length) / total_tracks_to_add);
	                });
	            }).then(function () {
	                oncoprint.keepSorted();
	                if (State.unaltered_cases_hidden) {
	                    oncoprint.hideIds(State.getUnalteredIds(), true);
	                }
	                oncoprint.releaseRendering();
	                window.LoadingBar.msg("");
	                window.LoadingBar.hide();
	                updateAlteredPercentIndicator(State);
	                oncoprint.updateHorzZoomToFitIds(State.getAlteredIds());
	                done.resolve();
	            });
	        }).fail(function () {
	            done.reject();
	        });
	        return done.promise();
	    };
	
	    var populateClinicalTrack = function populateClinicalTrack(track_id) {
	        var done = new $.Deferred();
	        var attr = State.clinical_tracks[track_id];
	        _clinicalData2.default[State.using_sample_data ? 'getSampleData' : 'getPatientData'](attr).then(function (data) {
	            data = data[attr.attr_id];
	            oncoprint.setTrackData(track_id, data, "uid");
	            oncoprint.setTrackTooltipFn(track_id, _tooltipUtils2.default.makeClinicalTrackTooltip(attr, State.using_sample_data ? 'sample' : 'patient', true));
	            oncoprint.setTrackInfo(track_id, "");
	            done.resolve();
	        }).fail(function () {
	            done.reject();
	        });
	        return done.promise();
	    };
	
	    var makeRemoveAttributeHandler = function makeRemoveAttributeHandler(attr) {
	        return function (track_id) {
	            delete State.clinical_tracks[track_id];
	            State.unuseAttribute(attr.attr_id);
	            Toolbar.refreshClinicalAttributeSelector();
	            if (Object.keys(State.clinical_tracks).length === 0) {
	                $(toolbar_selector + ' #oncoprint-diagram-showlegend-icon').hide();
	            }
	        };
	    };
	    var setSortOrder = function setSortOrder(order) {
	        oncoprint.setSortConfig({ 'type': 'order', 'order': order });
	    };
	
	    var updateAlteredPercentIndicator = function updateAlteredPercentIndicator(state) {
	        $.when(QuerySession.getPatientIds()).then(function (patient_ids) {
	            var altered_ids = state.getAlteredIds();
	            var text = "Altered in ";
	            text += altered_ids.length;
	            text += " (";
	            text += _utils2.default.proportionToPercentString(altered_ids.length / (state.using_sample_data ? QuerySession.getSampleIds().length : patient_ids.length));
	            text += ") of ";
	            text += state.using_sample_data ? QuerySession.getSampleIds().length : patient_ids.length;
	            text += " ";
	            text += state.using_sample_data ? "samples" : "cases/patients";
	            $('#altered_value').text(text);
	        });
	    };
	
	    var annotateOncoprintDataWithRecurrence = function annotateOncoprintDataWithRecurrence(state, list_of_oncoprint_data) {
	        var known_mutation_settings = QuerySession.getKnownMutationSettings();
	        var isRecurrent = function isRecurrent(d) {
	            return known_mutation_settings.recognize_hotspot && d.cancer_hotspots_hotspot || known_mutation_settings.recognize_oncokb_oncogenic && typeof d.oncokb_oncogenic !== "undefined" && ["likely oncogenic", "oncogenic"].indexOf(d.oncokb_oncogenic.toLowerCase()) > -1 || known_mutation_settings.recognize_cbioportal_count && typeof d.cbioportal_mutation_count !== "undefined" && d.cbioportal_mutation_count >= known_mutation_settings.cbioportal_count_thresh || known_mutation_settings.recognize_cosmic_count && typeof d.cosmic_count !== "undefined" && d.cosmic_count >= known_mutation_settings.cosmic_count_thresh;
	        };
	        for (var i = 0; i < list_of_oncoprint_data.length; i++) {
	            var oncoprint_datum = list_of_oncoprint_data[i];
	            if (typeof oncoprint_datum.disp_mut === "undefined") {
	                continue;
	            }
	            var disp_mut = oncoprint_datum.disp_mut.toLowerCase();
	            var webservice_data = oncoprint_datum.data;
	            var has_known_disp_mut = false;
	            for (var j = 0; j < webservice_data.length; j++) {
	                var datum = webservice_data[j];
	                if (datum.genetic_alteration_type !== "MUTATION_EXTENDED") {
	                    continue;
	                }
	                var mutation_type = datum.oncoprint_mutation_type.toLowerCase();
	                if (mutation_type === disp_mut) {
	                    if (isRecurrent(datum)) {
	                        has_known_disp_mut = true;
	                        break;
	                    }
	                }
	            }
	            if (has_known_disp_mut) {
	                oncoprint_datum.disp_mut += "_rec";
	            }
	        }
	        return list_of_oncoprint_data;
	    };
	
	    var State = {
	        'first_genetic_alteration_track': null,
	        'genetic_alteration_tracks': {}, // track_id -> gene
	        'clinical_tracks': {}, // track_id -> attr
	
	        'used_clinical_attributes': [],
	        'unused_clinical_attributes': [],
	        'clinical_attributes_fetched': new $.Deferred(),
	        'clinical_attr_id_to_sample_data': {},
	        'clinical_attr_id_to_patient_data': {},
	
	        'cell_padding_on': true,
	        'using_sample_data': _url2.default.getInitDataType() === 'sample',
	        'unaltered_cases_hidden': false,
	        'clinical_track_legends_shown': false,
	        'mutations_colored_by_type': true,
	        'sorted_by_mutation_type': true,
	
	        'patient_order_loaded': new $.Deferred(),
	        'patient_order': [],
	
	        'sortby': 'data',
	        'sortby_type': true,
	        'sortby_recurrence': true,
	
	        'colorby_type': true,
	        'colorby_knowledge': true,
	
	        'sorting_by_given_order': false,
	        'sorting_alphabetically': false,
	
	        'useAttribute': function useAttribute(attr_id) {
	            var index = this.unused_clinical_attributes.findIndex(function (attr) {
	                return attr.attr_id === attr_id;
	            });
	            var ret = null;
	            if (index > -1) {
	                var attr = this.unused_clinical_attributes[index];
	                this.unused_clinical_attributes.splice(index, 1);
	                this.used_clinical_attributes.push(attr);
	                ret = attr;
	            }
	            _url2.default.update(exp);
	            return ret;
	        },
	        'unuseAttribute': function unuseAttribute(attr_id) {
	            var index = this.used_clinical_attributes.findIndex(function (attr) {
	                return attr.attr_id === attr_id;
	            });
	            if (index > -1) {
	                var attr = this.used_clinical_attributes[index];
	                this.used_clinical_attributes.splice(index, 1);
	                this.unused_clinical_attributes.push(attr);
	            }
	            _url2.default.update(exp);
	        },
	        'refreshData': function refreshData() {
	            if (this.using_sample_data) {
	                return populateSampleData();
	            } else {
	                return populatePatientData();
	            }
	        },
	        'setDataType': function setDataType(sample_or_patient) {
	            var def = new $.Deferred();
	            var self = this;
	            QuerySession.getCaseUIDMap().then(function (case_uid_map) {
	                // TODO: assume multiple studies
	                var study_id = QuerySession.getCancerStudyIds()[0];
	                var getUID = function getUID(id) {
	                    return case_uid_map[study_id][id];
	                };
	                var proxy_promise;
	                if (sample_or_patient === 'sample') {
	                    self.using_sample_data = true;
	                    _url2.default.update(exp);
	                    updateAlteredPercentIndicator(self);
	                    proxy_promise = populateSampleData();
	                } else if (sample_or_patient === 'patient') {
	                    self.using_sample_data = false;
	                    _url2.default.update(exp);
	                    updateAlteredPercentIndicator(self);
	                    proxy_promise = populatePatientData();
	                }
	                self.patient_order_loaded.then(function () {
	                    var id_order = (self.using_sample_data ? QuerySession.getSampleIds() : self.patient_order).slice();
	                    if (self.sorting_alphabetically) {
	                        id_order = id_order.sort();
	                    }
	                    if (self.sorting_alphabetically || self.sorting_by_given_order) {
	                        setSortOrder(id_order.map(getUID));
	                    }
	                    proxy_promise.then(function () {
	                        def.resolve();
	                    }).fail(function () {
	                        def.fail();
	                    });
	                });
	            });
	            return def.promise();
	        },
	        'addGeneticTracks': function addGeneticTracks(oncoprint_data_by_line) {
	            oncoprint.suppressRendering();
	            var track_ids = [];
	            for (var i = 0; i < oncoprint_data_by_line.length; i++) {
	                var track_params = {
	                    'rule_set_params': this.getGeneticRuleSetParams(),
	                    'label': oncoprint_data_by_line[i].gene,
	                    'target_group': 1,
	                    'sortCmpFn': this.getGeneticComparator(),
	                    'removable': true,
	                    'description': oncoprint_data_by_line[i].oql_line
	                };
	                var new_track_id = oncoprint.addTracks([track_params])[0];
	                track_ids.push(new_track_id);
	                State.genetic_alteration_tracks[i] = new_track_id;
	                if (State.first_genetic_alteration_track === null) {
	                    State.first_genetic_alteration_track = new_track_id;
	                } else {
	                    oncoprint.shareRuleSet(State.first_genetic_alteration_track, new_track_id);
	                }
	            }
	            oncoprint.releaseRendering();
	            return track_ids;
	        },
	        'useAndAddAttribute': function useAndAddAttribute(attr_id) {
	            var attr = this.useAttribute(attr_id);
	            this.addClinicalTracks(attr);
	        },
	        'addClinicalTracks': function addClinicalTracks(attrs) {
	            attrs = [].concat(attrs);
	            oncoprint.suppressRendering();
	            var track_ids = [];
	            for (var i = 0; i < attrs.length; i++) {
	                var attr = attrs[i];
	                var track_params;
	                if (attr.attr_id === '# mutations') {
	                    track_params = {
	                        'rule_set_params': {
	                            'type': 'bar',
	                            'log_scale': true,
	                            'value_key': 'attr_val'
	                        }
	                    };
	                } else if (attr.attr_id === 'FRACTION_GENOME_ALTERED') {
	                    track_params = {
	                        'rule_set_params': {
	                            'type': 'bar',
	                            'value_key': 'attr_val',
	                            'value_range': [0, 1]
	                        }
	                    };
	                } else if (attr.attr_id === 'NO_CONTEXT_MUTATION_SIGNATURE') {
	                    track_params = {
	                        'rule_set_params': {
	                            'type': 'stacked_bar',
	                            'value_key': 'attr_val_counts',
	                            'categories': attr.categories,
	                            'fills': attr.fills
	                        }
	                    };
	                } else {
	                    track_params = {};
	                    if (attr.datatype.toLowerCase() === 'number') {
	                        track_params['rule_set_params'] = {
	                            'type': 'bar',
	                            'value_key': 'attr_val'
	                        };
	                    } else {
	                        track_params['rule_set_params'] = {
	                            'type': 'categorical',
	                            'category_key': 'attr_val'
	                        };
	                    }
	                }
	
	                track_params['rule_set_params']['legend_label'] = attr.display_name;
	                track_params['rule_set_params']['exclude_from_legend'] = !State.clinical_track_legends_shown;
	                track_params['label'] = attr.display_name;
	                track_params['description'] = attr.description;
	                track_params['removable'] = true;
	                track_params['removeCallback'] = makeRemoveAttributeHandler(attr);
	                track_params['sort_direction_changeable'] = true;
	                track_params['track_info'] = '\u23F3';
	
	                if (attr.datatype.toLowerCase() === "number") {
	                    track_params['sortCmpFn'] = _comparitorUtils2.default.numericalClinicalComparator;
	                } else if (attr.datatype.toLowerCase() === "string") {
	                    track_params['sortCmpFn'] = _comparitorUtils2.default.stringClinicalComparator;
	                } else if (attr.datatype.toLowerCase() === "counts_map") {
	                    track_params['sortCmpFn'] = _comparitorUtils2.default.makeCountsMapClinicalComparator(attr.categories);
	                }
	
	                track_params['init_sort_direction'] = 0;
	                track_params['target_group'] = 0;
	
	                var new_track_id = oncoprint.addTracks([track_params])[0];
	                track_ids.push(new_track_id);
	                State.clinical_tracks[new_track_id] = attr;
	            }
	            oncoprint.releaseRendering();
	            return track_ids;
	        },
	        'addAndPopulateClinicalTracks': function addAndPopulateClinicalTracks(attrs) {
	            var def = new $.Deferred();
	            var track_ids = this.addClinicalTracks(attrs);
	            var promises = track_ids.map(populateClinicalTrack);
	            $.when.apply(null, promises).then(function () {
	                def.resolve();
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getGeneticComparator': function getGeneticComparator() {
	            return _comparitorUtils2.default.makeGeneticComparator(this.colorby_type && this.sortby_type, this.colorby_knowledge && this.sortby_recurrence);
	        },
	        'getGeneticRuleSetParams': function getGeneticRuleSetParams() {
	            if (this.colorby_type) {
	                if (this.colorby_knowledge) {
	                    return window.geneticrules.genetic_rule_set_different_colors_recurrence;
	                } else {
	                    return window.geneticrules.genetic_rule_set_different_colors_no_recurrence;
	                }
	            } else {
	                if (this.colorby_knowledge) {
	                    return window.geneticrules.genetic_rule_set_same_color_for_all_recurrence;
	                } else {
	                    return window.geneticrules.genetic_rule_set_same_color_for_all_no_recurrence;
	                }
	            }
	        },
	        'getAlteredIds': function getAlteredIds() {
	            var track_ids = _utils2.default.objectValues(State.genetic_alteration_tracks);
	            var altered = {};
	            for (var i = 0; i < track_ids.length; i++) {
	                var data = oncoprint.getTrackData(track_ids[i]);
	                var data_id_key = oncoprint.getTrackDataIdKey(track_ids[i]);
	                var altered_ids = data.filter(oncoprintDatumIsAltered).map(function (x) {
	                    return x[data_id_key];
	                });
	                for (var j = 0; j < altered_ids.length; j++) {
	                    altered[altered_ids[j]] = true;
	                }
	            }
	            return Object.keys(altered);
	        },
	        'getUnalteredIds': function getUnalteredIds() {
	            var track_ids = _utils2.default.objectValues(State.genetic_alteration_tracks);
	            var unaltered = {};
	            for (var i = 0; i < track_ids.length; i++) {
	                var data = oncoprint.getTrackData(track_ids[i]);
	                var data_id_key = oncoprint.getTrackDataIdKey(track_ids[i]);
	                if (i === 0) {
	                    var unaltered_ids = data.filter(function (d) {
	                        return !oncoprintDatumIsAltered(d);
	                    }).map(function (x) {
	                        return x[data_id_key];
	                    });
	                    for (var j = 0; j < unaltered_ids.length; j++) {
	                        unaltered[unaltered_ids[j]] = true;
	                    }
	                } else {
	                    var altered_ids = data.filter(oncoprintDatumIsAltered).map(function (x) {
	                        return x[data_id_key];
	                    });
	                    for (var j = 0; j < altered_ids.length; j++) {
	                        unaltered[altered_ids[j]] = false;
	                    }
	                }
	            }
	            return Object.keys(unaltered).filter(function (x) {
	                return !!unaltered[x];
	            });
	        }
	    };
	
	    (function loadPatientOrder(state) {
	        if (state.patient_order_loaded.state() === "resolved") {
	            return;
	        } else {
	            QuerySession.getPatientSampleIdMap().then(function (sample_to_patient) {
	                var patients = QuerySession.getSampleIds().map(function (s) {
	                    return sample_to_patient[s];
	                });
	                var patient_added_to_order = {};
	                var patient_order = [];
	                for (var i = 0; i < patients.length; i++) {
	                    if (!patient_added_to_order[patients[i]]) {
	                        patient_added_to_order[patients[i]] = true;
	                        patient_order.push(patients[i]);
	                    }
	                }
	                state.patient_order = patient_order;
	                state.patient_order_loaded.resolve();
	            });
	        }
	    })(State);
	    return State;
	}();
	
	exports.default = exp;

/***/ },

/***/ 933:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	exports.default = function () {
	
	    var data = [["coadread_tcga_pub_mutations", "coadread_tcga_pub_gistic"], "KRAS NRAS BRAF", ["coadread_tcga_pub"], { "coadread_tcga_pub": ["TCGA-A6-2670-01", "TCGA-A6-2677-01", "TCGA-AA-3524-01", "TCGA-AA-3529-01", "TCGA-AA-3532-01", "TCGA-AA-3538-01", "TCGA-AA-3544-01", "TCGA-AA-3552-01", "TCGA-AA-3553-01", "TCGA-AA-3562-01", "TCGA-AA-3667-01", "TCGA-AA-3673-01", "TCGA-AA-3678-01", "TCGA-AA-3692-01", "TCGA-AA-3842-01", "TCGA-AA-3851-01", "TCGA-AA-3856-01", "TCGA-AA-3858-01", "TCGA-AA-3869-01", "TCGA-AA-3872-01", "TCGA-AA-3956-01", "TCGA-AA-3971-01", "TCGA-AA-3975-01", "TCGA-AA-3976-01", "TCGA-AA-3979-01", "TCGA-AA-A004-01", "TCGA-AA-A00D-01", "TCGA-AA-A00U-01", "TCGA-AA-A017-01", "TCGA-AA-A01G-01", "TCGA-AA-A01K-01", "TCGA-AA-A02J-01", "TCGA-AA-A02W-01", "TCGA-AF-3913-01", "TCGA-AG-3582-01", "TCGA-AG-3584-01", "TCGA-AG-3587-01", "TCGA-AG-3598-01", "TCGA-AG-3600-01", "TCGA-AG-3601-01", "TCGA-AG-3612-01", "TCGA-AG-3726-01", "TCGA-AG-3883-01", "TCGA-AG-3887-01", "TCGA-AG-3999-01", "TCGA-AG-4005-01", "TCGA-AG-4008-01", "TCGA-AG-4015-01", "TCGA-AG-A00H-01", "TCGA-AG-A011-01", "TCGA-AG-A014-01", "TCGA-AG-A016-01", "TCGA-AY-4070-01", "TCGA-A6-2683-01", "TCGA-A6-3807-01", "TCGA-AA-3517-01", "TCGA-AA-3519-01", "TCGA-AA-3521-01", "TCGA-AA-3530-01", "TCGA-AA-3531-01", "TCGA-AA-3549-01", "TCGA-AA-3560-01", "TCGA-AA-3561-01", "TCGA-AA-3666-01", "TCGA-AA-3679-01", "TCGA-AA-3688-01", "TCGA-AA-3693-01", "TCGA-AA-3814-01", "TCGA-AA-3819-01", "TCGA-AA-3846-01", "TCGA-AA-3848-01", "TCGA-AA-3855-01", "TCGA-AA-3860-01", "TCGA-AA-3866-01", "TCGA-AA-3955-01", "TCGA-AA-3972-01", "TCGA-AA-3973-01", "TCGA-AA-3989-01", "TCGA-AA-A00F-01", "TCGA-AA-A00L-01", "TCGA-AA-A00O-01", "TCGA-AA-A00Q-01", "TCGA-AA-A00W-01", "TCGA-AA-A00Z-01", "TCGA-AA-A01F-01", "TCGA-AA-A02F-01", "TCGA-AA-A02H-01", "TCGA-AG-3581-01", "TCGA-AG-3583-01", "TCGA-AG-3593-01", "TCGA-AG-3602-01", "TCGA-AG-3608-01", "TCGA-AG-3609-01", "TCGA-AG-3611-01", "TCGA-AG-3727-01", "TCGA-AG-3882-01", "TCGA-AG-3890-01", "TCGA-AG-3893-01", "TCGA-AG-3896-01", "TCGA-AG-3898-01", "TCGA-AG-3909-01", "TCGA-AG-4001-01", "TCGA-AG-A008-01", "TCGA-AG-A00C-01", "TCGA-AG-A015-01", "TCGA-AG-A01L-01", "TCGA-AG-A02G-01", "TCGA-AG-A02X-01", "TCGA-AG-A032-01", "TCGA-AY-4071-01", "TCGA-AA-3527-01", "TCGA-AA-3680-01", "TCGA-AA-3684-01", "TCGA-AA-3831-01", "TCGA-AA-3994-01", "TCGA-AA-A024-01", "TCGA-AG-3878-01", "TCGA-AG-3901-01", "TCGA-AG-A025-01", "TCGA-A6-2674-01", "TCGA-A6-2678-01", "TCGA-AA-3520-01", "TCGA-AA-3522-01", "TCGA-AA-3534-01", "TCGA-AA-3681-01", "TCGA-AA-3696-01", "TCGA-AA-3812-01", "TCGA-AA-3818-01", "TCGA-AA-3837-01", "TCGA-AA-3875-01", "TCGA-AA-3930-01", "TCGA-AA-3939-01", "TCGA-AA-3952-01", "TCGA-AA-3986-01", "TCGA-AA-A01I-01", "TCGA-AG-3599-01", "TCGA-AG-3605-01", "TCGA-AG-3894-01", "TCGA-AA-3514-01", "TCGA-AA-3556-01", "TCGA-AA-3558-01", "TCGA-AA-3664-01", "TCGA-AA-3852-01", "TCGA-AA-3854-01", "TCGA-AA-3870-01", "TCGA-AA-A00K-01", "TCGA-AA-A01D-01", "TCGA-AA-A029-01", "TCGA-AG-3586-01", "TCGA-AG-3594-01", "TCGA-AG-3881-01", "TCGA-AG-3902-01", "TCGA-AA-3526-01", "TCGA-AA-3542-01", "TCGA-AA-3548-01", "TCGA-AA-3685-01", "TCGA-AA-3695-01", "TCGA-AF-2689-01", "TCGA-AF-2691-01", "TCGA-AF-2692-01", "TCGA-AF-3400-01", "TCGA-AG-3574-01", "TCGA-AG-3575-01", "TCGA-AG-3578-01", "TCGA-AG-3580-01"] }, 2, 2, { "case_set_id": "coadread_tcga_pub_nonhypermut", "case_ids_key": "ac20e851f1623df2a6b403bd7be38ae0", "case_set_name": "Non-hypermutated samples (Complete)", "case_set_description": "Samples with a mutation rate of < 10 / mio bases, subset of the 196 \"complete\" samples in the manuscript (165 samples)" }];
	
	    if (instance) {
	        return instance;
	    } else {
	        instance = initDatamanager.apply(this, data);
	        return instance;
	    }
	};
	
	var _cbioportalClient = __webpack_require__(655);
	
	var _cbioportalClient2 = _interopRequireDefault(_cbioportalClient);
	
	var _geneticRules = __webpack_require__(934);
	
	var _geneticRules2 = _interopRequireDefault(_geneticRules);
	
	var _oql = __webpack_require__(935);
	
	var _oql2 = _interopRequireDefault(_oql);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	window.geneticrules = _geneticRules2.default;
	
	window.cbioportal_client = _cbioportalClient2.default;
	
	var initDatamanager = function initDatamanager(genetic_profile_ids, oql_query, cancer_study_ids, study_sample_map, z_score_threshold, rppa_score_threshold, case_set_properties) {
	
	    var deepCopyObject = function deepCopyObject(obj) {
	        return $.extend(true, $.isArray(obj) ? [] : {}, obj);
	    };
	    var objectValues = function objectValues(obj) {
	        return Object.keys(obj).map(function (key) {
	            return obj[key];
	        });
	    };
	    var objectKeyDifference = function objectKeyDifference(from, by) {
	        var ret = {};
	        var from_keys = Object.keys(from);
	        for (var i = 0; i < from_keys.length; i++) {
	            if (!by[from_keys[i]]) {
	                ret[from_keys[i]] = true;
	            }
	        }
	        return ret;
	    };
	    var objectKeyValuePairs = function objectKeyValuePairs(obj) {
	        return Object.keys(obj).map(function (key) {
	            return [key, obj[key]];
	        });
	    };
	    var objectKeyUnion = function objectKeyUnion(list_of_objs) {
	        var union = {};
	        for (var i = 0; i < list_of_objs.length; i++) {
	            var keys = Object.keys(list_of_objs[i]);
	            for (var j = 0; j < keys.length; j++) {
	                union[keys[j]] = true;
	            }
	        }
	        return union;
	    };
	    var objectKeyIntersection = function objectKeyIntersection(list_of_objs) {
	        var intersection = {};
	        for (var i = 0; i < list_of_objs.length; i++) {
	            if (i === 0) {
	                var keys = Object.keys(list_of_objs[0]);
	                for (var j = 0; j < keys.length; j++) {
	                    intersection[keys[j]] = true;
	                }
	            } else {
	                var obj = list_of_objs[i];
	                var keys = Object.keys(intersection);
	                for (var j = 0; j < keys.length; j++) {
	                    if (!obj[keys[j]]) {
	                        delete intersection[keys[j]];
	                    }
	                }
	            }
	        }
	        return intersection;
	    };
	    var stringListToObject = function stringListToObject(list) {
	        var ret = {};
	        for (var i = 0; i < list.length; i++) {
	            ret[list[i]] = true;
	        }
	        return ret;
	    };
	    var stringListDifference = function stringListDifference(from, by) {
	        return Object.keys(objectKeyDifference(stringListToObject(from), stringListToObject(by)));
	    };
	    var stringListUnion = function stringListUnion(list_of_string_lists) {
	        return Object.keys(objectKeyUnion(list_of_string_lists.map(function (string_list) {
	            return stringListToObject(string_list);
	        })));
	    };
	    var stringListUnique = function stringListUnique(list) {
	        return Object.keys(stringListToObject(list));
	    };
	    var flatten = function flatten(list_of_lists) {
	        return list_of_lists.reduce(function (a, b) {
	            return a.concat(b);
	        }, []);
	    };
	    var getSimplifiedMutationType = function getSimplifiedMutationType(type) {
	        var ret = null;
	        type = type.toLowerCase();
	        switch (type) {
	            case "missense_mutation":
	            case "missense":
	            case "missense_variant":
	                ret = "missense";
	                break;
	            case "frame_shift_ins":
	            case "frame_shift_del":
	            case "frameshift":
	            case "frameshift_deletion":
	            case "frameshift_insertion":
	            case "de_novo_start_outofframe":
	            case "frameshift_variant":
	                ret = "frameshift";
	                break;
	            case "nonsense_mutation":
	            case "nonsense":
	            case "stopgain_snv":
	                ret = "nonsense";
	                break;
	            case "splice_site":
	            case "splice":
	            case "splice site":
	            case "splicing":
	            case "splice_site_snp":
	            case "splice_site_del":
	            case "splice_site_indel":
	                ret = "splice";
	                break;
	            case "translation_start_site":
	            case "start_codon_snp":
	            case "start_codon_del":
	                ret = "nonstart";
	                break;
	            case "nonstop_mutation":
	                ret = "nonstop";
	                break;
	            case "fusion":
	                ret = "fusion";
	                break;
	            case "in_frame_del":
	            case "in_frame_ins":
	            case "indel":
	            case "nonframeshift_deletion":
	            case "nonframeshift":
	            case "nonframeshift insertion":
	            case "nonframeshift_insertion":
	            case "targeted_region":
	                ret = "inframe";
	                break;
	            default:
	                ret = "other";
	                break;
	        }
	        return ret;
	    };
	    var getOncoprintMutationType = function getOncoprintMutationType(type) {
	        // In: output of getSimplifiedMutationType
	        // Out: Everything that's not missense, inframe, or fusion becomes trunc
	        type = type.toLowerCase();
	        return ["missense", "inframe", "fusion"].indexOf(type) > -1 ? type : "trunc";
	    };
	    var insertionIndex = function insertionIndex(sorted_list, target) {
	        /* In: sorted_list, a sorted list of unique numbers
	         *     target, a number
	         * Out: the index of the smallest element >= target
	         */
	        var lower_inc = 0;
	        var upper_exc = sorted_list.length;
	        while (lower_inc < upper_exc) {
	            var proposed = Math.floor((lower_inc + upper_exc) / 2);
	            if (sorted_list[proposed] === target) {
	                return proposed;
	            } else if (sorted_list[proposed] < target) {
	                lower_inc = proposed + 1;
	            } else if (sorted_list[proposed] > target) {
	                upper_exc = proposed;
	            }
	        }
	        return upper_exc;
	    };
	
	    var getCBioPortalMutationCounts = function getCBioPortalMutationCounts(webservice_data) {
	        /* In: - webservice_data, a list of data obtained from the webservice API
	         * Out: Promise which resolves with map from gene+","+start_pos+","+end_pos to cbioportal mutation count for that position range and gene
	         */
	        var counts_map = {};
	        var def = new $.Deferred();
	        var to_query = {};
	        for (var i = 0; i < webservice_data.length; i++) {
	            var datum = webservice_data[i];
	            if (datum.genetic_alteration_type !== "MUTATION_EXTENDED") {
	                continue;
	            }
	            var gene = datum.hugo_gene_symbol;
	            var start_pos = datum.protein_start_position;
	            var end_pos = datum.protein_end_position;
	            if (gene && start_pos && end_pos && !isNaN(start_pos) && !isNaN(end_pos)) {
	                to_query[gene + ',' + parseInt(start_pos, 10) + ',' + parseInt(end_pos, 10)] = true;
	            }
	        }
	        var queries = Object.keys(to_query).map(function (x) {
	            var splitx = x.split(',');
	            return {
	                gene: splitx[0],
	                start_pos: splitx[1],
	                end_pos: splitx[2]
	            };
	        });
	        var genes = queries.map(function (q) {
	            return q.gene;
	        });
	        var starts = queries.map(function (q) {
	            return q.start_pos;
	        });
	        var ends = queries.map(function (q) {
	            return q.end_pos;
	        });
	
	        window.cbioportal_client.getMutationCounts({
	            'type': 'count',
	            'per_study': false,
	            'gene': genes,
	            'start': starts,
	            'end': ends,
	            'echo': ['gene', 'start', 'end']
	        }).then(function (counts) {
	            for (var i = 0; i < counts.length; i++) {
	                var gene = counts[i].gene;
	                var start = parseInt(counts[i].start, 10);
	                var end = parseInt(counts[i].end, 10);
	                counts_map[gene + ',' + start + ',' + end] = parseInt(counts[i].count, 10);
	            }
	            def.resolve(counts_map);
	        }).fail(function () {
	            def.reject();
	        });
	        return def.promise();
	    };
	
	    var host = ("www.cbioportal.org/api-legacy");
	
	    var getCOSMICCounts = function getCOSMICCounts(webservice_data) {
	        /* In: - webservice_data, a list of data obtained from the webservice API
	         * Out: Promise which resolves with map from keyword to COSMIC count records
	         */
	        var def = new $.Deferred();
	        var keywords = webservice_data.filter(function (datum) {
	            return datum.genetic_alteration_type === "MUTATION_EXTENDED" && typeof datum.keyword !== 'undefined' && datum.keyword !== null;
	        }).map(function (mutation_datum_with_keyword) {
	            return mutation_datum_with_keyword.keyword;
	        });
	        var counts = {};
	        $.ajax({
	            type: 'POST',
	            url: '//' + host + '/cosmic_count',
	            data: 'keywords=' + keywords.join(",")
	        }).then(function (cosmic_count_records) {
	            for (var i = 0; i < cosmic_count_records.length; i++) {
	                var keyword = cosmic_count_records[i].keyword;
	                counts[keyword] = counts[keyword] || [];
	                counts[keyword].push(cosmic_count_records[i]);
	            }
	            def.resolve(counts);
	        });
	        return def.promise();
	    };
	    var getOncoKBAnnotations = function getOncoKBAnnotations(webservice_data) {
	        /* In: - webservice_data, a list of data obtained from the webservice API
	         * Out: Promise which resolves with map from gene.toUpperCase() to amino acid change.toUpperCase() to one of ['Unknown', 'Likely Neutral', 'Likely Oncogenic', 'Oncogenic']
	         */
	        var def = new $.Deferred();
	        var oncogenic = {}; // See Out above
	
	        // Collect genes and alterations to query
	        for (var i = 0; i < webservice_data.length; i++) {
	            var datum = webservice_data[i];
	            if (datum.genetic_alteration_type === "MUTATION_EXTENDED") {
	                var gene = datum.hugo_gene_symbol.toUpperCase();
	                var alteration = datum.amino_acid_change.toUpperCase();
	                oncogenic[gene] = oncogenic[gene] || {};
	                oncogenic[gene][alteration] = false;
	            }
	        }
	        var queries = [];
	        var query_genes = Object.keys(oncogenic);
	        for (var i = 0; i < query_genes.length; i++) {
	            var query_alterations = Object.keys(oncogenic[query_genes[i]]);
	            for (var j = 0; j < query_alterations.length; j++) {
	                queries.push({ 'hugoSymbol': query_genes[i], 'alteration': query_alterations[j] });
	            }
	        }
	        // Execute query
	        var query = {
	            "geneStatus": "Complete",
	            "source": "cbioportal",
	            "evidenceTypes": "ONCOGENIC",
	            "queries": queries,
	            "levels": ["LEVEL_1", "LEVEL_2A", "LEVEL_3A", "LEVEL_R1"]
	        };
	        $.ajax({
	            type: "POST",
	            url: '//' + host + '/proxy/oncokb',
	            contentType: "application/json",
	            data: JSON.stringify(query)
	        }).then(function (response) {
	            response = JSON.parse(response);
	            for (var i = 0; i < response.length; i++) {
	                var gene = response[i].query.hugoSymbol.toUpperCase();
	                var alteration = response[i].query.alteration.toUpperCase();
	                oncogenic[gene][alteration] = response[i].oncogenic;
	            }
	            def.resolve(oncogenic);
	        }).fail(function () {
	            def.reject();
	        });
	        return def.promise();
	    };
	    var annotateCBioPortalMutationCount = function annotateCBioPortalMutationCount(webservice_data) {
	        /* in-place, idempotent
	         * In: - webservice_data, a list of data obtained from the webservice API
	         * Out: promise, which resolves with the data which has been in-place modified,
	         *	    the mutation data given the integer attribute 'cbioportal_position_recurrence'
	         */
	        var def = new $.Deferred();
	        var attribute_name = 'cbioportal_mutation_count';
	        getCBioPortalMutationCounts(webservice_data).then(function (counts_map) {
	            for (var i = 0; i < webservice_data.length; i++) {
	                var datum = webservice_data[i];
	                if (datum.genetic_alteration_type !== "MUTATION_EXTENDED") {
	                    continue;
	                }
	                var gene = datum.hugo_gene_symbol;
	                gene && (gene = gene.toUpperCase());
	                var start_pos = datum.protein_start_position;
	                var end_pos = datum.protein_end_position;
	                if (gene && start_pos && end_pos && !isNaN(start_pos) && !isNaN(end_pos)) {
	                    datum[attribute_name] = counts_map[gene + ',' + parseInt(start_pos, 10) + ',' + parseInt(end_pos, 10)];
	                }
	            }
	            def.resolve(webservice_data);
	        });
	        return def.promise();
	    };
	    var annotateOncoKBMutationOncogenic = function annotateOncoKBMutationOncogenic(webservice_data) {
	        /* in-place, idempotent
	         * In: - webservice_data, a list of data obtained from the webservice API
	         * Out: promise, which resolves with the data which has been in-place modified,
	         *	    the mutation data given the string attribute 'oncokb_oncogenic', one of ['Unknown', 'Likely Neutral', 'Likely Oncogenic', 'Oncogenic']
	         */
	        var def = new $.Deferred();
	        var attribute_name = 'oncokb_oncogenic';
	        getOncoKBAnnotations(webservice_data).then(function (oncogenic) {
	            for (var i = 0; i < webservice_data.length; i++) {
	                var datum = webservice_data[i];
	                if (datum.genetic_alteration_type !== "MUTATION_EXTENDED") {
	                    continue;
	                }
	                var gene = datum.hugo_gene_symbol;
	                gene && (gene = gene.toUpperCase());
	                var alteration = datum.amino_acid_change;
	                alteration && (alteration = alteration.toUpperCase());
	                if (gene && alteration && oncogenic[gene] && oncogenic[gene][alteration]) {
	                    datum[attribute_name] = oncogenic[gene][alteration];
	                }
	            }
	            def.resolve(webservice_data);
	        });
	        return def.promise();
	    };
	    var annotateCOSMICCount = function annotateCOSMICCount(webservice_data) {
	        /* in-place, idempotent
	         * In: - webservice_data, a list of data obtained from the webservice API
	         * Out: promise, which resolves with the data which has been in-place modified,
	         *	    the mutation data given the string attribute 'cosmic_count'
	         */
	        var def = new $.Deferred();
	        var attribute_name = 'cosmic_count';
	
	        getCOSMICCounts(webservice_data).then(function (cosmic_counts) {
	            for (var i = 0; i < webservice_data.length; i++) {
	                var datum = webservice_data[i];
	                if (datum.genetic_alteration_type === "MUTATION_EXTENDED" && typeof cosmic_counts[datum.keyword] !== "undefined") {
	                    var count_records = cosmic_counts[datum.keyword];
	                    // Filter by position if 'truncating'
	                    if (datum.keyword.indexOf("truncating") > -1) {
	                        var protein_start_position = parseInt(datum.protein_start_position, 10);
	                        count_records = count_records.filter(function (count_record) {
	                            return count_record.protein_change && parseInt(count_record.protein_change, 10) === protein_start_position;
	                        });
	                    }
	                    datum[attribute_name] = count_records.map(function (count_record) {
	                        return parseInt(count_record.count, 10);
	                    }).reduce(function (x, y) {
	                        return x + y;
	                    }, 0);
	                }
	            }
	            def.resolve(webservice_data);
	        });
	        return def.promise();
	    };
	
	    var annotateHotSpots = function annotateHotSpots(webservice_data) {
	        /* in-place, idempotent
	         * In: - webservice_data, a list of data obtained from the webservice API
	         * Out: promise, which resolves with the data which has been in-place modified,
	         *	    the mutation data given the boolean attribute 'cancer_hotspots_hotspot'
	         */
	        var sortedNumListHasElementInRange = function sortedNumListHasElementInRange(sorted_list, lower_inc, upper_exc) {
	            /* In: list, list of numbers
	             *	    lower_inc, inclusive lower bound of range
	             *	    upper_exc, exclusive upper bound of range
	             * Out; boolean, whether there is an element in list within the given range
	             */
	            // Locate smallest element >= the lower inc
	            var smallest_element_in_range_index = insertionIndex(sorted_list, lower_inc);
	            return smallest_element_in_range_index < sorted_list.length && sorted_list[smallest_element_in_range_index] < upper_exc;
	        };
	        var def = new $.Deferred();
	        var attribute_name = 'cancer_hotspots_hotspot';
	        $.ajax({
	            type: 'GET',
	            url: '//' + host + '/proxy/cancerHotSpots'
	        }).then(function (response) {
	            response = JSON.parse(response);
	            // Gather hotspot codons into sorted order for querying
	            var gene_to_hotspot_codons = {};
	            for (var i = 0; i < response.length; i++) {
	                var gene = response[i].hugoSymbol.toUpperCase();
	                var codon = parseInt(response[i].residue.substring(1), 10);
	                gene_to_hotspot_codons[gene] = gene_to_hotspot_codons[gene] || {};
	                gene_to_hotspot_codons[gene][codon] = true;
	            }
	            var genes = Object.keys(gene_to_hotspot_codons);
	            for (var i = 0; i < genes.length; i++) {
	                gene_to_hotspot_codons[genes[i]] = Object.keys(gene_to_hotspot_codons[genes[i]]).map(function (x) {
	                    return parseInt(x, 10);
	                }).sort();
	            }
	            for (var i = 0; i < webservice_data.length; i++) {
	                var datum = webservice_data[i];
	                if (datum.genetic_alteration_type !== "MUTATION_EXTENDED") {
	                    continue;
	                }
	                var gene = datum.hugo_gene_symbol;
	                gene && (gene = gene.toUpperCase());
	                var start_pos = datum.protein_start_position;
	                var end_pos = datum.protein_end_position;
	                if (gene && !isNaN(start_pos) && !isNaN(end_pos) && typeof gene_to_hotspot_codons[gene] !== "undefined") {
	                    if (sortedNumListHasElementInRange(gene_to_hotspot_codons[gene], parseInt(start_pos, 10), parseInt(end_pos, 10) + 1)) {
	                        datum[attribute_name] = true;
	                    }
	                }
	                datum[attribute_name] = !!datum[attribute_name]; // ensure all are labeled true or false
	            }
	            def.resolve(webservice_data);
	        }).fail(function () {
	            def.reject();
	        });
	
	        return def.promise();
	    };
	    var makeOncoprintClinicalData = function makeOncoprintClinicalData(webservice_clinical_data, attr_id, study_id, source_sample_or_patient, target_sample_or_patient, target_ids, sample_to_patient_map, case_uid_map, datatype, na_or_zero) {
	        na_or_zero = na_or_zero || "na";
	
	        // First collect all the data by id
	        var id_to_data = {};
	        var id_attribute = source_sample_or_patient + '_id'; // sample_id or patient_id
	        for (var i = 0, _len = webservice_clinical_data.length; i < _len; i++) {
	            var d = webservice_clinical_data[i];
	            var id = d[id_attribute];
	            if (source_sample_or_patient === "sample" && target_sample_or_patient === "patient") {
	                id = sample_to_patient_map[id];
	            }
	            if (!id_to_data[id]) {
	                id_to_data[id] = [];
	            }
	            id_to_data[id].push(d);
	        }
	        // Then combine it
	        var data = [];
	        for (var i = 0; i < target_ids.length; i++) {
	            var datum_to_add = { 'attr_id': attr_id, 'study_id': study_id, 'uid': case_uid_map[study_id][target_ids[i]], 'attr_val_counts': {} };
	            datum_to_add[target_sample_or_patient] = target_ids[i];
	            var data_to_combine;
	            if (source_sample_or_patient === "patient" && target_sample_or_patient === "sample") {
	                data_to_combine = id_to_data[sample_to_patient_map[target_ids[i]]];
	            } else {
	                data_to_combine = id_to_data[target_ids[i]];
	            }
	            data_to_combine = data_to_combine || [];
	            if (data_to_combine.length === 0) {
	                if (na_or_zero === "na") {
	                    datum_to_add.na = true;
	                } else if (na_or_zero === "zero") {
	                    datum_to_add.attr_val_counts[0] = 1;
	                    datum_to_add.attr_val = 0;
	                }
	            } else if (data_to_combine.length === 1) {
	                if (datatype.toLowerCase() === "number") {
	                    var attr_val = parseFloat(data_to_combine[0].attr_val);
	                    if (!isNaN(attr_val)) {
	                        datum_to_add.attr_val = attr_val;
	                        datum_to_add.attr_val_counts[attr_val] = 1;
	                    } else {
	                        datum_to_add.na = true;
	                    }
	                } else if (datatype.toLowerCase() === "string") {
	                    datum_to_add.attr_val = data_to_combine[0].attr_val;
	                    datum_to_add.attr_val_counts[datum_to_add.attr_val] = 1;
	                } else if (datatype.toLowerCase() === "counts_map") {
	                    datum_to_add.attr_val_counts = data_to_combine[0].attr_val;
	                    for (var k in datum_to_add.attr_val_counts) {
	                        if (typeof datum_to_add.attr_val_counts[k] !== "undefined") {
	                            var count = parseFloat(datum_to_add.attr_val_counts[k]);
	                            if (!isNaN(count)) {
	                                datum_to_add.attr_val_counts[k] = count;
	                            }
	                        }
	                    }
	                }
	            } else {
	                if (datatype.toLowerCase() === "number") {
	                    var avg = 0;
	                    var total = 0;
	                    for (var j = 0; j < data_to_combine.length; j++) {
	                        if (typeof data_to_combine[j].attr_val !== "undefined") {
	                            var attr_val = parseFloat(data_to_combine[j].attr_val);
	                            if (!isNaN(attr_val)) {
	                                avg += attr_val;
	                                total += 1;
	                            }
	                        }
	                    }
	                    datum_to_add.attr_val = total > 0 ? avg / total : 0;
	                } else if (datatype.toLowerCase() === "string") {
	                    for (var j = 0; j < data_to_combine.length; j++) {
	                        if (typeof data_to_combine[j].attr_val !== "undefined") {
	                            datum_to_add.attr_val_counts[data_to_combine[j].attr_val] = datum_to_add.attr_val_counts[data_to_combine[j].attr_val] || 0;
	                            datum_to_add.attr_val_counts[data_to_combine[j].attr_val] += 1;
	                        }
	                    }
	                    datum_to_add.attr_val = "Mixed";
	                } else if (datatype.toLowerCase() === "counts_map") {
	                    for (var j = 0; j < data_to_combine.length; j++) {
	                        for (var k in data_to_combine[j].attr_val) {
	                            if (typeof data_to_combine[j].attr_val[k] !== "undefined") {
	                                var count = parseFloat(data_to_combine[j].attr_val[k]);
	                                if (!isNaN(count)) {
	                                    datum_to_add.attr_val_counts[k] = datum_to_add.attr_val_counts[k] || 0;
	                                    datum_to_add.attr_val_counts[k] += count;
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	            if (datatype.toLowerCase() === "counts_map") {
	                // if all 0, then change to 'na'
	                var all_0 = true;
	                for (var k in datum_to_add.attr_val_counts) {
	                    if (typeof datum_to_add.attr_val_counts[k] !== "undefined" && !isNaN(datum_to_add.attr_val_counts[k])) {
	                        if (datum_to_add.attr_val_counts[k] !== 0) {
	                            all_0 = false;
	                            break;
	                        }
	                    }
	                }
	                if (all_0) {
	                    datum_to_add.na = true;
	                }
	                datum_to_add.attr_val = datum_to_add.attr_val_counts;
	            }
	            data.push(datum_to_add);
	        }
	        return data;
	    };
	    var makeOncoprintData = function makeOncoprintData(webservice_data, genes, study_to_id_map, sample_or_patient, sample_to_patient_map, case_uid_map) {
	        // To fill in for non-existent data, need genes and samples to do so for
	        genes = genes || [];
	        study_to_id_map = study_to_id_map || {}; // to make blank data
	        // Gather data by id and gene
	        var gene_id_study_to_datum = {};
	        var studies = Object.keys(study_to_id_map);
	        for (var i = 0; i < genes.length; i++) {
	            var gene = genes[i].toUpperCase();
	            for (var j = 0; j < studies.length; j++) {
	                var study = studies[j];
	                var ids = study_to_id_map[study];
	                for (var h = 0; h < ids.length; h++) {
	                    var id = ids[h];
	                    var new_datum = {};
	                    new_datum['gene'] = gene;
	                    new_datum[sample_or_patient] = id;
	                    new_datum['data'] = [];
	                    new_datum['study_id'] = study;
	                    new_datum['uid'] = case_uid_map[study][id];
	                    gene_id_study_to_datum[gene + ',' + id + ',' + study] = new_datum;
	                }
	            }
	        }
	        for (var i = 0; i < webservice_data.length; i++) {
	            var datum = webservice_data[i];
	            var gene = datum.hugo_gene_symbol.toUpperCase();
	            var id = sample_or_patient === "patient" ? sample_to_patient_map[datum.sample_id] : datum.sample_id;
	            var study = datum.study_id;
	            var gene_id_datum = gene_id_study_to_datum[gene + "," + id + "," + study];
	            if (gene_id_datum) {
	                gene_id_datum.data.push(datum);
	            }
	        }
	
	        // Compute display parameters
	        var data = objectValues(gene_id_study_to_datum);
	        var cna_profile_data_to_string = {
	            "-2": "homdel",
	            "-1": "hetloss",
	            "0": undefined,
	            "1": "gain",
	            "2": "amp"
	        };
	        var mut_rendering_priority = { 'trunc': 1, 'inframe': 2, 'missense': 3 };
	        var cna_rendering_priority = { 'amp': 0, 'homdel': 0, 'gain': 1, 'hetloss': 1 };
	        var mrna_rendering_priority = { 'up': 0, 'down': 0 };
	        var prot_rendering_priority = { 'up': 0, 'down': 0 };
	
	        var selectDisplayValue = function selectDisplayValue(counts_obj, rendering_priority_obj) {
	            var options = objectKeyValuePairs(counts_obj);
	            if (options.length > 0) {
	                options.sort(function (kv1, kv2) {
	                    var rendering_priority_diff = rendering_priority_obj[kv1[0]] - rendering_priority_obj[kv2[0]];
	                    if (rendering_priority_diff < 0) {
	                        return -1;
	                    } else if (rendering_priority_diff > 0) {
	                        return 1;
	                    } else {
	                        if (kv1[1] < kv2[1]) {
	                            return 1;
	                        } else if (kv1[1] > kv2[1]) {
	                            return -1;
	                        } else {
	                            return 0;
	                        }
	                    }
	                });
	                return options[0][0];
	            } else {
	                return undefined;
	            }
	        };
	        for (var i = 0; i < data.length; i++) {
	            var datum = data[i];
	            var datum_events = datum.data;
	
	            var disp_fusion = false;
	            var disp_cna_counts = {};
	            var disp_mrna_counts = {};
	            var disp_prot_counts = {};
	            var disp_mut_counts = {};
	            var disp_mut_has_rec = {};
	
	            for (var j = 0; j < datum_events.length; j++) {
	                var event = datum_events[j];
	                if (event.genetic_alteration_type === "COPY_NUMBER_ALTERATION") {
	                    var cna_event = cna_profile_data_to_string[event.profile_data];
	                    disp_cna_counts[cna_event] = disp_cna_counts[cna_event] || 0;
	                    disp_cna_counts[cna_event] += 1;
	                } else if (event.genetic_alteration_type === "MRNA_EXPRESSION") {
	                    if (event.oql_regulation_direction) {
	                        var mrna_event = event.oql_regulation_direction === 1 ? "up" : "down";
	                        disp_mrna_counts[mrna_event] = disp_mrna_counts[mrna_event] || 0;
	                        disp_mrna_counts[mrna_event] += 1;
	                    }
	                } else if (event.genetic_alteration_type === "PROTEIN_LEVEL") {
	                    if (event.oql_regulation_direction) {
	                        var prot_event = event.oql_regulation_direction === 1 ? "up" : "down";
	                        disp_prot_counts[prot_event] = disp_prot_counts[prot_event] || 0;
	                        disp_prot_counts[prot_event] += 1;
	                    }
	                } else if (event.genetic_alteration_type === "MUTATION_EXTENDED") {
	                    var oncoprint_mutation_type = event.oncoprint_mutation_type;
	                    if (oncoprint_mutation_type === "fusion") {
	                        disp_fusion = true;
	                    } else {
	                        disp_mut_counts[oncoprint_mutation_type] = disp_mut_counts[oncoprint_mutation_type] || 0;
	                        disp_mut_counts[oncoprint_mutation_type] += 1;
	                    }
	                }
	            }
	            if (disp_fusion) {
	                datum.disp_fusion = true;
	            }
	            datum.disp_cna = selectDisplayValue(disp_cna_counts, cna_rendering_priority);
	            datum.disp_mrna = selectDisplayValue(disp_mrna_counts, mrna_rendering_priority);
	            datum.disp_prot = selectDisplayValue(disp_prot_counts, prot_rendering_priority);
	            datum.disp_mut = selectDisplayValue(disp_mut_counts, mut_rendering_priority);
	        }
	        return data;
	    };
	    var makeOncoprintSampleData = function makeOncoprintSampleData(webservice_data, genes, study_sample_map, case_uid_map) {
	        return makeOncoprintData(webservice_data, genes, study_sample_map, "sample", null, case_uid_map);
	    };
	    var makeOncoprintPatientData = function makeOncoprintPatientData(webservice_data, genes, study_patient_map, sample_to_patient_map, case_uid_map) {
	        return makeOncoprintData(webservice_data, genes, study_patient_map, "patient", sample_to_patient_map, case_uid_map);
	    };
	
	    var default_oql = '';
	    var getClinicalData = function getClinicalData(self, attr_ids, target_sample_or_patient) {
	        // Helper function for getSampleClinicalData and getPatientClinicalData
	        var def = new $.Deferred();
	        // special cases: '# mutations' and 'FRACTION_GENOME_ALTERED', both are sample attributes
	        var fetch_promises = [];
	        var clinical_data = [];
	        attr_ids = attr_ids.slice();
	        $.when(self.sortClinicalAttributesByDataType(attr_ids), self.getGeneticProfiles(), self.getStudySampleMap(), self.getStudyPatientMap(), self.getPatientSampleIdMap(), self.getCaseUIDMap()).then(function (sorted_attrs, genetic_profiles, study_sample_map, study_patient_map, sample_to_patient_map, case_uid_map) {
	            var study_target_ids_map = target_sample_or_patient === "sample" ? study_sample_map : study_patient_map;
	            if (attr_ids.indexOf('# mutations') > -1) {
	                var clinicalMutationColl = new ClinicalMutationColl();
	                fetch_promises = fetch_promises.concat(genetic_profiles.filter(function (gp) {
	                    return gp.genetic_alteration_type === "MUTATION_EXTENDED";
	                }).map(function (mutation_gp) {
	                    var _def = new $.Deferred();
	                    clinicalMutationColl.fetch({
	                        type: "POST",
	                        data: {
	                            mutation_profile: mutation_gp.id,
	                            cmd: "count_mutations",
	                            case_ids: study_sample_map[mutation_gp.study_id].join(" ")
	                        },
	                        success: function success(response) {
	                            response = response.toJSON();
	                            for (var i = 0; i < response.length; i++) {
	                                response[i].sample_id = response[i].sample; // standardize
	                                response[i].study_id = mutation_gp.study_id;
	                            }
	                            clinical_data = clinical_data.concat(makeOncoprintClinicalData(response, "# mutations", mutation_gp.study_id, "sample", target_sample_or_patient, study_target_ids_map[mutation_gp.study_id], sample_to_patient_map, case_uid_map, "number", "zero"));
	                            _def.resolve();
	                        },
	                        error: function error() {
	                            def.reject();
	                        }
	                    });
	                    return _def.promise();
	                }));
	                attr_ids.splice(attr_ids.indexOf('# mutations'), 1);
	            }
	            if (attr_ids.indexOf('FRACTION_GENOME_ALTERED') > -1) {
	                var clinicalCNAColl = new ClinicalCNAColl();
	                fetch_promises = fetch_promises.concat(self.getCancerStudyIds().map(function (cancer_study_id) {
	                    var _def = new $.Deferred();
	                    clinicalCNAColl.fetch({
	                        type: "POST",
	                        data: {
	                            cancer_study_id: cancer_study_id,
	                            cmd: "get_cna_fraction",
	                            case_ids: study_sample_map[cancer_study_id].join(" ")
	                        },
	                        success: function success(response) {
	                            response = response.toJSON();
	                            for (var i = 0; i < response.length; i++) {
	                                response[i].sample_id = response[i].sample; // standardize
	                                response[i].study_id = cancer_study_id;
	                            }
	                            clinical_data = clinical_data.concat(makeOncoprintClinicalData(response, "FRACTION_GENOME_ALTERED", cancer_study_id, "sample", target_sample_or_patient, study_target_ids_map[cancer_study_id], sample_to_patient_map, case_uid_map, "number", "na"));
	                            _def.resolve();
	                        },
	                        error: function error() {
	                            def.reject();
	                        }
	                    });
	                    return _def.promise();
	                }));
	                attr_ids.splice(attr_ids.indexOf('FRACTION_GENOME_ALTERED'), 1);
	            }
	            if (attr_ids.indexOf('NO_CONTEXT_MUTATION_SIGNATURE') > -1) {
	                var mutation_signatures_promise = new $.Deferred();
	                fetch_promises.push(mutation_signatures_promise.promise());
	                self.getGeneticProfiles().then(function (genetic_profiles) {
	                    var mutation_profiles = genetic_profiles.filter(function (x) {
	                        return x.genetic_alteration_type === "MUTATION_EXTENDED";
	                    });
	                    $.when.apply($, mutation_profiles.map(function (mutation_profile) {
	                        var _def = new $.Deferred();
	                        $.ajax({
	                            type: 'POST',
	                            url: '//' + host + '/mutationsignatures',
	                            data: ['genetic_profile_id=', mutation_profile.id, '&', 'context_size=0', '&', 'sample_ids=', self.getSampleIds().join(",")].join(""),
	                            dataType: 'json'
	                        }).then(function (response) {
	                            for (var i = 0; i < response.length; i++) {
	                                // standardize
	                                response[i].sample_id = response[i].id;
	                                response[i].study_id = mutation_profile.study_id;
	                                response[i].attr_val = response[i].counts;
	                            }
	                            clinical_data = clinical_data.concat(makeOncoprintClinicalData(response, "NO_CONTEXT_MUTATION_SIGNATURE", mutation_profile.study_id, "sample", target_sample_or_patient, study_target_ids_map[mutation_profile.study_id], sample_to_patient_map, case_uid_map, "counts_map", "na"));
	                            _def.resolve();
	                        }).fail(function () {
	                            _def.reject();
	                        });
	                        return _def.promise();
	                    })).then(function () {
	                        mutation_signatures_promise.resolve();
	                    });
	                });
	                attr_ids.splice(attr_ids.indexOf('NO_CONTEXT_MUTATION_SIGNATURE'), 1);
	            }
	
	            fetch_promises = fetch_promises.concat(self.getCancerStudyIds().map(function (cancer_study_id) {
	                var _def = new $.Deferred();
	                window.cbioportal_client.getSampleClinicalData({ study_id: [cancer_study_id], attribute_ids: Object.keys(sorted_attrs.sample), sample_ids: study_sample_map[cancer_study_id] }).then(function (data) {
	                    var sample_data_by_attr_id = {};
	                    for (var i = 0; i < data.length; i++) {
	                        var attr_id = data[i].attr_id;
	                        sample_data_by_attr_id[attr_id] = sample_data_by_attr_id[attr_id] || [];
	                        sample_data_by_attr_id[attr_id].push(data[i]);
	                    }
	                    var sample_attr_ids = Object.keys(sample_data_by_attr_id);
	                    for (var i = 0; i < sample_attr_ids.length; i++) {
	                        var attr_id = sample_attr_ids[i];
	                        clinical_data = clinical_data.concat(makeOncoprintClinicalData(sample_data_by_attr_id[attr_id], attr_id, cancer_study_id, "sample", target_sample_or_patient, study_target_ids_map[cancer_study_id], sample_to_patient_map, case_uid_map, sorted_attrs.sample[attr_id].datatype.toLowerCase(), "na"));
	                    }
	                    _def.resolve();
	                }).fail(function () {
	                    def.reject();
	                });
	                return _def.promise();
	            })).concat(self.getCancerStudyIds().map(function (cancer_study_id) {
	                var _def = new $.Deferred();
	                window.cbioportal_client.getPatientClinicalData({ study_id: [cancer_study_id], attribute_ids: Object.keys(sorted_attrs.patient), patient_ids: study_patient_map[cancer_study_id] }).then(function (data) {
	                    var patient_data_by_attr_id = {};
	                    for (var i = 0; i < data.length; i++) {
	                        var attr_id = data[i].attr_id;
	                        patient_data_by_attr_id[attr_id] = patient_data_by_attr_id[attr_id] || [];
	                        patient_data_by_attr_id[attr_id].push(data[i]);
	                    }
	                    var patient_attr_ids = Object.keys(patient_data_by_attr_id);
	                    for (var i = 0; i < patient_attr_ids.length; i++) {
	                        var attr_id = patient_attr_ids[i];
	                        clinical_data = clinical_data.concat(makeOncoprintClinicalData(patient_data_by_attr_id[attr_id], attr_id, cancer_study_id, "patient", target_sample_or_patient, study_target_ids_map[cancer_study_id], sample_to_patient_map, case_uid_map, sorted_attrs.patient[attr_id].datatype.toLowerCase(), "na"));
	                    }
	                    _def.resolve();
	                }).fail(function () {
	                    def.reject();
	                });
	                return _def.promise();
	            }));
	
	            $.when.apply($, fetch_promises).then(function () {
	                def.resolve(clinical_data);
	            });
	        });
	        return def.promise();
	    };
	
	    var makeCachedPromiseFunction = function makeCachedPromiseFunction(fetcher) {
	        // In: fetcher, a function that takes a promise as an argument, and resolves it with the desired data
	        // Out: a function which returns a promise that resolves with the desired data, deep copied
	        //	The idea is that the fetcher is only ever called once, even if the output function
	        //	of this method is called again while it's still waiting.
	        var fetch_promise = new $.Deferred();
	        var fetch_initiated = false;
	        return function () {
	            var def = new $.Deferred();
	            if (!fetch_initiated) {
	                fetch_initiated = true;
	                fetcher(this, fetch_promise);
	            }
	            fetch_promise.then(function (data) {
	                def.resolve(deepCopyObject(data));
	            });
	            return def.promise();
	        };
	    };
	
	    var ignoreMutations = function ignoreMutations(ws_data, known_mutation_settings) {
	        return ws_data.filter(function (d) {
	            if (d.genetic_alteration_type !== "MUTATION_EXTENDED" || d.simplified_mutation_type !== "missense" || known_mutation_settings.ignore_unknown === false) {
	                return true;
	            } else {
	                return known_mutation_settings.recognize_hotspot && d.cancer_hotspots_hotspot || known_mutation_settings.recognize_oncokb_oncogenic && typeof d.oncokb_oncogenic !== "undefined" && ["likely oncogenic", "oncogenic"].indexOf(d.oncokb_oncogenic.toLowerCase()) > -1 || known_mutation_settings.recognize_cbioportal_count && typeof d.cbioportal_mutation_count !== "undefined" && d.cbioportal_mutation_count >= known_mutation_settings.cbioportal_count_thresh || known_mutation_settings.recognize_cosmic_count && typeof d.cosmic_count !== "undefined" && d.cosmic_count >= known_mutation_settings.cosmic_count_thresh;
	            }
	        });
	    };
	
	    var session_filter_change_callbacks = [];
	    var triggerSessionFilterChangeCallbacks = function triggerSessionFilterChangeCallbacks() {
	        for (var i = 0; i < session_filter_change_callbacks.length; i++) {
	            session_filter_change_callbacks[i]();
	        }
	    };
	
	    return {
	        'known_mutation_settings': {
	            'ignore_unknown': false,
	            'recognize_cbioportal_count': true,
	            'cbioportal_count_thresh': 10,
	            'recognize_cosmic_count': true,
	            'cosmic_count_thresh': 10,
	            'recognize_hotspot': true,
	            'recognize_oncokb_oncogenic': true
	        },
	        'oql_query': oql_query,
	        'cancer_study_ids': cancer_study_ids,
	        'study_sample_map': study_sample_map,
	        'genetic_profile_ids': genetic_profile_ids,
	        'mutation_counts': {},
	        'getKnownMutationSettings': function getKnownMutationSettings() {
	            return deepCopyObject(this.known_mutation_settings);
	        },
	        'setKnownMutationSettings': function setKnownMutationSettings(new_settings_obj) {
	            var new_settings = Object.keys(new_settings_obj);
	            for (var i = 0; i < new_settings.length; i++) {
	                this.known_mutation_settings[new_settings[i]] = new_settings_obj[new_settings[i]];
	            }
	            triggerSessionFilterChangeCallbacks();
	        },
	        'onSessionFilterChange': function onSessionFilterChange(callback) {
	            session_filter_change_callbacks.push(callback);
	        },
	        'getOQLQuery': function getOQLQuery() {
	            return this.oql_query;
	        },
	        'getQueryGenes': function getQueryGenes() {
	            return _oql2.default.genes(this.oql_query);
	        },
	        'getGeneticProfileIds': function getGeneticProfileIds() {
	            return this.genetic_profile_ids;
	        },
	        'getSampleIds': function getSampleIds(opt_study_id) {
	            if (typeof opt_study_id !== "undefined") {
	                return this.study_sample_map[opt_study_id].slice() || [];
	            } else {
	                return stringListUnique(flatten(objectValues(this.study_sample_map)));
	            }
	        },
	        'getCaseUIDMap': function getCaseUIDMap() {
	            var def = new $.Deferred();
	            var self = this;
	            this.getStudyPatientMap().then(function (study_patient_map) {
	                var study_sample_map = self.getStudySampleMap();
	                var counter = 0;
	                var ret = {};
	                for (var study in study_sample_map) {
	                    if (typeof study_sample_map[study] !== "undefined") {
	                        ret[study] = ret[study] || {};
	                        var study_ids = ret[study];
	                        var samples = study_sample_map[study];
	                        for (var i = 0; i < samples.length; i++) {
	                            study_ids[samples[i]] = counter + "";
	                            counter += 1;
	                        }
	                    }
	                }
	                for (var study in study_patient_map) {
	                    if (typeof study_patient_map[study] !== "undefined") {
	                        ret[study] = ret[study] || {};
	                        var study_ids = ret[study];
	                        var patients = study_patient_map[study];
	                        for (var i = 0; i < patients.length; i++) {
	                            study_ids[patients[i]] = counter + "";
	                            counter += 1;
	                        }
	                    }
	                }
	                def.resolve(ret);
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getStudySampleMap': function getStudySampleMap() {
	            return deepCopyObject(this.study_sample_map);
	        },
	        'getStudyPatientMap': makeCachedPromiseFunction(function (self, fetch_promise) {
	            var study_patient_map = {};
	            var cancer_study_ids = self.getCancerStudyIds();
	            var study_done_promises = cancer_study_ids.map(function () {
	                return new $.Deferred();
	            });
	            for (var i = 0; i < cancer_study_ids.length; i++) {
	                (function (I) {
	                    var cancer_study_id = cancer_study_ids[I];
	                    window.cbioportal_client.getSamples({ study_id: [cancer_study_id], sample_ids: self.study_sample_map[cancer_study_id] }).then(function (samples) {
	                        study_patient_map[cancer_study_id] = [];
	                        for (var j = 0; j < samples.length; j++) {
	                            study_patient_map[cancer_study_id].push(samples[j].patient_id);
	                        }
	                        study_patient_map[cancer_study_id] = stringListUnique(study_patient_map[cancer_study_id]);
	                        study_done_promises[I].resolve();
	                    }).fail(function () {
	                        fetch_promise.reject();
	                    });
	                })(i);
	            }
	            $.when.apply($, study_done_promises).then(function () {
	                fetch_promise.resolve(study_patient_map);
	            });
	        }),
	        'getPatientIds': function getPatientIds(opt_study_id) {
	            var def = new $.Deferred();
	            this.getStudyPatientMap().then(function (study_patient_map) {
	                if (typeof opt_study_id !== "undefined") {
	                    def.resolve(study_patient_map[opt_study_id] || []);
	                } else {
	                    def.resolve(stringListUnique(flatten(objectValues(study_patient_map))));
	                }
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getCancerStudyIds': function getCancerStudyIds() {
	            return this.cancer_study_ids;
	        },
	        'getSampleSelect': function getSampleSelect() {
	            return this.sample_select;
	        },
	        'getAlteredGenes': function getAlteredGenes(use_session_filters) {
	            // A gene is "altered" if, after OQL filtering, there is a datum for it
	            var def = new $.Deferred();
	            var self = this;
	            (use_session_filters ? self.getSessionFilteredWebServiceGenomicEventData() : self.getWebServiceGenomicEventData()).then(function (data) {
	                var altered_genes = {};
	                for (var i = 0; i < data.length; i++) {
	                    altered_genes[data[i].hugo_gene_symbol] = true;
	                }
	                def.resolve(Object.keys(altered_genes));
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getAlteredGenesSetBySample': function getAlteredGenesSetBySample(use_session_filters) {
	            var def = new $.Deferred();
	            var self = this;
	            (use_session_filters ? self.getSessionFilteredWebServiceGenomicEventData() : self.getWebServiceGenomicEventData()).then(function (data) {
	                var ret = {};
	                for (var i = 0; i < data.length; i++) {
	                    var sample = data[i].sample_id;
	                    var gene = data[i].hugo_gene_symbol;
	                    ret[sample] = ret[sample] || {};
	                    ret[sample][gene] = true;
	                }
	                def.resolve(ret);
	            });
	            return def.promise();
	        },
	        'getWebServiceGenomicEventData': makeCachedPromiseFunction(function (self, fetch_promise) {
	            var profile_types = {};
	            window.cbioportal_client.getGeneticProfiles({ genetic_profile_ids: self.getGeneticProfileIds() }).fail(function () {
	                fetch_promise.reject();
	            }).then(function (gp_response) {
	                for (var i = 0; i < gp_response.length; i++) {
	                    profile_types[gp_response[i].id] = gp_response[i].genetic_alteration_type;
	                }
	                (function setDefaultOQL() {
	                    var all_profile_types = objectValues(profile_types);
	                    var default_oql_uniq = {};
	                    for (var i = 0; i < all_profile_types.length; i++) {
	                        var type = all_profile_types[i];
	                        switch (type) {
	                            case "MUTATION_EXTENDED":
	                                default_oql_uniq["MUT"] = true;
	                                default_oql_uniq["FUSION"] = true;
	                                break;
	                            case "COPY_NUMBER_ALTERATION":
	                                default_oql_uniq["AMP"] = true;
	                                default_oql_uniq["HOMDEL"] = true;
	                                break;
	                            case "MRNA_EXPRESSION":
	                                default_oql_uniq["EXP>=" + z_score_threshold] = true;
	                                default_oql_uniq["EXP<=-" + z_score_threshold] = true;
	                                break;
	                            case "PROTEIN_LEVEL":
	                                default_oql_uniq["PROT>=" + rppa_score_threshold] = true;
	                                default_oql_uniq["PROT<=-" + rppa_score_threshold] = true;
	                                break;
	                        }
	                    }
	                    default_oql = Object.keys(default_oql_uniq).join(" ");
	                })();
	            }).fail(function () {
	                fetch_promise.reject();
	            }).then(function () {
	                var genetic_profile_ids = self.getGeneticProfileIds();
	                var num_calls = genetic_profile_ids.length;
	                var all_data = [];
	                for (var i = 0; i < self.getGeneticProfileIds().length; i++) {
	                    (function (I) {
	                        window.cbioportal_client.getGeneticProfileDataBySample({
	                            'genetic_profile_ids': [genetic_profile_ids[I]],
	                            'genes': self.getQueryGenes().map(function (x) {
	                                return x.toUpperCase();
	                            }),
	                            'sample_ids': self.getSampleIds()
	                        }).fail(function () {
	                            fetch_promise.reject();
	                        }).then(function (data) {
	                            var genetic_alteration_type = profile_types[genetic_profile_ids[I]];
	                            if (genetic_alteration_type === "MUTATION_EXTENDED") {
	                                for (var j = 0; j < data.length; j++) {
	                                    data[j].simplified_mutation_type = getSimplifiedMutationType(data[j].mutation_type);
	                                    if (data[j].amino_acid_change.toLowerCase() === "promoter") {
	                                        data[j].oncoprint_mutation_type = "promoter";
	                                    } else {
	                                        data[j].oncoprint_mutation_type = getOncoprintMutationType(data[j].simplified_mutation_type);
	                                    }
	                                    data[j].genetic_alteration_type = genetic_alteration_type;
	                                }
	                            } else {
	                                for (var j = 0; j < data.length; j++) {
	                                    data[j].genetic_alteration_type = genetic_alteration_type;
	                                }
	                            }
	                            all_data = all_data.concat(data);
	
	                            num_calls -= 1;
	                            if (num_calls === 0) {
	                                var webservice_genomic_event_data = _oql2.default.filterCBioPortalWebServiceData(self.getOQLQuery(), all_data, default_oql, false, false);
	                                $.when(annotateCBioPortalMutationCount(webservice_genomic_event_data), annotateOncoKBMutationOncogenic(webservice_genomic_event_data), annotateHotSpots(webservice_genomic_event_data), annotateCOSMICCount(webservice_genomic_event_data)).then(function () {
	                                    fetch_promise.resolve(webservice_genomic_event_data);
	                                });
	                            }
	                        });
	                    })(i);
	                }
	            }).fail(function () {
	                fetch_promise.reject();
	            });
	        }),
	        'getSessionFilteredWebServiceGenomicEventData': function getSessionFilteredWebServiceGenomicEventData() {
	            var def = new $.Deferred();
	            var self = this;
	            this.getWebServiceGenomicEventData().then(function (data) {
	                def.resolve(ignoreMutations(data, self.known_mutation_settings));
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getGeneAggregatedOncoprintSampleGenomicEventData': function getGeneAggregatedOncoprintSampleGenomicEventData(use_session_filters) {
	            var def = new $.Deferred();
	            var self = this;
	            $.when(use_session_filters ? self.getSessionFilteredWebServiceGenomicEventData() : self.getWebServiceGenomicEventData(), self.getStudySampleMap(), self.getCaseUIDMap()).then(function (ws_data, study_sample_map, case_uid_map) {
	                var filtered_ws_data = _oql2.default.filterCBioPortalWebServiceData(self.getOQLQuery(), ws_data, default_oql, false, false);
	                def.resolve(makeOncoprintSampleData(filtered_ws_data, self.getQueryGenes(), study_sample_map, case_uid_map));
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getOncoprintSampleGenomicEventData': function getOncoprintSampleGenomicEventData(use_session_filters) {
	            var def = new $.Deferred();
	            var self = this;
	            $.when(use_session_filters ? self.getSessionFilteredWebServiceGenomicEventData() : self.getWebServiceGenomicEventData(), self.getStudySampleMap(), self.getCaseUIDMap()).then(function (ws_data, study_sample_map, case_uid_map) {
	                var ws_data_by_oql_line = _oql2.default.filterCBioPortalWebServiceData(self.getOQLQuery(), ws_data, default_oql, true, true);
	                for (var i = 0; i < ws_data_by_oql_line.length; i++) {
	                    var line = ws_data_by_oql_line[i];
	                    line.oncoprint_data = makeOncoprintSampleData(line.data, [line.gene], study_sample_map, case_uid_map);
	                    line.altered_samples = line.oncoprint_data.filter(function (datum) {
	                        return datum.data.length > 0;
	                    }).map(function (datum) {
	                        return datum.sample;
	                    });
	                    line.unaltered_samples = stringListDifference(self.getSampleIds(), line.altered_samples);
	                }
	                var oncoprint_sample_genomic_event_data = ws_data_by_oql_line;
	                def.resolve(oncoprint_sample_genomic_event_data.map(deepCopyObject));
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getAlteredSamples': function getAlteredSamples(use_session_filters) {
	            var def = new $.Deferred();
	            var self = this;
	            self.getOncoprintSampleGenomicEventData(use_session_filters).then(function (data_by_line) {
	                var altered_samples = stringListUnion(data_by_line.map(function (line) {
	                    return line.altered_samples;
	                }));
	                def.resolve(altered_samples);
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getUnalteredSamples': function getUnalteredSamples(use_session_filters) {
	            var def = new $.Deferred();
	            var self = this;
	            this.getAlteredSamples(use_session_filters).then(function (altered_samples) {
	                def.resolve(stringListDifference(self.getSampleIds(), altered_samples));
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getMutualAlterationCounts': function getMutualAlterationCounts(use_session_filters) {
	            var def = new $.Deferred();
	            var self = this;
	            self.getAlteredSampleSetsByGene(use_session_filters).then(function (altered_samples_by_gene) {
	                var genes = Object.keys(altered_samples_by_gene);
	                var all_samples_set = stringListToObject(self.getSampleIds());
	                var ret = [];
	                for (var i = 0; i < genes.length; i++) {
	                    for (var j = i + 1; j < genes.length; j++) {
	                        var count_object = {};
	                        var geneA = genes[i];
	                        var geneB = genes[j];
	                        count_object.geneA = geneA;
	                        count_object.geneB = geneB;
	                        var alteredA = altered_samples_by_gene[geneA];
	                        var alteredB = altered_samples_by_gene[geneB];
	                        count_object.both = Object.keys(objectKeyIntersection([alteredA, alteredB])).length;
	                        count_object.A_not_B = Object.keys(objectKeyDifference(alteredA, alteredB)).length;
	                        count_object.B_not_A = Object.keys(objectKeyDifference(alteredB, alteredA)).length;
	                        count_object.neither = Object.keys(objectKeyDifference(all_samples_set, objectKeyUnion([alteredA, alteredB]))).length;
	                        ret.push(count_object);
	                    }
	                }
	                def.resolve(ret);
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getAlteredSampleSetsByGene': function getAlteredSampleSetsByGene(use_session_filters) {
	            var def = new $.Deferred();
	            var self = this;
	            (use_session_filters ? self.getSessionFilteredWebServiceGenomicEventData() : self.getWebServiceGenomicEventData()).then(function (ws_data) {
	                var altered_samples_by_gene = {};
	                var genes = self.getQueryGenes();
	                for (var i = 0; i < genes.length; i++) {
	                    altered_samples_by_gene[genes[i]] = {};
	                }
	                for (var i = 0; i < ws_data.length; i++) {
	                    var gene = ws_data[i].hugo_gene_symbol.toUpperCase();
	                    var sample = ws_data[i].sample_id;
	                    altered_samples_by_gene[gene] && (altered_samples_by_gene[gene][sample] = true);
	                }
	                def.resolve(altered_samples_by_gene);
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getOncoprintPatientGenomicEventData': function getOncoprintPatientGenomicEventData(use_session_filters) {
	            var def = new $.Deferred();
	            var self = this;
	            $.when(use_session_filters ? self.getSessionFilteredWebServiceGenomicEventData() : self.getWebServiceGenomicEventData(), self.getPatientIds(), self.getStudyPatientMap(), self.getPatientSampleIdMap(), self.getCaseUIDMap()).then(function (ws_data, patient_ids, study_patient_map, sample_to_patient_map, case_uid_map) {
	                var ws_data_by_oql_line = _oql2.default.filterCBioPortalWebServiceData(self.getOQLQuery(), ws_data, default_oql, true, true);
	                for (var i = 0; i < ws_data_by_oql_line.length; i++) {
	                    var line = ws_data_by_oql_line[i];
	                    line.oncoprint_data = makeOncoprintPatientData(ws_data_by_oql_line[i].data, [ws_data_by_oql_line[i].gene], study_patient_map, sample_to_patient_map, case_uid_map);
	                    line.altered_patients = line.oncoprint_data.filter(function (datum) {
	                        return datum.data.length > 0;
	                    }).map(function (datum) {
	                        return datum.patient;
	                    });
	                    line.unaltered_patients = stringListDifference(patient_ids, line.altered_patients);
	                }
	                var oncoprint_patient_genomic_event_data = ws_data_by_oql_line;
	                def.resolve(oncoprint_patient_genomic_event_data.map(deepCopyObject));
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getAlteredPatients': function getAlteredPatients(use_session_filters) {
	            var def = new $.Deferred();
	            $.when(this.getAlteredSamples(use_session_filters), this.getPatientSampleIdMap()).then(function (altered_samples, sample_to_patient_map) {
	                def.resolve(stringListUnique(altered_samples.map(function (s) {
	                    return sample_to_patient_map[s];
	                })));
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getUnalteredPatients': function getUnalteredPatients(use_session_filters) {
	            var def = new $.Deferred();
	            $.when(this.getAlteredPatients(use_session_filters), this.getPatientIds()).then(function (altered_patients, patient_ids) {
	                def.resolve(stringListDifference(patient_ids, altered_patients));
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getSampleClinicalAttributes': function getSampleClinicalAttributes() {
	            var def = new $.Deferred();
	            this.getSampleClinicalAttributesSet().then(function (set) {
	                def.resolve(objectValues(set));
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getSampleClinicalData': function getSampleClinicalData(attribute_ids) {
	            // TODO: handle more than one study
	            //
	            return getClinicalData(this, attribute_ids, "sample");
	        },
	        'getPatientClinicalAttributes': function getPatientClinicalAttributes() {
	            var def = new $.Deferred();
	            this.getPatientClinicalAttributesSet().then(function (set) {
	                def.resolve(objectValues(set));
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getSampleClinicalAttributesSet': makeCachedPromiseFunction(function (self, fetch_promise) {
	            // TODO: handle more than one study
	            var study_sample_map = self.getStudySampleMap();
	            var sample_clinical_attributes_set = {};
	            var requests = self.getCancerStudyIds().map(function (cancer_study_id) {
	                var def = new $.Deferred();
	                window.cbioportal_client.getSampleClinicalAttributes({ study_id: [cancer_study_id], sample_ids: study_sample_map[cancer_study_id] }).then(function (attrs) {
	                    for (var i = 0; i < attrs.length; i++) {
	                        sample_clinical_attributes_set[attrs[i].attr_id] = attrs[i];
	                    }
	                    def.resolve();
	                }).fail(function () {
	                    fetch_promise.reject();
	                });
	                return def.promise();
	            });
	            $.when.apply($, requests).then(function () {
	                self.getMutationProfileIds().then(function (mutation_profile_ids) {
	                    if (mutation_profile_ids.length > 0) {
	                        sample_clinical_attributes_set['# mutations'] = { attr_id: "# mutations",
	                            datatype: "NUMBER",
	                            description: "Number of mutations",
	                            display_name: "Total mutations",
	                            is_patient_attribute: "0"
	                        };
	                        /*sample_clinical_attributes_set['NO_CONTEXT_MUTATION_SIGNATURE'] = {
	                         attr_id: "NO_CONTEXT_MUTATION_SIGNATURE",
	                         datatype: "COUNTS_MAP",
	                         description: "Number of point mutations in the sample counted by different types of nucleotide changes.",
	                         display_name: "Nucleotide change of point mutations",
	                         is_patient_attribute: "0",
	                         categories: ["C>A", "C>G", "C>T", "T>A", "T>C", "T>G"],
	                         fills: ['#3D6EB1', '#8EBFDC', '#DFF1F8', '#FCE08E', '#F78F5E', '#D62B23']
	                         };*/
	                    }
	                    if (self.getCancerStudyIds().length > 0) {
	                        sample_clinical_attributes_set["FRACTION_GENOME_ALTERED"] = { attr_id: "FRACTION_GENOME_ALTERED",
	                            datatype: "NUMBER",
	                            description: "Fraction Genome Altered",
	                            display_name: "Fraction Genome Altered",
	                            is_patient_attribute: "0"
	                        };
	                    }
	                    fetch_promise.resolve(deepCopyObject(sample_clinical_attributes_set));
	                }).fail(function () {
	                    fetch_promise.reject();
	                });
	            });
	        }),
	        'getPatientClinicalAttributesSet': makeCachedPromiseFunction(function (self, fetch_promise) {
	            self.getStudyPatientMap().then(function (study_patient_map) {
	                var patient_clinical_attributes_set = {};
	                var requests = self.getCancerStudyIds().map(function (cancer_study_id) {
	                    var def = new $.Deferred();
	                    window.cbioportal_client.getPatientClinicalAttributes({ study_id: [cancer_study_id], patient_ids: study_patient_map[cancer_study_id] }).then(function (attrs) {
	                        for (var i = 0; i < attrs.length; i++) {
	                            patient_clinical_attributes_set[attrs[i].attr_id] = attrs[i];
	                        }
	                        def.resolve();
	                    }).fail(function () {
	                        fetch_promise.reject();
	                    });
	                    return def.promise();
	                });
	                $.when.apply($, requests).then(function () {
	                    fetch_promise.resolve(patient_clinical_attributes_set);
	                });
	            });
	        }),
	        'sortClinicalAttributesByDataType': function sortClinicalAttributesByDataType(attr_ids) {
	            var def = new $.Deferred();
	            $.when(this.getSampleClinicalAttributesSet(), this.getPatientClinicalAttributesSet()).then(function (sample_set, patient_set) {
	                var sorted = { 'sample': {}, 'patient': {} };
	                for (var i = 0; i < attr_ids.length; i++) {
	                    if (sample_set.hasOwnProperty(attr_ids[i])) {
	                        sorted.sample[attr_ids[i]] = sample_set[attr_ids[i]];
	                    } else if (patient_set.hasOwnProperty(attr_ids[i])) {
	                        sorted.patient[attr_ids[i]] = patient_set[attr_ids[i]];
	                    }
	                }
	                def.resolve(sorted);
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getClinicalAttributes': function getClinicalAttributes() {
	            var def = new $.Deferred();
	            $.when(this.getSampleClinicalAttributes(), this.getPatientClinicalAttributes()).then(function (sample_attrs, patient_attrs) {
	                def.resolve(sample_attrs.concat(patient_attrs));
	            }).fail(function () {
	                def.reject();
	            });
	            return def.promise();
	        },
	        'getPatientClinicalData': function getPatientClinicalData(attribute_ids) {
	            // TODO: handle more than one study
	            return getClinicalData(this, attribute_ids, "patient");
	        },
	        'getCaseSetId': function getCaseSetId() {
	            return case_set_properties.case_set_id;
	        },
	        'getCaseIdsKey': function getCaseIdsKey() {
	            return case_set_properties.case_ids_key;
	        },
	        'getSampleSetName': function getSampleSetName() {
	            return case_set_properties.case_set_name;
	        },
	        'getSampleSetDescription': function getSampleSetDescription() {
	            return case_set_properties.case_set_description;
	        },
	        'getPatientSampleIdMap': makeCachedPromiseFunction(function (self, fetch_promise) {
	            var sample_to_patient = {};
	            window.cbioportal_client.getSamples({ study_id: [self.getCancerStudyIds()[0]], sample_ids: self.getSampleIds() }).then(function (data) {
	                for (var i = 0; i < data.length; i++) {
	                    sample_to_patient[data[i].id] = data[i].patient_id;
	                }
	                fetch_promise.resolve(sample_to_patient);
	            }).fail(function () {
	                fetch_promise.reject();
	            });
	        }),
	        'getCancerStudyNames': makeCachedPromiseFunction(function (self, fetch_promise) {
	            window.cbioportal_client.getStudies({ study_ids: self.cancer_study_ids }).then(function (studies) {
	                fetch_promise.resolve(studies.map(function (s) {
	                    return s.name;
	                }));
	            }).fail(function () {
	                fetch_promise.reject();
	            });
	        }),
	        'getGeneticProfiles': function getGeneticProfiles() {
	            return window.cbioportal_client.getGeneticProfiles({ genetic_profile_ids: this.genetic_profile_ids });
	        },
	        'getMutationProfileIds': makeCachedPromiseFunction(function (self, fetch_promise) {
	            self.getGeneticProfiles().then(function (profiles) {
	                fetch_promise.resolve(profiles.filter(function (p) {
	                    return p.genetic_alteration_type === "MUTATION_EXTENDED";
	                }).map(function (p) {
	                    return p.id;
	                }));
	            }).fail(function () {
	                fetch_promise.reject();
	            });
	        }),
	        'getSampleNoContextMutationSignatures': makeCachedPromiseFunction(function (self, fetch_promise) {
	            var distribution_order = ["CA", "CG", "CT", "TA", "TC", "TG"];
	        }),
	        'getPatientNoContextMutationSignatures': makeCachedPromiseFunction(function (self, fetch_promise) {
	            $.when(self.getSampleSNPTypeDistributions(), self.getPatientSampleIdMap()).then(function (sample_snp_type_distributions, sample_to_patient_map) {
	                var ret = {};
	                var snp_types = ["CA", "CG", "CT", "TA", "TC", "TG"];
	                for (var i = 0; i < sample_snp_type_distributions; i++) {
	                    var sample_data = sample_snp_type_distributions[i];
	                    var patient = sample_to_patient_map[sample_data.sample];
	                    if (typeof patient !== "undefined") {
	                        ret[patient] = ret[patient] || { "patient": patient, "CA": 0, "CG": 0, "CT": 0, "TA": 0, "TC": 0, "TG": 0 };
	                        for (var j = 0; j < snp_types.length; j++) {
	                            ret[patient][snp_types[j]] += sample_data[snp_types[j]];
	                        }
	                    }
	                }
	                fetch_promise.resolve(objectValues(ret));
	            }).fail(function () {
	                fetch_promise.reject();
	            });
	        })
	    };
	};
	
	var instance = null;

/***/ },

/***/ 934:
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var geneticRules = {
	    "genetic_rule_set_same_color_for_all_no_recurrence": {
	        "type": "gene", "legend_label": "Genetic Alteration", "rule_params": {
	            "*": {
	                "shapes": [{
	                    "type": "rectangle",
	                    "fill": "rgba(211, 211, 211, 1)",
	                    "z": 1,
	                    "width": "100%",
	                    "height": "100%",
	                    "x": "0%",
	                    "y": "0%",
	                    "stroke": "rgba(0,0,0,0)",
	                    "stroke-width": "0"
	                }], "exclude_from_legend": true
	            },
	
	            "disp_cna": {
	                "amp": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(255,0,0,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Amplification"
	                },
	
	                "gain": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(255,182,193,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Gain"
	                },
	
	                "homdel": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0,0,255,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Deep Deletion"
	                },
	
	                "hetloss": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(143, 216, 216,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Shallow Deletion"
	                }
	            },
	
	            "disp_mrna": {
	                "up": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0, 0, 0, 0)",
	                        "stroke": "rgba(255, 153, 153, 1)",
	                        "stroke-width": "2",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 3
	                    }], "legend_label": "mRNA Upregulation"
	                },
	
	                "down": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0, 0, 0, 0)",
	                        "stroke": "rgba(102, 153, 204, 1)",
	                        "stroke-width": "2",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 3
	                    }], "legend_label": "mRNA Downregulation"
	                }
	            },
	
	            "disp_prot": {
	                "up": {
	                    "shapes": [{
	                        "type": "triangle",
	                        "x1": "50%",
	                        "y1": "0%",
	                        "x2": "100%",
	                        "y2": "33.33%",
	                        "x3": "0%",
	                        "y3": "33.33%",
	                        "fill": "rgba(0,0,0,1)",
	                        "z": 4,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Protein Upregulation"
	                },
	
	                "down": {
	                    "shapes": [{
	                        "type": "triangle",
	                        "x1": "50%",
	                        "y1": "100%",
	                        "x2": "100%",
	                        "y2": "66.66%",
	                        "x3": "0%",
	                        "y3": "66.66%",
	                        "fill": "rgba(0,0,0,1)",
	                        "z": 4,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Protein Downregulation"
	                }
	            },
	
	            "disp_fusion": {
	                "true": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#8B00C9",
	                        "x": "0%",
	                        "y": "20%",
	                        "width": "100%",
	                        "height": "60%",
	                        "z": 5,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Fusion"
	                }
	            },
	
	            "disp_mut": {
	                "trunc,inframe,missense,promoter,trunc_rec,inframe_rec,missense_rec,promoter_rec": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#008000",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6
	                    }], "legend_label": "Mutation"
	                }
	            }
	        }
	    },
	
	    "genetic_rule_set_same_color_for_all_recurrence": {
	        "type": "gene", "legend_label": "Genetic Alteration", "rule_params": {
	            "*": {
	                "shapes": [{
	                    "type": "rectangle",
	                    "fill": "rgba(211, 211, 211, 1)",
	                    "z": 1,
	                    "width": "100%",
	                    "height": "100%",
	                    "x": "0%",
	                    "y": "0%",
	                    "stroke": "rgba(0,0,0,0)",
	                    "stroke-width": "0"
	                }], "exclude_from_legend": true
	            },
	
	            "disp_cna": {
	                "amp": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(255,0,0,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Amplification"
	                },
	
	                "gain": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(255,182,193,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Gain"
	                },
	
	                "homdel": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0,0,255,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Deep Deletion"
	                },
	
	                "hetloss": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(143, 216, 216,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Shallow Deletion"
	                }
	            },
	
	            "disp_mrna": {
	                "up": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0, 0, 0, 0)",
	                        "stroke": "rgba(255, 153, 153, 1)",
	                        "stroke-width": "2",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 3
	                    }], "legend_label": "mRNA Upregulation"
	                },
	
	                "down": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0, 0, 0, 0)",
	                        "stroke": "rgba(102, 153, 204, 1)",
	                        "stroke-width": "2",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 3
	                    }], "legend_label": "mRNA Downregulation"
	                }
	            },
	
	            "disp_prot": {
	                "up": {
	                    "shapes": [{
	                        "type": "triangle",
	                        "x1": "50%",
	                        "y1": "0%",
	                        "x2": "100%",
	                        "y2": "33.33%",
	                        "x3": "0%",
	                        "y3": "33.33%",
	                        "fill": "rgba(0,0,0,1)",
	                        "z": 4,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Protein Upregulation"
	                },
	
	                "down": {
	                    "shapes": [{
	                        "type": "triangle",
	                        "x1": "50%",
	                        "y1": "100%",
	                        "x2": "100%",
	                        "y2": "66.66%",
	                        "x3": "0%",
	                        "y3": "66.66%",
	                        "fill": "rgba(0,0,0,1)",
	                        "z": 4,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Protein Downregulation"
	                }
	            },
	
	            "disp_fusion": {
	                "true": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#8B00C9",
	                        "x": "0%",
	                        "y": "20%",
	                        "width": "100%",
	                        "height": "60%",
	                        "z": 5,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Fusion"
	                }
	            },
	
	            "disp_mut": {
	                "missense_rec": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#008000",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6
	                    }], "legend_label": "Mutation (putative driver)"
	                },
	
	                "missense,inframe,inframe_rec,trunc,trunc_rec,promoter,promoter_rec": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#53D400",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6
	                    }], "legend_label": "Mutation (putative passenger)"
	                }
	            }
	        }
	    },
	
	    "genetic_rule_set_different_colors_no_recurrence": {
	        "type": "gene", "legend_label": "Genetic Alteration", "rule_params": {
	            "*": {
	                "shapes": [{
	                    "type": "rectangle",
	                    "fill": "rgba(211, 211, 211, 1)",
	                    "z": 1,
	                    "width": "100%",
	                    "height": "100%",
	                    "x": "0%",
	                    "y": "0%",
	                    "stroke": "rgba(0,0,0,0)",
	                    "stroke-width": "0"
	                }], "exclude_from_legend": true
	            },
	
	            "disp_cna": {
	                "amp": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(255,0,0,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Amplification"
	                },
	
	                "gain": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(255,182,193,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Gain"
	                },
	
	                "homdel": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0,0,255,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Deep Deletion"
	                },
	
	                "hetloss": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(143, 216, 216,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Shallow Deletion"
	                }
	            },
	
	            "disp_mrna": {
	                "up": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0, 0, 0, 0)",
	                        "stroke": "rgba(255, 153, 153, 1)",
	                        "stroke-width": "2",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 3
	                    }], "legend_label": "mRNA Upregulation"
	                },
	
	                "down": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0, 0, 0, 0)",
	                        "stroke": "rgba(102, 153, 204, 1)",
	                        "stroke-width": "2",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 3
	                    }], "legend_label": "mRNA Downregulation"
	                }
	            },
	
	            "disp_prot": {
	                "up": {
	                    "shapes": [{
	                        "type": "triangle",
	                        "x1": "50%",
	                        "y1": "0%",
	                        "x2": "100%",
	                        "y2": "33.33%",
	                        "x3": "0%",
	                        "y3": "33.33%",
	                        "fill": "rgba(0,0,0,1)",
	                        "z": 4,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Protein Upregulation"
	                },
	
	                "down": {
	                    "shapes": [{
	                        "type": "triangle",
	                        "x1": "50%",
	                        "y1": "100%",
	                        "x2": "100%",
	                        "y2": "66.66%",
	                        "x3": "0%",
	                        "y3": "66.66%",
	                        "fill": "rgba(0,0,0,1)",
	                        "z": 4,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Protein Downregulation"
	                }
	            },
	
	            "disp_fusion": {
	                "true": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#8B00C9",
	                        "x": "0%",
	                        "y": "20%",
	                        "width": "100%",
	                        "height": "60%",
	                        "z": 5,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Fusion"
	                }
	            },
	
	            "disp_mut": {
	                "promoter,promoter_rec": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#FFA942",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6
	                    }], "legend_label": "Promoter Mutation"
	                },
	
	                "trunc,trunc_rec": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#000000",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6
	                    }], "legend_label": "Truncating Mutation"
	                },
	
	                "inframe,inframe_rec": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#708090",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6
	                    }], "legend_label": "Inframe Mutation"
	                },
	
	                "missense,missense_rec": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#008000",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6
	                    }], "legend_label": "Missense Mutation"
	                }
	            }
	        }
	    },
	
	    "genetic_rule_set_different_colors_recurrence": {
	        "type": "gene", "legend_label": "Genetic Alteration", "rule_params": {
	            "*": {
	                "shapes": [{
	                    "type": "rectangle",
	                    "fill": "rgba(211, 211, 211, 1)",
	                    "z": 1,
	                    "width": "100%",
	                    "height": "100%",
	                    "x": "0%",
	                    "y": "0%",
	                    "stroke": "rgba(0,0,0,0)",
	                    "stroke-width": "0"
	                }], "exclude_from_legend": true
	            },
	
	            "disp_cna": {
	                "amp": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(255,0,0,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Amplification"
	                },
	
	                "gain": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(255,182,193,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Gain"
	                },
	
	                "homdel": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0,0,255,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Deep Deletion"
	                },
	
	                "hetloss": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(143, 216, 216,1)",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 2,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Shallow Deletion"
	                }
	            },
	
	            "disp_mrna": {
	                "up": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0, 0, 0, 0)",
	                        "stroke": "rgba(255, 153, 153, 1)",
	                        "stroke-width": "2",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 3
	                    }], "legend_label": "mRNA Upregulation"
	                },
	
	                "down": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "rgba(0, 0, 0, 0)",
	                        "stroke": "rgba(102, 153, 204, 1)",
	                        "stroke-width": "2",
	                        "x": "0%",
	                        "y": "0%",
	                        "width": "100%",
	                        "height": "100%",
	                        "z": 3
	                    }], "legend_label": "mRNA Downregulation"
	                }
	            },
	
	            "disp_prot": {
	                "up": {
	                    "shapes": [{
	                        "type": "triangle",
	                        "x1": "50%",
	                        "y1": "0%",
	                        "x2": "100%",
	                        "y2": "33.33%",
	                        "x3": "0%",
	                        "y3": "33.33%",
	                        "fill": "rgba(0,0,0,1)",
	                        "z": 4,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Protein Upregulation"
	                },
	
	                "down": {
	                    "shapes": [{
	                        "type": "triangle",
	                        "x1": "50%",
	                        "y1": "100%",
	                        "x2": "100%",
	                        "y2": "66.66%",
	                        "x3": "0%",
	                        "y3": "66.66%",
	                        "fill": "rgba(0,0,0,1)",
	                        "z": 4,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Protein Downregulation"
	                }
	            },
	
	            "disp_fusion": {
	                "true": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#8B00C9",
	                        "x": "0%",
	                        "y": "20%",
	                        "width": "100%",
	                        "height": "60%",
	                        "z": 5,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Fusion"
	                }
	            },
	
	            "disp_mut": {
	                "promoter,promoter_rec": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#FFA942",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Promoter Mutation"
	                },
	
	                "trunc,trunc_rec": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#000000",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Truncating Mutation"
	                },
	
	                "inframe,inframe_rec": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#708090",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Inframe Mutation"
	                },
	
	                "missense_rec": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#008000",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Missense Mutation (putative driver)"
	                },
	
	                "missense": {
	                    "shapes": [{
	                        "type": "rectangle",
	                        "fill": "#53D400",
	                        "x": "0%",
	                        "y": "33.33%",
	                        "width": "100%",
	                        "height": "33.33%",
	                        "z": 6,
	                        "stroke": "rgba(0,0,0,0)",
	                        "stroke-width": "0"
	                    }], "legend_label": "Missense Mutation (putative passenger)"
	                }
	            }
	        }
	    }
	};
	
	exports.default = geneticRules;

/***/ },

/***/ 935:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _oqlParser = __webpack_require__(936);
	
	var _oqlParser2 = _interopRequireDefault(_oqlParser);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	window.oql_parser = _oqlParser2.default; // Requires parser to be window object, window.oql_parser
	// Heavily dependent on OQL PEGjs specification
	
	var OQL = function () {
	
	    var parseOQLQuery = function parseOQLQuery(oql_query, opt_default_oql) {
	        /*	In: - oql_query, a string, an OQL query
	         - opt_default_oql, a string, default OQL to add to any empty line
	         Out: An array, with each element being a parsed OQL line, with
	         all 'DATATYPES' lines applied to subsequent lines and removed.
	         */
	        opt_default_oql = opt_default_oql || "";
	        var parsed = window.oql_parser.parse(oql_query);
	
	        var datatypes_alterations = false;
	        for (var i = 0; i < parsed.length; i++) {
	            if (parsed[i].gene.toLowerCase() === "datatypes") {
	                datatypes_alterations = parsed[i].alterations;
	            } else if (datatypes_alterations && !parsed[i].alterations) {
	                parsed[i].alterations = datatypes_alterations;
	            }
	        }
	
	        if (opt_default_oql.length > 0) {
	            for (var i = 0; i < parsed.length; i++) {
	                if (!parsed[i].alterations) {
	                    parsed[i].alterations = window.oql_parser.parse("DUMMYGENE:" + opt_default_oql + ";")[0].alterations;
	                }
	            }
	            ;
	        }
	
	        return parsed.filter(function (parsed_line) {
	            return parsed_line.gene.toLowerCase() !== "datatypes";
	        });
	    };
	
	    var parsedOQLAlterationToSourceOQL = function parsedOQLAlterationToSourceOQL(alteration) {
	        if (alteration.alteration_type === "cna") {
	            if (alteration.constr_rel === "=") {
	                return alteration.constr_val;
	            } else {
	                return ["CNA", alteration.constr_rel, alteration.constr_val].join("");
	            }
	        } else if (alteration.alteration_type === "mut") {
	            if (alteration.constr_rel) {
	                if (alteration.constr_type === "position") {
	                    return ["MUT", alteration.constr_rel, alteration.info.amino_acid, alteration.constr_val].join("");
	                } else {
	                    return ["MUT", alteration.constr_rel, alteration.constr_val].join("");
	                }
	            } else {
	                return "MUT";
	            }
	        } else if (alteration.alteration_type === "exp") {
	            return "EXP" + alteration.constr_rel + alteration.constr_val;
	        } else if (alteration.alteration_type === "prot") {
	            return "PROT" + alteration.constr_rel + alteration.constr_val;
	        } else if (alteration.alteration_type === "fusion") {
	            return "FUSION";
	        }
	    };
	    var unparseOQLQueryLine = function unparseOQLQueryLine(parsed_oql_query_line) {
	        var ret = "";
	        var gene = parsed_oql_query_line.gene;
	        var alterations = parsed_oql_query_line.alterations;
	        ret += gene;
	        if (alterations.length > 0) {
	            ret += ": " + alterations.map(parsedOQLAlterationToSourceOQL).join(" ");
	        }
	        ret += ";";
	        return ret;
	    };
	
	    /* For the methods isDatumWantedByOQL, ..., the accessors argument is as follows:
	     * accessors = {
	     *	'gene': function(d) {
	     *	    // returns lower case gene symbol
	     *	},
	     *	'cna': function(d) {
	     *	    // returns 'amp', 'homdel', 'hetloss', or 'gain',
	     *	    //  or null
	     *	},
	     *	'mut_type': function(d) {
	     *	    // returns 'missense', 'nonsense', 'nonstart', 'nonstop', 'frameshift', 'inframe', 'splice', 'trunc', or 'promoter'
	     *	    //  or null
	     *	},
	     *	'mut_position': function(d) {
	     *	    // returns a 2-element array of integers, the start position to the end position
	     *	    // or null
	     *	},
	     *	'mut_amino_acid_change': function(d) {
	     *	    // returns a string, the amino acid change,
	     *	    // or null
	     *	},
	     *	'exp': function(d) {
	     *	    // returns a double, mrna expression,
	     *	    // or null
	     *	},
	     *	'prot': function(d) {
	     *	    // returns a double, protein expression,
	     *	    // or null
	     *	},
	     *	'fusion': function(d) {
	     *	    // returns true, false, or null
	     *	}
	     * }
	     */
	    var isDatumWantedByOQL = function isDatumWantedByOQL(parsed_oql_query, datum, accessors) {
	        /*  In: - parsed_oql_query, the result of parseOQLQuery above
	         *	- datum, a datum
	         *	- accessors, an object as described above with methods that apply to datum
	         *  Out: Boolean, whether datum is wanted by this OQL query
	         */
	
	        var gene = accessors.gene(datum).toUpperCase();
	        // if the datum doesn't have a gene associated with it, it's unwanted.
	        if (!gene) {
	            return false;
	        }
	        // Otherwise, a datum is wanted if it's wanted by at least one line.
	        return parsed_oql_query.map(function (query_line) {
	            return isDatumWantedByOQLLine(query_line, datum, gene, accessors);
	        }).reduce(function (acc, next) {
	            return acc || next;
	        }, false);
	    };
	
	    var isDatumWantedByOQLLine = function isDatumWantedByOQLLine(query_line, datum, datum_gene, accessors, opt_mark_oql_regulation_direction) {
	        /*  Helper method for isDatumWantedByOQL
	         *  In: - query_line, one element of a parseOQLQuery output array
	         *	- datum, see isDatumWantedByOQL
	         *	- datum_gene, the lower case gene in datum - passed instead of reaccessed as an optimization
	         *	- accessors, see isDatumWantedByOQL
	         */
	        var line_gene = query_line.gene.toUpperCase();
	        // If the line doesn't have the same gene, the datum is not wanted by this line
	        if (line_gene !== datum_gene) {
	            return false;
	        }
	        // Otherwise, a datum is wanted iff it's wanted by at least one command.
	        if (!query_line.alterations) {
	            return 1;
	        }
	        return query_line.alterations.map(function (alteration_cmd) {
	            return isDatumWantedByOQLAlterationCommand(alteration_cmd, datum, accessors, opt_mark_oql_regulation_direction);
	        }).reduce(function (acc, next) {
	            if (next === 1) {
	                // if it's wanted by this command, its wanted
	                return 1;
	            } else if (next === 0) {
	                // if this command doesn't address it, go with what currently decided
	                return acc;
	            } else if (next === -1) {
	                // if this command addresses and rejects it, then if its
	                //  not already wanted, then for now its unwanted
	                if (acc === 1) {
	                    return 1;
	                } else {
	                    return -1;
	                }
	            }
	        }, -1) // start off with unwanted
	        === 1;
	    };
	
	    var isDatumWantedByOQLAlterationCommand = function isDatumWantedByOQLAlterationCommand(alt_cmd, datum, accessors, opt_mark_oql_regulation_direction) {
	        /*  Helper method for isDatumWantedByOQLLine
	         *  In: - alt_cmd, a parsed oql alteration
	         *	- datum, see isDatumWantedByOQL
	         *	- accessors, see isDatumWantedByOQL
	         *  Out: 1 if the datum is addressed by this command and wanted,
	         *	0 if the datum is not addressed by this command,
	         *	-1 if the datum is addressed by this command and rejected
	         */
	        if (alt_cmd.alteration_type === 'cna') {
	            return isDatumWantedByOQLCNACommand(alt_cmd, datum, accessors);
	        } else if (alt_cmd.alteration_type === 'mut') {
	            return isDatumWantedByOQLMUTCommand(alt_cmd, datum, accessors);
	        } else if (alt_cmd.alteration_type === 'exp' || alt_cmd.alteration_type === 'prot') {
	            return isDatumWantedByOQLEXPOrPROTCommand(alt_cmd, datum, accessors, opt_mark_oql_regulation_direction);
	        } else if (alt_cmd.alteration_type === 'fusion') {
	            return isDatumWantedByFUSIONCommand(alt_cmd, datum, accessors);
	        }
	    };
	
	    var isDatumWantedByFUSIONCommand = function isDatumWantedByFUSIONCommand(alt_cmd, datum, accessors) {
	        /* Helper method for isDatumWantedByOQLAlterationCommand
	         * In/Out: See isDatumWantedByOQLAlterationCommand
	         */
	        var d_fusion = accessors.fusion(datum);
	        if (d_fusion === null) {
	            // If no fusion data, it's not addressed
	            return 0;
	        } else {
	            return 2 * +d_fusion - 1;
	        }
	    };
	
	    var isDatumWantedByOQLCNACommand = function isDatumWantedByOQLCNACommand(alt_cmd, datum, accessors) {
	        /*  Helper method for isDatumWantedByOQLAlterationCommand
	         *  In/Out: See isDatumWantedByOQLAlterationCommand
	         */
	        var d_cna = accessors.cna(datum);
	        if (!d_cna) {
	            // If no cna data on the datum, it's not addressed
	            return 0;
	        } else {
	            // Otherwise, return -1 if it doesnt match, 1 if it matches
	            var match;
	            if (alt_cmd.constr_rel === "=") {
	                match = +(d_cna === alt_cmd.constr_val.toLowerCase());
	            } else {
	                var integer_copy_number = { "amp": 2, "gain": 1, "hetloss": -1, "homdel": -2 };
	                var d_int_cna = integer_copy_number[d_cna];
	                var alt_int_cna = integer_copy_number[alt_cmd.constr_val.toLowerCase()];
	                if (alt_cmd.constr_rel === ">") {
	                    match = +(d_int_cna > alt_int_cna);
	                } else if (alt_cmd.constr_rel === ">=") {
	                    match = +(d_int_cna >= alt_int_cna);
	                } else if (alt_cmd.constr_rel === "<") {
	                    match = +(d_int_cna < alt_int_cna);
	                } else if (alt_cmd.constr_rel === "<=") {
	                    match = +(d_int_cna <= alt_int_cna);
	                }
	            }
	            return 2 * match - 1; // map 0,1 to -1,1
	        }
	    };
	    var isDatumWantedByOQLMUTCommand = function isDatumWantedByOQLMUTCommand(alt_cmd, datum, accessors) {
	        /*  Helper method for isDatumWantedByOQLAlterationCommand
	         *  In/Out: See isDatumWantedByOQLAlterationCommand
	         */
	        var d_mut_type = accessors.mut_type(datum);
	        if (!d_mut_type) {
	            // If no mut data on the datum, it's not addressed
	            return 0;
	        } else {
	            d_mut_type = d_mut_type.toLowerCase();
	            // If no constraint relation ('=' or '!='), then every mutation matches
	            if (!alt_cmd.constr_rel) {
	                return 1;
	            }
	            // Decide based on what type of mutation specification
	            if (alt_cmd.constr_type === 'class') {
	                // Matching on type
	                var target_type = alt_cmd.constr_val.toLowerCase();
	                // It matches if the type of mutation matches, or if
	                //  the target is truncating and the mutation is anything but missense or inframe
	                var matches = d_mut_type === target_type || target_type === 'trunc' && d_mut_type !== 'missense' && d_mut_type !== 'inframe';
	                if (alt_cmd.constr_rel === '!=') {
	                    // If '!=', then we want 1 if it DOESNT match
	                    matches = !matches;
	                }
	                return 2 * +matches - 1;
	            } else if (alt_cmd.constr_type === 'position') {
	                // Matching on position
	                var d_mut_range = accessors.mut_position(datum);
	                if (!d_mut_range) {
	                    // If no position data, reject
	                    return -1;
	                }
	                var target_position = alt_cmd.constr_val;
	                var matches = target_position >= d_mut_range[0] && target_position <= d_mut_range[1];
	                if (alt_cmd.constr_rel === '!=') {
	                    matches = !matches;
	                }
	                return 2 * +matches - 1;
	            } else if (alt_cmd.constr_type === 'name') {
	                // Matching on amino acid change code
	                var d_mut_name = accessors.mut_amino_acid_change(datum).toLowerCase();
	                if (!d_mut_name) {
	                    // If no amino acid change data, reject
	                    return -1;
	                }
	                var target_name = alt_cmd.constr_val.toLowerCase();
	                var matches = target_name === d_mut_name;
	                if (alt_cmd.constr_rel === '!=') {
	                    matches = !matches;
	                }
	                return 2 * +matches - 1;
	            }
	        }
	    };
	    var isDatumWantedByOQLEXPOrPROTCommand = function isDatumWantedByOQLEXPOrPROTCommand(alt_cmd, datum, accessors, opt_mark_oql_regulation_direction) {
	        /*  Helper method for isDatumWantedByOQLAlterationCommand
	         *  In/Out: See isDatumWantedByOQLAlterationCommand
	         */
	        var level = accessors[alt_cmd.alteration_type === "exp" ? 'exp' : 'prot'](datum);
	        if (level === null) {
	            // If no data, it's not addressed
	            return 0;
	        } else {
	            // Otherwise, check it in relation to target
	            var target_level = alt_cmd.constr_val;
	            var target_rel = alt_cmd.constr_rel;
	            var match;
	            var direction = undefined;
	            if (target_rel === '<' && level < target_level || target_rel === '<=' && level <= target_level) {
	                match = 1;
	                direction = -1;
	            } else if (target_rel === '>' && level > target_level || target_rel === '>=' && level >= target_level) {
	                match = 1;
	                direction = 1;
	            } else {
	                match = -1;
	            }
	            if (opt_mark_oql_regulation_direction) {
	                datum.oql_regulation_direction = typeof datum.oql_regulation_direction === "undefined" ? direction : datum.oql_regulation_direction;
	            }
	            return match;
	        }
	    };
	
	    var filterData = function filterData(oql_query, data, _accessors, opt_default_oql, opt_by_oql_line, opt_mark_oql_regulation_direction) {
	        /* In:	- oql_query, a string
	         *	- data, a list of data
	         *	- accessors, accessors as defined above,
	         *	- opt_default_oql, an optional argument, string, default oql to insert to empty oql lines
	         *	- opt_by_oql_line, optional argument, boolean, see Out for description
	         *  Out: the given data, filtered by the given oql query.
	         *	* If opt_by_oql_line is true, then the result is a list of lists,
	         *	    where out[i] = the result of filtering the given data by oql_query
	         *	    line i (after removing 'DATATYPES' lines).
	         *	* If opt_by_oql_line is false, then the result is just a flat list,
	         *	    the data that is wanted by at least one oql line.
	         */
	        data = $.extend(true, [], data); // deep copy, because of any modifications it will make during filtration
	        var null_fn = function null_fn() {
	            return null;
	        };
	        var required_accessors = ['gene', 'cna', 'mut_type', 'mut_position', 'mut_amino_acid_change', 'exp', 'prot', 'fusion'];
	        // default every non-given accessor function to null
	        var accessors = {};
	        for (var i = 0; i < required_accessors.length; i++) {
	            accessors[required_accessors[i]] = _accessors[required_accessors[i]] || null_fn;
	        }
	
	        opt_default_oql = opt_default_oql || "";
	        var parsed_query = parseOQLQuery(oql_query, opt_default_oql).map(function (q_line) {
	            q_line.gene = q_line.gene.toUpperCase();
	            return q_line;
	        });
	
	        if (opt_by_oql_line) {
	            return parsed_query.map(function (query_line) {
	                return {
	                    'gene': query_line.gene,
	                    'parsed_oql_line': query_line,
	                    'oql_line': unparseOQLQueryLine(query_line),
	                    'data': data.filter(function (datum) {
	                        return isDatumWantedByOQLLine(query_line, datum, accessors.gene(datum).toUpperCase(), accessors, opt_mark_oql_regulation_direction);
	                    })
	                };
	            });
	        } else {
	            return data.filter(function (datum) {
	                return isDatumWantedByOQL(parsed_query, datum, accessors);
	            });
	        }
	    };
	    return {
	        'filterCBioPortalWebServiceData': function filterCBioPortalWebServiceData(oql_query, data, opt_default_oql, opt_by_oql_line, opt_mark_oql_regulation_direction) {
	            /* Wrapper method for filterData that has the cBioPortal default accessor functions
	             * Note that for use, the input data must have the field 'genetic_alteration_type,' which
	             * takes one of the following values:
	             *	- MUTATION_EXTENDED
	             *	- COPY_NUMBER_ALTERATION
	             *	- MRNA_EXPRESSION
	             *	- PROTEIN_LEVEL
	             */
	            var cna_profile_data_to_string = {
	                "-2": "homdel",
	                "-1": "hetloss",
	                "0": null,
	                "1": "gain",
	                "2": "amp"
	            };
	            var accessors = {
	                'gene': function gene(d) {
	                    return d.hugo_gene_symbol;
	                },
	                'cna': function cna(d) {
	                    if (d.genetic_alteration_type === 'COPY_NUMBER_ALTERATION') {
	                        return cna_profile_data_to_string[d.profile_data];
	                    } else {
	                        return null;
	                    }
	                },
	                'mut_type': function mut_type(d) {
	                    if (d.genetic_alteration_type === 'MUTATION_EXTENDED') {
	                        if (d.simplified_mutation_type === "fusion") {
	                            return null;
	                        } else if (d.amino_acid_change.toLowerCase() === "promoter") {
	                            return "promoter";
	                        } else {
	                            return d.simplified_mutation_type;
	                        }
	                    } else {
	                        return null;
	                    }
	                },
	                'mut_position': function mut_position(d) {
	                    if (d.genetic_alteration_type === 'MUTATION_EXTENDED') {
	                        var start = d.protein_start_position;
	                        var end = d.protein_end_position;
	                        if (start !== null && end !== null) {
	                            return [parseInt(start, 10), parseInt(end, 10)];
	                        } else {
	                            return null;
	                        }
	                    } else {
	                        return null;
	                    }
	                },
	                'mut_amino_acid_change': function mut_amino_acid_change(d) {
	                    if (d.genetic_alteration_type === 'MUTATION_EXTENDED') {
	                        return d.amino_acid_change;
	                    } else {
	                        return null;
	                    }
	                },
	                'exp': function exp(d) {
	                    if (d.genetic_alteration_type === 'MRNA_EXPRESSION') {
	                        return parseFloat(d.profile_data);
	                    } else {
	                        return null;
	                    }
	                },
	                'prot': function prot(d) {
	                    if (d.genetic_alteration_type === 'PROTEIN_LEVEL') {
	                        return parseFloat(d.profile_data);
	                    } else {
	                        return null;
	                    }
	                },
	                'fusion': function fusion(d) {
	                    if (d.genetic_alteration_type === 'MUTATION_EXTENDED') {
	                        return d.simplified_mutation_type === "fusion";
	                    } else {
	                        return null;
	                    }
	                }
	            };
	            return filterData(oql_query, data, accessors, opt_default_oql, opt_by_oql_line, opt_mark_oql_regulation_direction);
	        },
	        'genes': function genes(oql_query) {
	            var parse_result = parseOQLQuery(oql_query);
	            var genes = parse_result.filter(function (q_line) {
	                return q_line.gene.toLowerCase() !== "datatypes";
	            }).map(function (q_line) {
	                return q_line.gene.toUpperCase();
	            });
	            var unique_genes_set = {};
	            for (var i = 0; i < genes.length; i++) {
	                unique_genes_set[genes[i]] = true;
	            }
	            return Object.keys(unique_genes_set);
	        },
	        'isValid': function isValid(oql_query) {
	            var ret = true;
	            try {
	                window.oql_parser.parse(oql_query);
	            } catch (e) {
	                ret = false;
	            }
	            return ret;
	        }
	    };
	}();
	
	exports.default = OQL;

/***/ },

/***/ 936:
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var oql_parser = function () {
	    /*
	     * Generated by PEG.js 0.8.0.
	     *
	     * http://pegjs.majda.cz/
	     */
	
	    function peg$subclass(child, parent) {
	        function ctor() {
	            this.constructor = child;
	        }
	        ctor.prototype = parent.prototype;
	        child.prototype = new ctor();
	    }
	
	    function SyntaxError(message, expected, found, offset, line, column) {
	        this.message = message;
	        this.expected = expected;
	        this.found = found;
	        this.offset = offset;
	        this.line = line;
	        this.column = column;
	
	        this.name = "SyntaxError";
	    }
	
	    peg$subclass(SyntaxError, Error);
	
	    function parse(input) {
	        var options = arguments.length > 1 ? arguments[1] : {},
	            peg$FAILED = {},
	            peg$startRuleFunctions = { start: peg$parsestart },
	            peg$startRuleFunction = peg$parsestart,
	            peg$c0 = function peg$c0() {
	            return false;
	        },
	            peg$c1 = peg$FAILED,
	            peg$c2 = /^[\n]/,
	            peg$c3 = { type: "class", value: "[\\n]", description: "[\\n]" },
	            peg$c4 = ";",
	            peg$c5 = { type: "literal", value: ";", description: "\";\"" },
	            peg$c6 = [],
	            peg$c7 = /^[0-9]/,
	            peg$c8 = { type: "class", value: "[0-9]", description: "[0-9]" },
	            peg$c9 = function peg$c9(number) {
	            return number.join("");
	        },
	            peg$c10 = "-",
	            peg$c11 = { type: "literal", value: "-", description: "\"-\"" },
	            peg$c12 = function peg$c12(number) {
	            return "-" + number;
	        },
	            peg$c13 = ".",
	            peg$c14 = { type: "literal", value: ".", description: "\".\"" },
	            peg$c15 = function peg$c15(whole_part, decimal_part) {
	            return whole_part + "." + decimal_part;
	        },
	            peg$c16 = function peg$c16(decimal_part) {
	            return "." + decimal_part;
	        },
	            peg$c17 = function peg$c17(whole_part) {
	            return whole_part;
	        },
	            peg$c18 = /^[\-_.@\/a-zA-Z0-9*]/,
	            peg$c19 = { type: "class", value: "[\\-_.@\\/a-zA-Z0-9*]", description: "[\\-_.@\\/a-zA-Z0-9*]" },
	            peg$c20 = function peg$c20(word) {
	            return word.join("");
	        },
	            peg$c21 = /^[GPAVLIMCFYWHKRQNEDST]/,
	            peg$c22 = { type: "class", value: "[GPAVLIMCFYWHKRQNEDST]", description: "[GPAVLIMCFYWHKRQNEDST]" },
	            peg$c23 = function peg$c23(letter) {
	            return letter;
	        },
	            peg$c24 = /^[ \t\r]/,
	            peg$c25 = { type: "class", value: "[ \\t\\r]", description: "[ \\t\\r]" },
	            peg$c26 = "amp",
	            peg$c27 = { type: "literal", value: "AMP", description: "\"AMP\"" },
	            peg$c28 = "homdel",
	            peg$c29 = { type: "literal", value: "HOMDEL", description: "\"HOMDEL\"" },
	            peg$c30 = "gain",
	            peg$c31 = { type: "literal", value: "GAIN", description: "\"GAIN\"" },
	            peg$c32 = "hetloss",
	            peg$c33 = { type: "literal", value: "HETLOSS", description: "\"HETLOSS\"" },
	            peg$c34 = "mut",
	            peg$c35 = { type: "literal", value: "MUT", description: "\"MUT\"" },
	            peg$c36 = "exp",
	            peg$c37 = { type: "literal", value: "EXP", description: "\"EXP\"" },
	            peg$c38 = "prot",
	            peg$c39 = { type: "literal", value: "PROT", description: "\"PROT\"" },
	            peg$c40 = function peg$c40(listofgenes, rest) {
	            return listofgenes.map(function (gene) {
	                return { "gene": gene, "alterations": false };
	            }).concat(rest);
	        },
	            peg$c41 = function peg$c41(listofgenes) {
	            return listofgenes.map(function (gene) {
	                return { "gene": gene, "alterations": false };
	            });
	        },
	            peg$c42 = function peg$c42(first, rest) {
	            return [first].concat(rest);
	        },
	            peg$c43 = function peg$c43(first) {
	            return [first];
	        },
	            peg$c44 = function peg$c44(geneName, rest) {
	            return [geneName].concat(rest);
	        },
	            peg$c45 = function peg$c45(geneName1, geneName2) {
	            return [geneName1, geneName2];
	        },
	            peg$c46 = ":",
	            peg$c47 = { type: "literal", value: ":", description: "\":\"" },
	            peg$c48 = function peg$c48(geneName, alts) {
	            return { "gene": geneName, "alterations": alts };
	        },
	            peg$c49 = function peg$c49(geneName) {
	            return { "gene": geneName, "alterations": false };
	        },
	            peg$c50 = function peg$c50(a1, a2) {
	            return [a1].concat(a2);
	        },
	            peg$c51 = function peg$c51(a1) {
	            return [a1];
	        },
	            peg$c52 = function peg$c52(cmd) {
	            return cmd;
	        },
	            peg$c53 = function peg$c53() {
	            return "AMP";
	        },
	            peg$c54 = function peg$c54() {
	            return "HOMDEL";
	        },
	            peg$c55 = function peg$c55() {
	            return "GAIN";
	        },
	            peg$c56 = function peg$c56() {
	            return "HETLOSS";
	        },
	            peg$c57 = "cna",
	            peg$c58 = { type: "literal", value: "CNA", description: "\"CNA\"" },
	            peg$c59 = function peg$c59(op, constrval) {
	            return { "alteration_type": "cna", "constr_rel": op, "constr_val": constrval };
	        },
	            peg$c60 = function peg$c60(constrval) {
	            return { "alteration_type": "cna", "constr_rel": "=", "constr_val": constrval };
	        },
	            peg$c61 = "MUT",
	            peg$c62 = "=",
	            peg$c63 = { type: "literal", value: "=", description: "\"=\"" },
	            peg$c64 = function peg$c64(mutation) {
	            return { "alteration_type": "mut", "constr_rel": "=", "constr_type": mutation.type, "constr_val": mutation.value, "info": mutation.info };
	        },
	            peg$c65 = "!=",
	            peg$c66 = { type: "literal", value: "!=", description: "\"!=\"" },
	            peg$c67 = function peg$c67(mutation) {
	            return { "alteration_type": "mut", "constr_rel": "!=", "constr_type": mutation.type, "constr_val": mutation.value, "info": mutation.info };
	        },
	            peg$c68 = function peg$c68() {
	            return { "alteration_type": "mut" };
	        },
	            peg$c69 = "EXP",
	            peg$c70 = function peg$c70(op, constrval) {
	            return { "alteration_type": "exp", "constr_rel": op, "constr_val": parseFloat(constrval) };
	        },
	            peg$c71 = "FUSION",
	            peg$c72 = { type: "literal", value: "FUSION", description: "\"FUSION\"" },
	            peg$c73 = function peg$c73() {
	            return { "alteration_type": "fusion" };
	        },
	            peg$c74 = "PROT",
	            peg$c75 = function peg$c75(op, constrval) {
	            return { "alteration_type": "prot", "constr_rel": op, "constr_val": parseFloat(constrval) };
	        },
	            peg$c76 = ">=",
	            peg$c77 = { type: "literal", value: ">=", description: "\">=\"" },
	            peg$c78 = function peg$c78() {
	            return ">=";
	        },
	            peg$c79 = "<=",
	            peg$c80 = { type: "literal", value: "<=", description: "\"<=\"" },
	            peg$c81 = function peg$c81() {
	            return "<=";
	        },
	            peg$c82 = ">",
	            peg$c83 = { type: "literal", value: ">", description: "\">\"" },
	            peg$c84 = function peg$c84() {
	            return ">";
	        },
	            peg$c85 = "<",
	            peg$c86 = { type: "literal", value: "<", description: "\"<\"" },
	            peg$c87 = function peg$c87() {
	            return "<";
	        },
	            peg$c88 = "missense",
	            peg$c89 = { type: "literal", value: "MISSENSE", description: "\"MISSENSE\"" },
	            peg$c90 = function peg$c90() {
	            return { "type": "class", "value": "MISSENSE", "info": {} };
	        },
	            peg$c91 = "nonsense",
	            peg$c92 = { type: "literal", value: "NONSENSE", description: "\"NONSENSE\"" },
	            peg$c93 = function peg$c93() {
	            return { "type": "class", "value": "NONSENSE", "info": {} };
	        },
	            peg$c94 = "nonstart",
	            peg$c95 = { type: "literal", value: "NONSTART", description: "\"NONSTART\"" },
	            peg$c96 = function peg$c96() {
	            return { "type": "class", "value": "NONSTART", "info": {} };
	        },
	            peg$c97 = "nonstop",
	            peg$c98 = { type: "literal", value: "NONSTOP", description: "\"NONSTOP\"" },
	            peg$c99 = function peg$c99() {
	            return { "type": "class", "value": "NONSTOP", "info": {} };
	        },
	            peg$c100 = "frameshift",
	            peg$c101 = { type: "literal", value: "FRAMESHIFT", description: "\"FRAMESHIFT\"" },
	            peg$c102 = function peg$c102() {
	            return { "type": "class", "value": "FRAMESHIFT", "info": {} };
	        },
	            peg$c103 = "inframe",
	            peg$c104 = { type: "literal", value: "INFRAME", description: "\"INFRAME\"" },
	            peg$c105 = function peg$c105() {
	            return { "type": "class", "value": "INFRAME", "info": {} };
	        },
	            peg$c106 = "splice",
	            peg$c107 = { type: "literal", value: "SPLICE", description: "\"SPLICE\"" },
	            peg$c108 = function peg$c108() {
	            return { "type": "class", "value": "SPLICE", "info": {} };
	        },
	            peg$c109 = "trunc",
	            peg$c110 = { type: "literal", value: "TRUNC", description: "\"TRUNC\"" },
	            peg$c111 = function peg$c111() {
	            return { "type": "class", "value": "TRUNC", "info": {} };
	        },
	            peg$c112 = "promoter",
	            peg$c113 = { type: "literal", value: "PROMOTER", description: "\"PROMOTER\"" },
	            peg$c114 = function peg$c114() {
	            return { "type": "class", "value": "PROMOTER", "info": {} };
	        },
	            peg$c115 = function peg$c115(letter, position, string) {
	            return { "type": "name", "value": letter + position + string, "info": {} };
	        },
	            peg$c116 = function peg$c116(letter, position) {
	            return { "type": "position", "value": parseInt(position), "info": { "amino_acid": letter.toUpperCase() } };
	        },
	            peg$c117 = function peg$c117(mutation_name) {
	            return { "type": "name", "value": mutation_name, "info": {} };
	        },
	            peg$currPos = 0,
	            peg$reportedPos = 0,
	            peg$cachedPos = 0,
	            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
	            peg$maxFailPos = 0,
	            peg$maxFailExpected = [],
	            peg$silentFails = 0,
	            peg$result;
	
	        if ("startRule" in options) {
	            if (!(options.startRule in peg$startRuleFunctions)) {
	                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	            }
	
	            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	        }
	
	        function text() {
	            return input.substring(peg$reportedPos, peg$currPos);
	        }
	
	        function offset() {
	            return peg$reportedPos;
	        }
	
	        function line() {
	            return peg$computePosDetails(peg$reportedPos).line;
	        }
	
	        function column() {
	            return peg$computePosDetails(peg$reportedPos).column;
	        }
	
	        function expected(description) {
	            throw peg$buildException(null, [{ type: "other", description: description }], peg$reportedPos);
	        }
	
	        function error(message) {
	            throw peg$buildException(message, null, peg$reportedPos);
	        }
	
	        function peg$computePosDetails(pos) {
	            function advance(details, startPos, endPos) {
	                var p, ch;
	
	                for (p = startPos; p < endPos; p++) {
	                    ch = input.charAt(p);
	                    if (ch === "\n") {
	                        if (!details.seenCR) {
	                            details.line++;
	                        }
	                        details.column = 1;
	                        details.seenCR = false;
	                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
	                        details.line++;
	                        details.column = 1;
	                        details.seenCR = true;
	                    } else {
	                        details.column++;
	                        details.seenCR = false;
	                    }
	                }
	            }
	
	            if (peg$cachedPos !== pos) {
	                if (peg$cachedPos > pos) {
	                    peg$cachedPos = 0;
	                    peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
	                }
	                advance(peg$cachedPosDetails, peg$cachedPos, pos);
	                peg$cachedPos = pos;
	            }
	
	            return peg$cachedPosDetails;
	        }
	
	        function peg$fail(expected) {
	            if (peg$currPos < peg$maxFailPos) {
	                return;
	            }
	
	            if (peg$currPos > peg$maxFailPos) {
	                peg$maxFailPos = peg$currPos;
	                peg$maxFailExpected = [];
	            }
	
	            peg$maxFailExpected.push(expected);
	        }
	
	        function peg$buildException(message, expected, pos) {
	            function cleanupExpected(expected) {
	                var i = 1;
	
	                expected.sort(function (a, b) {
	                    if (a.description < b.description) {
	                        return -1;
	                    } else if (a.description > b.description) {
	                        return 1;
	                    } else {
	                        return 0;
	                    }
	                });
	
	                while (i < expected.length) {
	                    if (expected[i - 1] === expected[i]) {
	                        expected.splice(i, 1);
	                    } else {
	                        i++;
	                    }
	                }
	            }
	
	            function buildMessage(expected, found) {
	                function stringEscape(s) {
	                    function hex(ch) {
	                        return ch.charCodeAt(0).toString(16).toUpperCase();
	                    }
	
	                    return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\x08/g, '\\b').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) {
	                        return '\\x0' + hex(ch);
	                    }).replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) {
	                        return '\\x' + hex(ch);
	                    }).replace(/[\u0180-\u0FFF]/g, function (ch) {
	                        return "\\u0" + hex(ch);
	                    }).replace(/[\u1080-\uFFFF]/g, function (ch) {
	                        return "\\u" + hex(ch);
	                    });
	                }
	
	                var expectedDescs = new Array(expected.length),
	                    expectedDesc,
	                    foundDesc,
	                    i;
	
	                for (i = 0; i < expected.length; i++) {
	                    expectedDescs[i] = expected[i].description;
	                }
	
	                expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(", ") + " or " + expectedDescs[expected.length - 1] : expectedDescs[0];
	
	                foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";
	
	                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
	            }
	
	            var posDetails = peg$computePosDetails(pos),
	                found = pos < input.length ? input.charAt(pos) : null;
	
	            if (expected !== null) {
	                cleanupExpected(expected);
	            }
	
	            return new SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, pos, posDetails.line, posDetails.column);
	        }
	
	        function peg$parsestart() {
	            var s0, s1;
	
	            s0 = peg$parseQuery();
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parsesp();
	                if (s1 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c0();
	                }
	                s0 = s1;
	            }
	
	            return s0;
	        }
	
	        function peg$parsebr() {
	            var s0, s1, s2;
	
	            s0 = peg$currPos;
	            if (peg$c2.test(input.charAt(peg$currPos))) {
	                s1 = input.charAt(peg$currPos);
	                peg$currPos++;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c3);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                s2 = peg$parsebr();
	                if (s2 !== peg$FAILED) {
	                    s1 = [s1, s2];
	                    s0 = s1;
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	            } else {
	                peg$currPos = s0;
	                s0 = peg$c1;
	            }
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                if (input.charCodeAt(peg$currPos) === 59) {
	                    s1 = peg$c4;
	                    peg$currPos++;
	                } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) {
	                        peg$fail(peg$c5);
	                    }
	                }
	                if (s1 !== peg$FAILED) {
	                    s2 = peg$parsebr();
	                    if (s2 !== peg$FAILED) {
	                        s1 = [s1, s2];
	                        s0 = s1;
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	                if (s0 === peg$FAILED) {
	                    if (peg$c2.test(input.charAt(peg$currPos))) {
	                        s0 = input.charAt(peg$currPos);
	                        peg$currPos++;
	                    } else {
	                        s0 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c3);
	                        }
	                    }
	                    if (s0 === peg$FAILED) {
	                        if (input.charCodeAt(peg$currPos) === 59) {
	                            s0 = peg$c4;
	                            peg$currPos++;
	                        } else {
	                            s0 = peg$FAILED;
	                            if (peg$silentFails === 0) {
	                                peg$fail(peg$c5);
	                            }
	                        }
	                    }
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseNaturalNumber() {
	            var s0, s1, s2;
	
	            s0 = peg$currPos;
	            s1 = [];
	            if (peg$c7.test(input.charAt(peg$currPos))) {
	                s2 = input.charAt(peg$currPos);
	                peg$currPos++;
	            } else {
	                s2 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c8);
	                }
	            }
	            if (s2 !== peg$FAILED) {
	                while (s2 !== peg$FAILED) {
	                    s1.push(s2);
	                    if (peg$c7.test(input.charAt(peg$currPos))) {
	                        s2 = input.charAt(peg$currPos);
	                        peg$currPos++;
	                    } else {
	                        s2 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c8);
	                        }
	                    }
	                }
	            } else {
	                s1 = peg$c1;
	            }
	            if (s1 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c9(s1);
	            }
	            s0 = s1;
	
	            return s0;
	        }
	
	        function peg$parseNumber() {
	            var s0, s1, s2, s3;
	
	            s0 = peg$currPos;
	            if (input.charCodeAt(peg$currPos) === 45) {
	                s1 = peg$c10;
	                peg$currPos++;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c11);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                s2 = peg$parseNumber();
	                if (s2 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c12(s2);
	                    s0 = s1;
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	            } else {
	                peg$currPos = s0;
	                s0 = peg$c1;
	            }
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parseNaturalNumber();
	                if (s1 !== peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 46) {
	                        s2 = peg$c13;
	                        peg$currPos++;
	                    } else {
	                        s2 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c14);
	                        }
	                    }
	                    if (s2 !== peg$FAILED) {
	                        s3 = peg$parseNaturalNumber();
	                        if (s3 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c15(s1, s3);
	                            s0 = s1;
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	                if (s0 === peg$FAILED) {
	                    s0 = peg$currPos;
	                    if (input.charCodeAt(peg$currPos) === 46) {
	                        s1 = peg$c13;
	                        peg$currPos++;
	                    } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c14);
	                        }
	                    }
	                    if (s1 !== peg$FAILED) {
	                        s2 = peg$parseNaturalNumber();
	                        if (s2 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c16(s2);
	                            s0 = s1;
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                    if (s0 === peg$FAILED) {
	                        s0 = peg$currPos;
	                        s1 = peg$parseNaturalNumber();
	                        if (s1 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c17(s1);
	                        }
	                        s0 = s1;
	                    }
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseString() {
	            var s0, s1, s2;
	
	            s0 = peg$currPos;
	            s1 = [];
	            if (peg$c18.test(input.charAt(peg$currPos))) {
	                s2 = input.charAt(peg$currPos);
	                peg$currPos++;
	            } else {
	                s2 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c19);
	                }
	            }
	            if (s2 !== peg$FAILED) {
	                while (s2 !== peg$FAILED) {
	                    s1.push(s2);
	                    if (peg$c18.test(input.charAt(peg$currPos))) {
	                        s2 = input.charAt(peg$currPos);
	                        peg$currPos++;
	                    } else {
	                        s2 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c19);
	                        }
	                    }
	                }
	            } else {
	                s1 = peg$c1;
	            }
	            if (s1 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c20(s1);
	            }
	            s0 = s1;
	
	            return s0;
	        }
	
	        function peg$parseAminoAcid() {
	            var s0, s1;
	
	            s0 = peg$currPos;
	            if (peg$c21.test(input.charAt(peg$currPos))) {
	                s1 = input.charAt(peg$currPos);
	                peg$currPos++;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c22);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c23(s1);
	            }
	            s0 = s1;
	
	            return s0;
	        }
	
	        function peg$parsesp() {
	            var s0, s1;
	
	            s0 = [];
	            if (peg$c24.test(input.charAt(peg$currPos))) {
	                s1 = input.charAt(peg$currPos);
	                peg$currPos++;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c25);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                while (s1 !== peg$FAILED) {
	                    s0.push(s1);
	                    if (peg$c24.test(input.charAt(peg$currPos))) {
	                        s1 = input.charAt(peg$currPos);
	                        peg$currPos++;
	                    } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c25);
	                        }
	                    }
	                }
	            } else {
	                s0 = peg$c1;
	            }
	
	            return s0;
	        }
	
	        function peg$parsemsp() {
	            var s0, s1;
	
	            s0 = [];
	            if (peg$c24.test(input.charAt(peg$currPos))) {
	                s1 = input.charAt(peg$currPos);
	                peg$currPos++;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c25);
	                }
	            }
	            while (s1 !== peg$FAILED) {
	                s0.push(s1);
	                if (peg$c24.test(input.charAt(peg$currPos))) {
	                    s1 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) {
	                        peg$fail(peg$c25);
	                    }
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseAMP() {
	            var s0;
	
	            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c26) {
	                s0 = input.substr(peg$currPos, 3);
	                peg$currPos += 3;
	            } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c27);
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseHOMDEL() {
	            var s0;
	
	            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c28) {
	                s0 = input.substr(peg$currPos, 6);
	                peg$currPos += 6;
	            } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c29);
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseGAIN() {
	            var s0;
	
	            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c30) {
	                s0 = input.substr(peg$currPos, 4);
	                peg$currPos += 4;
	            } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c31);
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseHETLOSS() {
	            var s0;
	
	            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c32) {
	                s0 = input.substr(peg$currPos, 7);
	                peg$currPos += 7;
	            } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c33);
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseMUT() {
	            var s0;
	
	            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c34) {
	                s0 = input.substr(peg$currPos, 3);
	                peg$currPos += 3;
	            } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c35);
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseEXP() {
	            var s0;
	
	            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c36) {
	                s0 = input.substr(peg$currPos, 3);
	                peg$currPos += 3;
	            } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c37);
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parsePROT() {
	            var s0;
	
	            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c38) {
	                s0 = input.substr(peg$currPos, 4);
	                peg$currPos += 4;
	            } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c39);
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseQuery() {
	            var s0, s1, s2, s3, s4, s5;
	
	            s0 = peg$currPos;
	            s1 = peg$parseListOfGenes();
	            if (s1 !== peg$FAILED) {
	                s2 = peg$parsemsp();
	                if (s2 !== peg$FAILED) {
	                    s3 = peg$parsebr();
	                    if (s3 !== peg$FAILED) {
	                        s4 = peg$parseQuery();
	                        if (s4 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c40(s1, s4);
	                            s0 = s1;
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	            } else {
	                peg$currPos = s0;
	                s0 = peg$c1;
	            }
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parseListOfGenes();
	                if (s1 !== peg$FAILED) {
	                    s2 = peg$parsemsp();
	                    if (s2 !== peg$FAILED) {
	                        s3 = peg$parsebr();
	                        if (s3 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c41(s1);
	                            s0 = s1;
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	                if (s0 === peg$FAILED) {
	                    s0 = peg$currPos;
	                    s1 = peg$parseListOfGenes();
	                    if (s1 !== peg$FAILED) {
	                        s2 = peg$parsemsp();
	                        if (s2 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c41(s1);
	                            s0 = s1;
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                    if (s0 === peg$FAILED) {
	                        s0 = peg$currPos;
	                        s1 = peg$parsemsp();
	                        if (s1 !== peg$FAILED) {
	                            s2 = peg$parseSingleGeneQuery();
	                            if (s2 !== peg$FAILED) {
	                                s3 = peg$parsemsp();
	                                if (s3 !== peg$FAILED) {
	                                    s4 = peg$parsebr();
	                                    if (s4 !== peg$FAILED) {
	                                        s5 = peg$parseQuery();
	                                        if (s5 !== peg$FAILED) {
	                                            peg$reportedPos = s0;
	                                            s1 = peg$c42(s2, s5);
	                                            s0 = s1;
	                                        } else {
	                                            peg$currPos = s0;
	                                            s0 = peg$c1;
	                                        }
	                                    } else {
	                                        peg$currPos = s0;
	                                        s0 = peg$c1;
	                                    }
	                                } else {
	                                    peg$currPos = s0;
	                                    s0 = peg$c1;
	                                }
	                            } else {
	                                peg$currPos = s0;
	                                s0 = peg$c1;
	                            }
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                        if (s0 === peg$FAILED) {
	                            s0 = peg$currPos;
	                            s1 = peg$parsemsp();
	                            if (s1 !== peg$FAILED) {
	                                s2 = peg$parseSingleGeneQuery();
	                                if (s2 !== peg$FAILED) {
	                                    s3 = peg$parsemsp();
	                                    if (s3 !== peg$FAILED) {
	                                        s4 = peg$parsebr();
	                                        if (s4 !== peg$FAILED) {
	                                            peg$reportedPos = s0;
	                                            s1 = peg$c43(s2);
	                                            s0 = s1;
	                                        } else {
	                                            peg$currPos = s0;
	                                            s0 = peg$c1;
	                                        }
	                                    } else {
	                                        peg$currPos = s0;
	                                        s0 = peg$c1;
	                                    }
	                                } else {
	                                    peg$currPos = s0;
	                                    s0 = peg$c1;
	                                }
	                            } else {
	                                peg$currPos = s0;
	                                s0 = peg$c1;
	                            }
	                            if (s0 === peg$FAILED) {
	                                s0 = peg$currPos;
	                                s1 = peg$parsemsp();
	                                if (s1 !== peg$FAILED) {
	                                    s2 = peg$parseSingleGeneQuery();
	                                    if (s2 !== peg$FAILED) {
	                                        s3 = peg$parsemsp();
	                                        if (s3 !== peg$FAILED) {
	                                            peg$reportedPos = s0;
	                                            s1 = peg$c43(s2);
	                                            s0 = s1;
	                                        } else {
	                                            peg$currPos = s0;
	                                            s0 = peg$c1;
	                                        }
	                                    } else {
	                                        peg$currPos = s0;
	                                        s0 = peg$c1;
	                                    }
	                                } else {
	                                    peg$currPos = s0;
	                                    s0 = peg$c1;
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseListOfGenes() {
	            var s0, s1, s2, s3, s4, s5;
	
	            s0 = peg$currPos;
	            s1 = peg$parsemsp();
	            if (s1 !== peg$FAILED) {
	                s2 = peg$parseString();
	                if (s2 !== peg$FAILED) {
	                    s3 = peg$parsemsp();
	                    if (s3 !== peg$FAILED) {
	                        s4 = peg$parseListOfGenes();
	                        if (s4 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c44(s2, s4);
	                            s0 = s1;
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	            } else {
	                peg$currPos = s0;
	                s0 = peg$c1;
	            }
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parsemsp();
	                if (s1 !== peg$FAILED) {
	                    s2 = peg$parseString();
	                    if (s2 !== peg$FAILED) {
	                        s3 = peg$parsemsp();
	                        if (s3 !== peg$FAILED) {
	                            s4 = peg$parseString();
	                            if (s4 !== peg$FAILED) {
	                                s5 = peg$parsemsp();
	                                if (s5 !== peg$FAILED) {
	                                    peg$reportedPos = s0;
	                                    s1 = peg$c45(s2, s4);
	                                    s0 = s1;
	                                } else {
	                                    peg$currPos = s0;
	                                    s0 = peg$c1;
	                                }
	                            } else {
	                                peg$currPos = s0;
	                                s0 = peg$c1;
	                            }
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseSingleGeneQuery() {
	            var s0, s1, s2, s3, s4, s5;
	
	            s0 = peg$currPos;
	            s1 = peg$parseString();
	            if (s1 !== peg$FAILED) {
	                s2 = peg$parsemsp();
	                if (s2 !== peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 58) {
	                        s3 = peg$c46;
	                        peg$currPos++;
	                    } else {
	                        s3 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c47);
	                        }
	                    }
	                    if (s3 !== peg$FAILED) {
	                        s4 = peg$parsemsp();
	                        if (s4 !== peg$FAILED) {
	                            s5 = peg$parseAlterations();
	                            if (s5 !== peg$FAILED) {
	                                peg$reportedPos = s0;
	                                s1 = peg$c48(s1, s5);
	                                s0 = s1;
	                            } else {
	                                peg$currPos = s0;
	                                s0 = peg$c1;
	                            }
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	            } else {
	                peg$currPos = s0;
	                s0 = peg$c1;
	            }
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parseString();
	                if (s1 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c49(s1);
	                }
	                s0 = s1;
	            }
	
	            return s0;
	        }
	
	        function peg$parseAlterations() {
	            var s0, s1, s2, s3;
	
	            s0 = peg$currPos;
	            s1 = peg$parseAlteration();
	            if (s1 !== peg$FAILED) {
	                s2 = peg$parsesp();
	                if (s2 !== peg$FAILED) {
	                    s3 = peg$parseAlterations();
	                    if (s3 !== peg$FAILED) {
	                        peg$reportedPos = s0;
	                        s1 = peg$c50(s1, s3);
	                        s0 = s1;
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	            } else {
	                peg$currPos = s0;
	                s0 = peg$c1;
	            }
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parseAlteration();
	                if (s1 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c51(s1);
	                }
	                s0 = s1;
	            }
	
	            return s0;
	        }
	
	        function peg$parseAlteration() {
	            var s0, s1;
	
	            s0 = peg$currPos;
	            s1 = peg$parseCNACommand();
	            if (s1 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c52(s1);
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parseEXPCommand();
	                if (s1 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c52(s1);
	                }
	                s0 = s1;
	                if (s0 === peg$FAILED) {
	                    s0 = peg$currPos;
	                    s1 = peg$parsePROTCommand();
	                    if (s1 !== peg$FAILED) {
	                        peg$reportedPos = s0;
	                        s1 = peg$c52(s1);
	                    }
	                    s0 = s1;
	                    if (s0 === peg$FAILED) {
	                        s0 = peg$currPos;
	                        s1 = peg$parseFUSIONCommand();
	                        if (s1 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c52(s1);
	                        }
	                        s0 = s1;
	                        if (s0 === peg$FAILED) {
	                            s0 = peg$currPos;
	                            s1 = peg$parseMUTCommand();
	                            if (s1 !== peg$FAILED) {
	                                peg$reportedPos = s0;
	                                s1 = peg$c52(s1);
	                            }
	                            s0 = s1;
	                        }
	                    }
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseCNAType() {
	            var s0, s1;
	
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c26) {
	                s1 = input.substr(peg$currPos, 3);
	                peg$currPos += 3;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c27);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c53();
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c28) {
	                    s1 = input.substr(peg$currPos, 6);
	                    peg$currPos += 6;
	                } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) {
	                        peg$fail(peg$c29);
	                    }
	                }
	                if (s1 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c54();
	                }
	                s0 = s1;
	                if (s0 === peg$FAILED) {
	                    s0 = peg$currPos;
	                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c30) {
	                        s1 = input.substr(peg$currPos, 4);
	                        peg$currPos += 4;
	                    } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c31);
	                        }
	                    }
	                    if (s1 !== peg$FAILED) {
	                        peg$reportedPos = s0;
	                        s1 = peg$c55();
	                    }
	                    s0 = s1;
	                    if (s0 === peg$FAILED) {
	                        s0 = peg$currPos;
	                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c32) {
	                            s1 = input.substr(peg$currPos, 7);
	                            peg$currPos += 7;
	                        } else {
	                            s1 = peg$FAILED;
	                            if (peg$silentFails === 0) {
	                                peg$fail(peg$c33);
	                            }
	                        }
	                        if (s1 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c56();
	                        }
	                        s0 = s1;
	                    }
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseCNACommand() {
	            var s0, s1, s2, s3, s4, s5;
	
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c57) {
	                s1 = input.substr(peg$currPos, 3);
	                peg$currPos += 3;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c58);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                s2 = peg$parsemsp();
	                if (s2 !== peg$FAILED) {
	                    s3 = peg$parseComparisonOp();
	                    if (s3 !== peg$FAILED) {
	                        s4 = peg$parsemsp();
	                        if (s4 !== peg$FAILED) {
	                            s5 = peg$parseCNAType();
	                            if (s5 !== peg$FAILED) {
	                                peg$reportedPos = s0;
	                                s1 = peg$c59(s3, s5);
	                                s0 = s1;
	                            } else {
	                                peg$currPos = s0;
	                                s0 = peg$c1;
	                            }
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	            } else {
	                peg$currPos = s0;
	                s0 = peg$c1;
	            }
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parseCNAType();
	                if (s1 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c60(s1);
	                }
	                s0 = s1;
	            }
	
	            return s0;
	        }
	
	        function peg$parseMUTCommand() {
	            var s0, s1, s2, s3, s4, s5;
	
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 3) === peg$c61) {
	                s1 = peg$c61;
	                peg$currPos += 3;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c35);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                s2 = peg$parsemsp();
	                if (s2 !== peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 61) {
	                        s3 = peg$c62;
	                        peg$currPos++;
	                    } else {
	                        s3 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c63);
	                        }
	                    }
	                    if (s3 !== peg$FAILED) {
	                        s4 = peg$parsemsp();
	                        if (s4 !== peg$FAILED) {
	                            s5 = peg$parseMutation();
	                            if (s5 !== peg$FAILED) {
	                                peg$reportedPos = s0;
	                                s1 = peg$c64(s5);
	                                s0 = s1;
	                            } else {
	                                peg$currPos = s0;
	                                s0 = peg$c1;
	                            }
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	            } else {
	                peg$currPos = s0;
	                s0 = peg$c1;
	            }
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                if (input.substr(peg$currPos, 3) === peg$c61) {
	                    s1 = peg$c61;
	                    peg$currPos += 3;
	                } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) {
	                        peg$fail(peg$c35);
	                    }
	                }
	                if (s1 !== peg$FAILED) {
	                    s2 = peg$parsemsp();
	                    if (s2 !== peg$FAILED) {
	                        if (input.substr(peg$currPos, 2) === peg$c65) {
	                            s3 = peg$c65;
	                            peg$currPos += 2;
	                        } else {
	                            s3 = peg$FAILED;
	                            if (peg$silentFails === 0) {
	                                peg$fail(peg$c66);
	                            }
	                        }
	                        if (s3 !== peg$FAILED) {
	                            s4 = peg$parsemsp();
	                            if (s4 !== peg$FAILED) {
	                                s5 = peg$parseMutation();
	                                if (s5 !== peg$FAILED) {
	                                    peg$reportedPos = s0;
	                                    s1 = peg$c67(s5);
	                                    s0 = s1;
	                                } else {
	                                    peg$currPos = s0;
	                                    s0 = peg$c1;
	                                }
	                            } else {
	                                peg$currPos = s0;
	                                s0 = peg$c1;
	                            }
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	                if (s0 === peg$FAILED) {
	                    s0 = peg$currPos;
	                    if (input.substr(peg$currPos, 3) === peg$c61) {
	                        s1 = peg$c61;
	                        peg$currPos += 3;
	                    } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c35);
	                        }
	                    }
	                    if (s1 !== peg$FAILED) {
	                        peg$reportedPos = s0;
	                        s1 = peg$c68();
	                    }
	                    s0 = s1;
	                    if (s0 === peg$FAILED) {
	                        s0 = peg$currPos;
	                        s1 = peg$parseMutation();
	                        if (s1 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c64(s1);
	                        }
	                        s0 = s1;
	                    }
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseEXPCommand() {
	            var s0, s1, s2, s3, s4, s5;
	
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 3) === peg$c69) {
	                s1 = peg$c69;
	                peg$currPos += 3;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c37);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                s2 = peg$parsemsp();
	                if (s2 !== peg$FAILED) {
	                    s3 = peg$parseComparisonOp();
	                    if (s3 !== peg$FAILED) {
	                        s4 = peg$parsemsp();
	                        if (s4 !== peg$FAILED) {
	                            s5 = peg$parseNumber();
	                            if (s5 !== peg$FAILED) {
	                                peg$reportedPos = s0;
	                                s1 = peg$c70(s3, s5);
	                                s0 = s1;
	                            } else {
	                                peg$currPos = s0;
	                                s0 = peg$c1;
	                            }
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	            } else {
	                peg$currPos = s0;
	                s0 = peg$c1;
	            }
	
	            return s0;
	        }
	
	        function peg$parseFUSIONCommand() {
	            var s0, s1;
	
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 6) === peg$c71) {
	                s1 = peg$c71;
	                peg$currPos += 6;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c72);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c73();
	            }
	            s0 = s1;
	
	            return s0;
	        }
	
	        function peg$parsePROTCommand() {
	            var s0, s1, s2, s3, s4, s5;
	
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 4) === peg$c74) {
	                s1 = peg$c74;
	                peg$currPos += 4;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c39);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                s2 = peg$parsemsp();
	                if (s2 !== peg$FAILED) {
	                    s3 = peg$parseComparisonOp();
	                    if (s3 !== peg$FAILED) {
	                        s4 = peg$parsemsp();
	                        if (s4 !== peg$FAILED) {
	                            s5 = peg$parseNumber();
	                            if (s5 !== peg$FAILED) {
	                                peg$reportedPos = s0;
	                                s1 = peg$c75(s3, s5);
	                                s0 = s1;
	                            } else {
	                                peg$currPos = s0;
	                                s0 = peg$c1;
	                            }
	                        } else {
	                            peg$currPos = s0;
	                            s0 = peg$c1;
	                        }
	                    } else {
	                        peg$currPos = s0;
	                        s0 = peg$c1;
	                    }
	                } else {
	                    peg$currPos = s0;
	                    s0 = peg$c1;
	                }
	            } else {
	                peg$currPos = s0;
	                s0 = peg$c1;
	            }
	
	            return s0;
	        }
	
	        function peg$parseComparisonOp() {
	            var s0, s1;
	
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 2) === peg$c76) {
	                s1 = peg$c76;
	                peg$currPos += 2;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c77);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c78();
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                if (input.substr(peg$currPos, 2) === peg$c79) {
	                    s1 = peg$c79;
	                    peg$currPos += 2;
	                } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) {
	                        peg$fail(peg$c80);
	                    }
	                }
	                if (s1 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c81();
	                }
	                s0 = s1;
	                if (s0 === peg$FAILED) {
	                    s0 = peg$currPos;
	                    if (input.charCodeAt(peg$currPos) === 62) {
	                        s1 = peg$c82;
	                        peg$currPos++;
	                    } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c83);
	                        }
	                    }
	                    if (s1 !== peg$FAILED) {
	                        peg$reportedPos = s0;
	                        s1 = peg$c84();
	                    }
	                    s0 = s1;
	                    if (s0 === peg$FAILED) {
	                        s0 = peg$currPos;
	                        if (input.charCodeAt(peg$currPos) === 60) {
	                            s1 = peg$c85;
	                            peg$currPos++;
	                        } else {
	                            s1 = peg$FAILED;
	                            if (peg$silentFails === 0) {
	                                peg$fail(peg$c86);
	                            }
	                        }
	                        if (s1 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c87();
	                        }
	                        s0 = s1;
	                    }
	                }
	            }
	
	            return s0;
	        }
	
	        function peg$parseMutation() {
	            var s0, s1, s2, s3;
	
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c88) {
	                s1 = input.substr(peg$currPos, 8);
	                peg$currPos += 8;
	            } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                    peg$fail(peg$c89);
	                }
	            }
	            if (s1 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c90();
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c91) {
	                    s1 = input.substr(peg$currPos, 8);
	                    peg$currPos += 8;
	                } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) {
	                        peg$fail(peg$c92);
	                    }
	                }
	                if (s1 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c93();
	                }
	                s0 = s1;
	                if (s0 === peg$FAILED) {
	                    s0 = peg$currPos;
	                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c94) {
	                        s1 = input.substr(peg$currPos, 8);
	                        peg$currPos += 8;
	                    } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                            peg$fail(peg$c95);
	                        }
	                    }
	                    if (s1 !== peg$FAILED) {
	                        peg$reportedPos = s0;
	                        s1 = peg$c96();
	                    }
	                    s0 = s1;
	                    if (s0 === peg$FAILED) {
	                        s0 = peg$currPos;
	                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c97) {
	                            s1 = input.substr(peg$currPos, 7);
	                            peg$currPos += 7;
	                        } else {
	                            s1 = peg$FAILED;
	                            if (peg$silentFails === 0) {
	                                peg$fail(peg$c98);
	                            }
	                        }
	                        if (s1 !== peg$FAILED) {
	                            peg$reportedPos = s0;
	                            s1 = peg$c99();
	                        }
	                        s0 = s1;
	                        if (s0 === peg$FAILED) {
	                            s0 = peg$currPos;
	                            if (input.substr(peg$currPos, 10).toLowerCase() === peg$c100) {
	                                s1 = input.substr(peg$currPos, 10);
	                                peg$currPos += 10;
	                            } else {
	                                s1 = peg$FAILED;
	                                if (peg$silentFails === 0) {
	                                    peg$fail(peg$c101);
	                                }
	                            }
	                            if (s1 !== peg$FAILED) {
	                                peg$reportedPos = s0;
	                                s1 = peg$c102();
	                            }
	                            s0 = s1;
	                            if (s0 === peg$FAILED) {
	                                s0 = peg$currPos;
	                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c103) {
	                                    s1 = input.substr(peg$currPos, 7);
	                                    peg$currPos += 7;
	                                } else {
	                                    s1 = peg$FAILED;
	                                    if (peg$silentFails === 0) {
	                                        peg$fail(peg$c104);
	                                    }
	                                }
	                                if (s1 !== peg$FAILED) {
	                                    peg$reportedPos = s0;
	                                    s1 = peg$c105();
	                                }
	                                s0 = s1;
	                                if (s0 === peg$FAILED) {
	                                    s0 = peg$currPos;
	                                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c106) {
	                                        s1 = input.substr(peg$currPos, 6);
	                                        peg$currPos += 6;
	                                    } else {
	                                        s1 = peg$FAILED;
	                                        if (peg$silentFails === 0) {
	                                            peg$fail(peg$c107);
	                                        }
	                                    }
	                                    if (s1 !== peg$FAILED) {
	                                        peg$reportedPos = s0;
	                                        s1 = peg$c108();
	                                    }
	                                    s0 = s1;
	                                    if (s0 === peg$FAILED) {
	                                        s0 = peg$currPos;
	                                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c109) {
	                                            s1 = input.substr(peg$currPos, 5);
	                                            peg$currPos += 5;
	                                        } else {
	                                            s1 = peg$FAILED;
	                                            if (peg$silentFails === 0) {
	                                                peg$fail(peg$c110);
	                                            }
	                                        }
	                                        if (s1 !== peg$FAILED) {
	                                            peg$reportedPos = s0;
	                                            s1 = peg$c111();
	                                        }
	                                        s0 = s1;
	                                        if (s0 === peg$FAILED) {
	                                            s0 = peg$currPos;
	                                            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c112) {
	                                                s1 = input.substr(peg$currPos, 8);
	                                                peg$currPos += 8;
	                                            } else {
	                                                s1 = peg$FAILED;
	                                                if (peg$silentFails === 0) {
	                                                    peg$fail(peg$c113);
	                                                }
	                                            }
	                                            if (s1 !== peg$FAILED) {
	                                                peg$reportedPos = s0;
	                                                s1 = peg$c114();
	                                            }
	                                            s0 = s1;
	                                            if (s0 === peg$FAILED) {
	                                                s0 = peg$currPos;
	                                                s1 = peg$parseAminoAcid();
	                                                if (s1 !== peg$FAILED) {
	                                                    s2 = peg$parseNaturalNumber();
	                                                    if (s2 !== peg$FAILED) {
	                                                        s3 = peg$parseString();
	                                                        if (s3 !== peg$FAILED) {
	                                                            peg$reportedPos = s0;
	                                                            s1 = peg$c115(s1, s2, s3);
	                                                            s0 = s1;
	                                                        } else {
	                                                            peg$currPos = s0;
	                                                            s0 = peg$c1;
	                                                        }
	                                                    } else {
	                                                        peg$currPos = s0;
	                                                        s0 = peg$c1;
	                                                    }
	                                                } else {
	                                                    peg$currPos = s0;
	                                                    s0 = peg$c1;
	                                                }
	                                                if (s0 === peg$FAILED) {
	                                                    s0 = peg$currPos;
	                                                    s1 = peg$parseAminoAcid();
	                                                    if (s1 !== peg$FAILED) {
	                                                        s2 = peg$parseNaturalNumber();
	                                                        if (s2 !== peg$FAILED) {
	                                                            peg$reportedPos = s0;
	                                                            s1 = peg$c116(s1, s2);
	                                                            s0 = s1;
	                                                        } else {
	                                                            peg$currPos = s0;
	                                                            s0 = peg$c1;
	                                                        }
	                                                    } else {
	                                                        peg$currPos = s0;
	                                                        s0 = peg$c1;
	                                                    }
	                                                    if (s0 === peg$FAILED) {
	                                                        s0 = peg$currPos;
	                                                        s1 = peg$parseString();
	                                                        if (s1 !== peg$FAILED) {
	                                                            peg$reportedPos = s0;
	                                                            s1 = peg$c117(s1);
	                                                        }
	                                                        s0 = s1;
	                                                    }
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	
	            return s0;
	        }
	
	        peg$result = peg$startRuleFunction();
	
	        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	            return peg$result;
	        } else {
	            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	                peg$fail({ type: "end", description: "end of input" });
	            }
	
	            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
	        }
	    }
	
	    return {
	        SyntaxError: SyntaxError,
	        parse: parse
	    };
	}();
	
	exports.default = oql_parser;

/***/ },

/***/ 937:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _utils = __webpack_require__(930);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var makeComparatorMetric = function makeComparatorMetric(array_spec) {
	    var metric = {};
	    for (var i = 0; i < array_spec.length; i++) {
	        var equiv_values = [].concat(array_spec[i]);
	        for (var j = 0; j < equiv_values.length; j++) {
	            metric[equiv_values[j]] = i;
	        }
	    }
	    return metric;
	};
	
	var comparator_utils = {
	    'makeGeneticComparator': function makeGeneticComparator(distinguish_mutation_types, distinguish_recurrent) {
	        var fusion_key = 'disp_fusion';
	        var cna_key = 'disp_cna';
	        var cna_order = makeComparatorMetric(['amp', 'homdel', 'gain', 'hetloss', 'diploid', undefined]);
	        var mut_type_key = 'disp_mut';
	        var mut_order = function () {
	            var _order;
	            if (!distinguish_mutation_types && !distinguish_recurrent) {
	                return function (m) {
	                    return { 'true': 1, 'false': 2 }[!!m];
	                };
	            } else if (!distinguish_mutation_types && distinguish_recurrent) {
	                _order = makeComparatorMetric([['inframe_rec', 'missense_rec', 'promoter_rec'], ['inframe', 'missense', 'promoter', 'trunc', 'trunc_rec'], undefined]);
	            } else if (distinguish_mutation_types && !distinguish_recurrent) {
	                _order = makeComparatorMetric([['trunc', 'trunc_rec'], ['inframe', 'inframe_rec'], ['promoter', 'promoter_rec'], ['missense', 'missense_rec'], undefined, true, false]);
	            } else if (distinguish_mutation_types && distinguish_recurrent) {
	                _order = makeComparatorMetric([['trunc', 'trunc_rec'], 'inframe_rec', 'promoter_rec', 'missense_rec', 'inframe', 'promoter', 'missense', undefined, true, false]);
	            }
	            return function (m) {
	                return _order[m];
	            };
	        }();
	        var mrna_key = 'disp_mrna';
	        var rppa_key = 'disp_prot';
	        var regulation_order = makeComparatorMetric(['up', 'down', undefined]);
	
	        return function (d1, d2) {
	            // First, test fusion
	            if (d1[fusion_key] && !d2[fusion_key]) {
	                return -1;
	            } else if (!d1[fusion_key] && d2[fusion_key]) {
	                return 1;
	            }
	
	            // Next, CNA
	            var cna_diff = _utils2.default.sign(cna_order[d1[cna_key]] - cna_order[d2[cna_key]]);
	            if (cna_diff !== 0) {
	                return cna_diff;
	            }
	
	            // Next, mutation type
	            var mut_type_diff = _utils2.default.sign(mut_order(d1[mut_type_key]) - mut_order(d2[mut_type_key]));
	            if (mut_type_diff !== 0) {
	                return mut_type_diff;
	            }
	
	            // Next, mrna expression
	            var mrna_diff = _utils2.default.sign(regulation_order[d1[mrna_key]] - regulation_order[d2[mrna_key]]);
	            if (mrna_diff !== 0) {
	                return mrna_diff;
	            }
	
	            // Next, protein expression
	            var rppa_diff = _utils2.default.sign(regulation_order[d1[rppa_key]] - regulation_order[d2[rppa_key]]);
	            if (rppa_diff !== 0) {
	                return rppa_diff;
	            }
	
	            // If we reach this point, there's no order difference
	            return 0;
	        };
	    },
	    'numericalClinicalComparator': function numericalClinicalComparator(d1, d2) {
	        if (d1.na && d2.na) {
	            return 0;
	        } else if (d1.na && !d2.na) {
	            return 2;
	        } else if (!d1.na && d2.na) {
	            return -2;
	        } else {
	            return d1.attr_val < d2.attr_val ? -1 : d1.attr_val === d2.attr_val ? 0 : 1;
	        }
	    },
	    'stringClinicalComparator': function stringClinicalComparator(d1, d2) {
	        if (d1.na && d2.na) {
	            return 0;
	        } else if (d1.na && !d2.na) {
	            return 2;
	        } else if (!d1.na && d2.na) {
	            return -2;
	        } else {
	            return d1.attr_val.localeCompare(d2.attr_val);
	        }
	    },
	    'makeCountsMapClinicalComparator': function makeCountsMapClinicalComparator(categories) {
	        return function (d1, d2) {
	            if (d1.na && d2.na) {
	                return 0;
	            } else if (d1.na && !d2.na) {
	                return 2;
	            } else if (!d1.na && d2.na) {
	                return -2;
	            } else {
	                var d1_total = 0;
	                var d2_total = 0;
	                for (var i = 0; i < categories.length; i++) {
	                    d1_total += d1.attr_val[categories[i]] || 0;
	                    d2_total += d2.attr_val[categories[i]] || 0;
	                }
	                if (d1_total === 0 && d2_total === 0) {
	                    return 0;
	                } else if (d1_total === 0) {
	                    return 1;
	                } else if (d2_total === 0) {
	                    return -1;
	                } else {
	                    var d1_max_category = 0;
	                    var d2_max_category = 0;
	                    for (var i = 0; i < categories.length; i++) {
	                        if (d1.attr_val[categories[i]] > d1.attr_val[categories[d1_max_category]]) {
	                            d1_max_category = i;
	                        }
	                        if (d2.attr_val[categories[i]] > d2.attr_val[categories[d2_max_category]]) {
	                            d2_max_category = i;
	                        }
	                    }
	                    if (d1_max_category < d2_max_category) {
	                        return -1;
	                    } else if (d1_max_category > d2_max_category) {
	                        return 1;
	                    } else {
	                        var cmp_category = categories[d1_max_category];
	                        var d1_prop = d1.attr_val[cmp_category] / d1_total;
	                        var d2_prop = d2.attr_val[cmp_category] / d2_total;
	                        return _utils2.default.sign(d1_prop - d2_prop);
	                    }
	                }
	            }
	        };
	    }
	
	};
	
	exports.default = comparator_utils;

/***/ },

/***/ 938:
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var ClinicalData = function () {
	    var sample_clinical_data = {}; // attr_id -> list of data
	    var patient_clinical_data = {}; // attr_id -> list of data
	
	    var fetchData = function fetchData(attr) {
	        var def = new $.Deferred();
	        $.when(QuerySession.getSampleClinicalData([attr.attr_id]), QuerySession.getPatientClinicalData([attr.attr_id])).then(function (sample_data, patient_data) {
	            sample_clinical_data[attr.attr_id] = sample_data;
	            patient_clinical_data[attr.attr_id] = patient_data;
	            def.resolve();
	        }).fail(function () {
	            def.reject();
	        });
	        return def.promise();
	    };
	    return {
	        getSampleData: function getSampleData(attrs) {
	            attrs = [].concat(attrs);
	            var def = new $.Deferred();
	            var ret = {};
	            if (attrs.length === 0) {
	                def.resolve({});
	            }
	            for (var i = 0; i < attrs.length; i++) {
	                var attr = attrs[i];
	                if (sample_clinical_data.hasOwnProperty(attr.attr_id)) {
	                    ret[attr.attr_id] = sample_clinical_data[attr.attr_id];
	                    if (Object.keys(ret).length === attrs.length) {
	                        def.resolve(ret);
	                    }
	                } else {
	                    fetchData(attr).then(function (_attr) {
	                        return function () {
	                            ret[_attr.attr_id] = sample_clinical_data[_attr.attr_id];
	                            if (Object.keys(ret).length === attrs.length) {
	                                def.resolve(ret);
	                            }
	                        };
	                    }(attr)).fail(function () {
	                        def.reject();
	                    });
	                }
	            }
	            return def.promise();
	        },
	        getPatientData: function getPatientData(attrs) {
	            attrs = [].concat(attrs);
	            var def = new $.Deferred();
	            var ret = {};
	            if (attrs.length === 0) {
	                def.resolve({});
	            }
	            for (var i = 0; i < attrs.length; i++) {
	                var attr = attrs[i];
	                if (patient_clinical_data.hasOwnProperty(attr.attr_id)) {
	                    ret[attr.attr_id] = patient_clinical_data[attr.attr_id];
	                    if (Object.keys(ret).length === attrs.length) {
	                        def.resolve(ret);
	                    }
	                } else {
	                    fetchData(attr).then(function (_attr) {
	                        return function () {
	                            ret[_attr.attr_id] = patient_clinical_data[_attr.attr_id];
	                            if (Object.keys(ret).length === attrs.length) {
	                                def.resolve(ret);
	                            }
	                        };
	                    }(attr)).fail(function () {
	                        def.reject();
	                    });
	                }
	            }
	            return def.promise();
	        }
	    };
	}();
	
	exports.default = ClinicalData;

/***/ },

/***/ 939:
/***/ function(module, exports, __webpack_require__) {

	var require;var require;"use strict";(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f;}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e);},l,l.exports,e,t,n,r);}return n[o].exports;}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++){s(r[o]);}return s;})({1:[function(require,module,exports){var CachedProperty=function(){function CachedProperty(init_val,updateFn){this.value=init_val;this.updateFn=updateFn;this.bound_properties=[];}CachedProperty.prototype.update=function(){this.value=this.updateFn.apply(null,arguments);for(var i=0;i<this.bound_properties.length;i++){this.bound_properties[i].update();}};CachedProperty.prototype.get=function(){return this.value;};CachedProperty.prototype.updateAndGet=function(){this.update();return this.get();};CachedProperty.prototype.addBoundProperty=function(cached_property){this.bound_properties.push(cached_property);};return CachedProperty;}();module.exports=CachedProperty;},{}],2:[function(require,module,exports){module.exports=function(array,target_key,keyFn,return_closest_if_not_found){var upper_excl=array.length;var lower_incl=0;var middle;while(lower_incl<upper_excl){middle=Math.floor((upper_excl+lower_incl)/2);var middle_key=keyFn(array[middle]);if(middle_key===target_key){return middle;}else if(target_key>middle_key){lower_incl=middle+1;}else if(target_key<middle_key){upper_excl=middle;}}if(return_closest_if_not_found){return lower_incl-1;}else{return null;}};},{}],3:[function(require,module,exports){window.Oncoprint=require('./oncoprint.js');},{"./oncoprint.js":5}],4:[function(require,module,exports){module.exports=function(tag,attrs){var el=document.createElementNS('http://www.w3.org/2000/svg',tag);for(var k in attrs){if(attrs.hasOwnProperty(k)){el.setAttribute(k,attrs[k]);}}return el;};},{}],5:[function(require,module,exports){var OncoprintModel=require('./oncoprintmodel.js');var OncoprintWebGLCellView=require('./oncoprintwebglcellview.js');var OncoprintLabelView=require('./oncoprintlabelview.js');var OncoprintRuleSet=require('./oncoprintruleset.js');var OncoprintTrackOptionsView=require('./oncoprinttrackoptionsview.js');var OncoprintLegendView=require('./oncoprintlegendrenderer.js');//TODO: rename
	var OncoprintToolTip=require('./oncoprinttooltip.js');var OncoprintTrackInfoView=require('./oncoprinttrackinfoview.js');var svgfactory=require('./svgfactory.js');var Oncoprint=function(){// this is the controller
	var nextTrackId=function(){var ctr=0;return function(){ctr+=1;return ctr;};}();function Oncoprint(ctr_selector,width){var self=this;this.ctr_selector=ctr_selector;var $oncoprint_ctr=$('<span></span>').css({'position':'relative','display':'inline-block'}).appendTo(ctr_selector);var $label_canvas=$('<canvas></canvas>').css({'display':'inline-block','position':'absolute','left':'0px','top':'0px'}).addClass("noselect").attr({'width':'150','height':'250'});var $track_options_div=$('<div></div>').css({'position':'absolute','left':'150px','top':'0px'}).addClass("noselect").attr({'width':'50','height':'250'});var $legend_div=$('<div></div>').css({'position':'absolute','top':'250px'}).addClass("noselect");var $cell_div=$('<div>').css({'width':width,'overflow-x':'scroll','overflow-y':'hidden','display':'inline-block','position':'absolute','left':'200px','top':'0px'}).addClass("noselect");var $cell_canvas=$('<canvas></canvas>').attr('width',width).css({'position':'absolute','top':'0px','left':'0px'}).addClass("noselect");var $dummy_scroll_div=$('<div>').css({'position':'absolute','top':'0','left':'0px','height':'1px'});var $cell_overlay_canvas=$('<canvas></canvas>').attr('width',width).css({'position':'absolute','top':'0px','left':'0px'}).addClass("noselect");var $track_info_div=$('<div>').css({'position':'absolute'});$label_canvas.appendTo($oncoprint_ctr);$cell_div.appendTo($oncoprint_ctr);$track_options_div.appendTo($oncoprint_ctr);$track_info_div.appendTo($oncoprint_ctr);$legend_div.appendTo($oncoprint_ctr);$cell_canvas.appendTo($cell_div);$dummy_scroll_div.appendTo($cell_div);$cell_overlay_canvas.appendTo($cell_div);this.$container=$oncoprint_ctr;this.$cell_div=$cell_div;this.$legend_div=$legend_div;this.$track_options_div=$track_options_div;this.$track_info_div=$track_info_div;this.model=new OncoprintModel();// Precisely one of the following should be uncommented
	// this.cell_view = new OncoprintSVGCellView($svg_dev);
	this.cell_view=new OncoprintWebGLCellView($cell_div,$cell_canvas,$cell_overlay_canvas,$dummy_scroll_div,this.model,new OncoprintToolTip($oncoprint_ctr),function(left,right){var enclosed_ids=self.model.getIdsInLeftInterval(left,right);self.setHorzZoom(self.model.getHorzZoomToFit(self.cell_view.visible_area_width,enclosed_ids));self.$cell_div.scrollLeft(self.model.getZoomedColumnLeft(enclosed_ids[0]));self.id_clipboard=enclosed_ids;});this.track_options_view=new OncoprintTrackOptionsView($track_options_div,function(track_id){// move up
	var tracks=self.model.getContainingTrackGroup(track_id);var index=tracks.indexOf(track_id);if(index>0){var new_previous_track=null;if(index>=2){new_previous_track=tracks[index-2];}self.moveTrack(track_id,new_previous_track);}},function(track_id){// move down
	var tracks=self.model.getContainingTrackGroup(track_id);var index=tracks.indexOf(track_id);if(index<tracks.length-1){self.moveTrack(track_id,tracks[index+1]);}},function(track_id){self.removeTrack(track_id);},function(track_id,dir){self.setTrackSortDirection(track_id,dir);});this.track_info_view=new OncoprintTrackInfoView($track_info_div);//this.track_info_view = new OncoprintTrackInfoView($track_info_div);
	this.label_view=new OncoprintLabelView($label_canvas,this.model,new OncoprintToolTip($oncoprint_ctr,{noselect:true}));this.label_view.setDragCallback(function(target_track,new_previous_track){self.moveTrack(target_track,new_previous_track);});this.legend_view=new OncoprintLegendView($legend_div,10,20);this.rendering_suppressed=false;this.rendering_suppressed_depth=0;this.keep_sorted=false;this.keep_horz_zoomed_to_fit=false;this.keep_horz_zoomed_to_fit_ids=[];// We need to handle scrolling this way because for some reason huge
	//  canvas elements have terrible resolution.
	var cell_view=this.cell_view;var model=this.model;$cell_div.scroll(function(){self.keep_horz_zoomed_to_fit=false;self.keep_horz_zoomed_to_fit_ids=[];});this.horz_zoom_callbacks=[];$(window).resize(function(){resizeAndOrganize(self);});this.id_clipboard=[];this.clipboard_change_callbacks=[];}var resizeLegendAfterTimeout=function resizeLegendAfterTimeout(oncoprint){setTimeout(function(){oncoprint.$container.css({'min-height':oncoprint.model.getCellViewHeight()+oncoprint.$legend_div.height()+20});oncoprint.$legend_div.css({'top':oncoprint.model.getCellViewHeight()+20});},0);};var resizeAndOrganize=function resizeAndOrganize(oncoprint){var ctr_width=$(oncoprint.ctr_selector).width();oncoprint.$container.css({'min-height':oncoprint.model.getCellViewHeight()+oncoprint.$legend_div.height()+20});oncoprint.$track_options_div.css({'left':oncoprint.label_view.getWidth()});oncoprint.$track_info_div.css({'left':oncoprint.label_view.getWidth()+oncoprint.track_options_view.getWidth()});var cell_div_left=oncoprint.label_view.getWidth()+oncoprint.track_options_view.getWidth()+oncoprint.track_info_view.getWidth();oncoprint.$cell_div.css({'left':cell_div_left});oncoprint.cell_view.setWidth(ctr_width-cell_div_left-20,oncoprint.model);oncoprint.$legend_div.css({'top':oncoprint.model.getCellViewHeight()+20});oncoprint.legend_view.setWidth(ctr_width,oncoprint.model);setTimeout(function(){if(oncoprint.keep_horz_zoomed_to_fit){updateHorzZoomToFit(oncoprint);}},0);};var resizeAndOrganizeAfterTimeout=function resizeAndOrganizeAfterTimeout(oncoprint){setTimeout(function(){resizeAndOrganize(oncoprint);},0);};Oncoprint.prototype.scrollTo=function(left){this.$cell_div.scrollLeft(left);};Oncoprint.prototype.onHorzZoom=function(callback){this.horz_zoom_callbacks.push(callback);};Oncoprint.prototype.moveTrack=function(target_track,new_previous_track){this.model.moveTrack(target_track,new_previous_track);this.cell_view.moveTrack(this.model);this.label_view.moveTrack(this.model);this.track_options_view.moveTrack(this.model);this.track_info_view.moveTrack(this.model);if(this.keep_sorted){this.sort();}resizeAndOrganizeAfterTimeout(this);};Oncoprint.prototype.keepSorted=function(keep_sorted){this.keep_sorted=typeof keep_sorted==='undefined'?true:keep_sorted;if(this.keep_sorted){this.sort();}};Oncoprint.prototype.addTracks=function(params_list){// Update model
	var track_ids=[];params_list=params_list.map(function(o){o.track_id=nextTrackId();o.rule_set=OncoprintRuleSet(o.rule_set_params);track_ids.push(o.track_id);return o;});this.model.addTracks(params_list);// Update views
	this.cell_view.addTracks(this.model,track_ids);this.label_view.addTracks(this.model,track_ids);this.track_options_view.addTracks(this.model);this.track_info_view.addTracks(this.model);this.legend_view.addTracks(this.model);if(this.keep_sorted){this.sort();}if(!this.rendering_suppressed){resizeAndOrganizeAfterTimeout(this);}return track_ids;};Oncoprint.prototype.removeTrack=function(track_id){// Update model
	this.model.removeTrack(track_id);// Update views
	this.cell_view.removeTrack(this.model,track_id);this.label_view.removeTrack(this.model,track_id);this.track_options_view.removeTrack(this.model,track_id);this.track_info_view.removeTrack(this.model);this.legend_view.removeTrack(this.model);if(this.keep_sorted){this.sort();}resizeAndOrganizeAfterTimeout(this);};Oncoprint.prototype.removeAllTracks=function(){var track_ids=this.model.getTracks();for(var i=0;i<track_ids.length;i++){this.removeTrack(track_ids[i]);}};Oncoprint.prototype.setHorzZoomToFit=function(ids){this.keep_horz_zoomed_to_fit=true;this.keep_horz_zoomed_to_fit_ids=ids;updateHorzZoomToFit(this);};Oncoprint.prototype.updateHorzZoomToFitIds=function(ids){this.keep_horz_zoomed_to_fit_ids=ids;};var updateHorzZoomToFit=function updateHorzZoomToFit(oncoprint){oncoprint.setHorzZoom(getHorzZoomToFit(oncoprint,oncoprint.keep_horz_zoomed_to_fit_ids));};var getHorzZoomToFit=function getHorzZoomToFit(oncoprint,ids){ids=ids||[];return oncoprint.model.getHorzZoomToFit(oncoprint.cell_view.visible_area_width,ids);};Oncoprint.prototype.getHorzZoom=function(){return this.model.getHorzZoom();};Oncoprint.prototype.getMinZoom=function(){return this.model.getMinZoom();};Oncoprint.prototype.setHorzZoom=function(z){this.keep_zoomed_to_fit=false;this.keep_zoomed_to_fit_ids=[];// Update model
	this.model.setHorzZoom(z);// Update views
	this.cell_view.setHorzZoom(this.model);for(var i=0;i<this.horz_zoom_callbacks.length;i++){this.horz_zoom_callbacks[i](this.model.getHorzZoom());}return this.model.getHorzZoom();};Oncoprint.prototype.getVertZoom=function(){return this.model.getVertZoom();};Oncoprint.prototype.setVertZoom=function(z){// Update model
	this.model.setVertZoom(z);// Update views
	this.cell_view.setVertZoom(this.model,z);this.label_view.setVertZoom(this.model,z);resizeAndOrganizeAfterTimeout(this);return this.model.getVertZoom();};Oncoprint.prototype.getTrackData=function(track_id){return this.model.getTrackData(track_id);};Oncoprint.prototype.getTrackDataIdKey=function(track_id){return this.model.getTrackDataIdKey(track_id);};Oncoprint.prototype.setTrackData=function(track_id,data,data_id_key){this.model.setTrackData(track_id,data,data_id_key);this.cell_view.setTrackData(this.model,track_id);this.legend_view.setTrackData(this.model);if(this.keep_sorted){this.sort();}resizeAndOrganizeAfterTimeout(this);};Oncoprint.prototype.setTrackGroupSortPriority=function(priority){this.model.setTrackGroupSortPriority(priority);this.cell_view.setTrackGroupSortPriority(this.model);if(this.keep_sorted){this.sort();}resizeAndOrganizeAfterTimeout(this);};Oncoprint.prototype.setTrackSortDirection=function(track_id,dir){if(this.model.isTrackSortDirectionChangeable(track_id)){this.model.setTrackSortDirection(track_id,dir);if(this.keep_sorted){this.sort();}}return this.model.getTrackSortDirection(track_id);};Oncoprint.prototype.setTrackSortComparator=function(track_id,sortCmpFn){this.model.setTrackSortComparator(track_id,sortCmpFn);if(this.keep_sorted){this.sort();}};Oncoprint.prototype.getTrackSortDirection=function(track_id){return this.model.getTrackSortDirection(track_id);};Oncoprint.prototype.setTrackInfo=function(track_id,msg){this.model.setTrackInfo(track_id,msg);this.track_info_view.setTrackInfo(this.model);};Oncoprint.prototype.setTrackTooltipFn=function(track_id,tooltipFn){this.model.setTrackTooltipFn(track_id,tooltipFn);};Oncoprint.prototype.sort=function(){this.model.sort();this.cell_view.sort(this.model);};Oncoprint.prototype.shareRuleSet=function(source_track_id,target_track_id){this.model.shareRuleSet(source_track_id,target_track_id);this.cell_view.shareRuleSet(this.model,target_track_id);this.legend_view.shareRuleSet(this.model);};Oncoprint.prototype.setRuleSet=function(track_id,rule_set_params){this.model.setRuleSet(track_id,OncoprintRuleSet(rule_set_params));this.cell_view.setRuleSet(this.model,track_id);this.legend_view.setRuleSet(this.model);resizeAndOrganizeAfterTimeout(this);};Oncoprint.prototype.setSortConfig=function(params){this.model.setSortConfig(params);this.cell_view.setSortConfig(this.model);if(this.keep_sorted){this.sort();}};Oncoprint.prototype.setIdOrder=function(ids){// Update model
	this.model.setIdOrder(ids);// Update views
	this.cell_view.setIdOrder(this.model,ids);if(this.keep_sorted){this.sort();}};Oncoprint.prototype.disableInteraction=function(){//this.label_view.disableInteraction();
	//this.cell_view.disableInteraction();
	this.track_options_view.disableInteraction();//this.track_info_view.disableInteraction();
	//this.legend_view.disableInteraction();
	};Oncoprint.prototype.enableInteraction=function(){//this.label_view.enableInteraction();
	//this.cell_view.enableInteraction();
	this.track_options_view.enableInteraction();//this.track_info_view.enableInteraction();
	//this.legend_view.enableInteraction();
	};Oncoprint.prototype.suppressRendering=function(){this.rendering_suppressed_depth+=1;this.rendering_suppressed=true;this.label_view.suppressRendering();this.cell_view.suppressRendering();this.track_options_view.suppressRendering();this.track_info_view.suppressRendering();this.legend_view.suppressRendering();};Oncoprint.prototype.releaseRendering=function(){this.rendering_suppressed_depth-=1;this.rendering_suppressed_depth=Math.max(0,this.rendering_suppressed_depth);if(this.rendering_suppressed_depth===0){this.rendering_suppressed=false;this.label_view.releaseRendering(this.model);this.cell_view.releaseRendering(this.model);this.track_options_view.releaseRendering(this.model);this.track_info_view.releaseRendering(this.model);this.legend_view.releaseRendering(this.model);resizeAndOrganizeAfterTimeout(this);}};Oncoprint.prototype.hideIds=function(to_hide,show_others){this.model.hideIds(to_hide,show_others);this.cell_view.hideIds(this.model);};Oncoprint.prototype.hideTrackLegends=function(track_ids){track_ids=[].concat(track_ids);this.model.hideTrackLegends(track_ids);this.legend_view.hideTrackLegends(this.model);resizeLegendAfterTimeout(this);};Oncoprint.prototype.showTrackLegends=function(track_ids){track_ids=[].concat(track_ids);this.model.showTrackLegends(track_ids);this.legend_view.showTrackLegends(this.model);resizeLegendAfterTimeout(this);};Oncoprint.prototype.setCellPaddingOn=function(cell_padding_on){this.model.setCellPaddingOn(cell_padding_on);this.cell_view.setCellPaddingOn(this.model);};Oncoprint.prototype.toSVG=function(with_background){// Returns svg DOM element
	var root=svgfactory.svg(10,10);this.$container.append(root);var everything_group=svgfactory.group(0,0);root.appendChild(everything_group);var bgrect=svgfactory.bgrect(10,10,'#ffffff');if(with_background){everything_group.appendChild(bgrect);}var label_view_group=this.label_view.toSVGGroup(this.model,true,0,0);everything_group.appendChild(label_view_group);var track_info_group_x=label_view_group.getBBox().width+30;var track_info_group=this.track_info_view.toSVGGroup(this.model,track_info_group_x,0);everything_group.appendChild(track_info_group);var cell_view_group_x=track_info_group_x+track_info_group.getBBox().width+10;everything_group.appendChild(this.cell_view.toSVGGroup(this.model,cell_view_group_x,0));everything_group.appendChild(this.legend_view.toSVGGroup(this.model,0,label_view_group.getBBox().y+label_view_group.getBBox().height+20));var everything_box=everything_group.getBBox();var everything_width=everything_box.x+everything_box.width;var everything_height=everything_box.y+everything_box.height;root.setAttribute('width',everything_width);root.setAttribute('height',everything_height);if(with_background){bgrect.setAttribute('width',everything_width);bgrect.setAttribute('height',everything_height);}root.parentNode.removeChild(root);return root;};Oncoprint.prototype.toCanvas=function(callback,resolution){// Returns data url, requires IE >= 11
	var MAX_CANVAS_SIDE=8192;var svg=this.toSVG(true);svg.setAttribute('xmlns','http://www.w3.org/2000/svg');var width=parseInt(svg.getAttribute('width'),10);var height=parseInt(svg.getAttribute('height'),10);var canvas=document.createElement('canvas');resolution=resolution||1;var truncated=width*resolution>MAX_CANVAS_SIDE||height*resolution>MAX_CANVAS_SIDE;canvas.setAttribute('width',Math.min(MAX_CANVAS_SIDE,width*resolution));canvas.setAttribute('height',Math.min(MAX_CANVAS_SIDE,height*resolution));var container=document.createElement("div");container.appendChild(svg);var svg_data_str=container.innerHTML;var svg_data_uri="data:image/svg+xml;base64,"+window.btoa(svg_data_str);var ctx=canvas.getContext('2d');ctx.setTransform(resolution,0,0,resolution,0,0);var img=new Image();img.onload=function(){ctx.drawImage(img,0,0);callback(canvas,truncated);};img.onerror=function(){console.log("IMAGE LOAD ERROR");};img.src=svg_data_uri;return img;};Oncoprint.prototype.getIdOrder=function(all){return this.model.getIdOrder(all);};Oncoprint.prototype.setIdClipboardContents=function(array){this.id_clipboard=array.slice();for(var i=0;i<this.clipboard_change_callbacks.length;i++){this.clipboard_change_callbacks[i](array);}};Oncoprint.prototype.getIdClipboardContents=function(){return this.id_clipboard.slice();};Oncoprint.prototype.onClipboardChange=function(callback){this.clipboard_change_callbacks.push(callback);};return Oncoprint;}();module.exports=Oncoprint;},{"./oncoprintlabelview.js":6,"./oncoprintlegendrenderer.js":7,"./oncoprintmodel.js":8,"./oncoprintruleset.js":9,"./oncoprinttooltip.js":12,"./oncoprinttrackinfoview.js":13,"./oncoprinttrackoptionsview.js":14,"./oncoprintwebglcellview.js":15,"./svgfactory.js":16}],6:[function(require,module,exports){var svgfactory=require('./svgfactory.js');var OncoprintLabelView=function(){function OncoprintLabelView($canvas,model,tooltip){var view=this;this.supersampling_ratio=2;this.$canvas=$canvas;this.base_font_size=14;this.model=model;this.tooltip=tooltip;this.tooltip.center=false;// stuff from model
	this.cell_tops={};this.cell_tops_view_space={};this.cell_heights={};this.cell_heights_view_space={};this.labels={};this.track_descriptions={};this.tracks=[];this.minimum_track_height=Number.POSITIVE_INFINITY;this.maximum_label_width=Number.NEGATIVE_INFINITY;this.maximum_label_length=18;this.rendering_suppressed=false;setUpContext(this);(function setUpDragging(view){view.drag_callback=function(target_track,new_previous_track){};view.dragged_label_track_id=null;view.drag_mouse_y=null;view.$canvas.on("mousedown",function(evt){view.tooltip.hide();var track_id=isMouseOnLabel(view,evt.offsetY);if(track_id!==null&&model.getContainingTrackGroup(track_id).length>1){startDragging(view,track_id,evt.offsetY);}});view.$canvas.on("mousemove",function(evt){if(view.dragged_label_track_id!==null){var track_group=model.getContainingTrackGroup(view.dragged_label_track_id);view.drag_mouse_y=Math.min(evt.pageY-view.$canvas.offset().top,view.track_tops[track_group[track_group.length-1]]+model.getTrackHeight(track_group[track_group.length-1]));view.drag_mouse_y=Math.max(view.drag_mouse_y,view.track_tops[track_group[0]]-5);renderAllLabels(view);}else{var hovered_track=isMouseOnLabel(view,evt.pageY-view.$canvas.offset().top);if(hovered_track!==null){var tooltip_html_lines=[];var offset=view.$canvas.offset();if(isNecessaryToShortenLabel(view,view.labels[hovered_track])){tooltip_html_lines.push('<b>'+view.labels[hovered_track]+'</b>');}var track_description=view.track_descriptions[hovered_track].replace("<","&lt;").replace(">","&gt;");if(track_description.length>0){tooltip_html_lines.push(track_description);}if(model.getContainingTrackGroup(hovered_track).length>1){view.$canvas.css('cursor','move');tooltip_html_lines.push("<b>hold to drag</b>");}var tooltip_html=tooltip_html_lines.join("<br>");view.tooltip.fadeIn(200,renderedLabelWidth(view,view.labels[hovered_track])+offset.left,view.cell_tops[hovered_track]+offset.top,tooltip_html);}else{view.$canvas.css('cursor','auto');view.tooltip.hide();}}});view.$canvas.on("mouseup mouseleave",function(evt){if(view.dragged_label_track_id!==null){var track_group=model.getContainingTrackGroup(view.dragged_label_track_id);var previous_track_id=getLabelAboveMouseSpace(view,track_group,evt.offsetY,view.dragged_label_track_id);stopDragging(view,previous_track_id);}view.tooltip.hide();});})(this);}var renderedLabelWidth=function renderedLabelWidth(view,label){return view.ctx.measureText(shortenLabelIfNecessary(view,label)).width/view.supersampling_ratio;};var updateFromModel=function updateFromModel(view,model){view.track_tops=model.getTrackTops();view.cell_tops=model.getCellTops();view.cell_tops_view_space={};view.cell_heights={};view.tracks=model.getTracks();view.track_descriptions={};view.ctx.font='bold '+view.getFontSize()+'px Arial';view.minimum_track_height=Number.POSITIVE_INFINITY;view.maximum_label_width=0;for(var i=0;i<view.tracks.length;i++){view.minimum_track_height=Math.min(view.minimum_track_height,model.getTrackHeight(view.tracks[i]));var shortened_label=shortenLabelIfNecessary(view,view.labels[view.tracks[i]]);view.maximum_label_width=Math.max(view.maximum_label_width,view.ctx.measureText(shortened_label).width);view.cell_tops_view_space[view.tracks[i]]=view.cell_tops[view.tracks[i]]*view.supersampling_ratio;view.track_descriptions[view.tracks[i]]=model.getTrackDescription(view.tracks[i]);view.cell_heights[view.tracks[i]]=model.getCellHeight(view.tracks[i]);view.cell_heights_view_space[view.tracks[i]]=view.cell_heights[view.tracks[i]]*view.supersampling_ratio;}};var setUpContext=function setUpContext(view){view.ctx=view.$canvas[0].getContext('2d');view.ctx.textAlign="start";view.ctx.textBaseline="middle";};var resizeAndClear=function resizeAndClear(view,model){var visible_height=model.getCellViewHeight();var visible_width=view.getWidth();view.$canvas[0].height=view.supersampling_ratio*visible_height;view.$canvas[0].width=view.supersampling_ratio*visible_width;view.$canvas[0].style.height=visible_height+'px';view.$canvas[0].style.width=visible_width+'px';setUpContext(view);};var isNecessaryToShortenLabel=function isNecessaryToShortenLabel(view,label){return label.length>view.maximum_label_length;};var shortenLabelIfNecessary=function shortenLabelIfNecessary(view,label){if(isNecessaryToShortenLabel(view,label)){return label.substring(0,view.maximum_label_length-3)+'...';}else{return label;}};var renderAllLabels=function renderAllLabels(view){if(view.rendering_suppressed){return;}var font_size=view.getFontSize();view.ctx.font='bold '+font_size+'px Arial';view.ctx.clearRect(0,0,view.$canvas[0].width,view.$canvas[0].height);view.ctx.fillStyle='black';var tracks=view.tracks;for(var i=0;i<tracks.length;i++){view.ctx.fillText(shortenLabelIfNecessary(view,view.labels[tracks[i]]),0,view.cell_tops_view_space[tracks[i]]+view.cell_heights_view_space[tracks[i]]/2);}if(view.dragged_label_track_id!==null){view.ctx.fillStyle='rgba(255,0,0,0.95)';view.ctx.fillText(shortenLabelIfNecessary(view,view.labels[view.dragged_label_track_id]),0,view.supersampling_ratio*view.drag_mouse_y);view.ctx.fillStyle='rgba(0,0,0,0.15)';var group=view.model.getContainingTrackGroup(view.dragged_label_track_id);var label_above_mouse=getLabelAboveMouseSpace(view,group,view.drag_mouse_y,null);var label_below_mouse=getLabelBelowMouseSpace(view,group,view.drag_mouse_y,null);var rect_y,rect_height;if(label_above_mouse===view.dragged_label_track_id||label_below_mouse===view.dragged_label_track_id){return;}if(label_above_mouse!==null&&label_below_mouse!==null){rect_y=view.cell_tops_view_space[label_above_mouse]+view.cell_heights_view_space[label_above_mouse];rect_height=view.cell_tops_view_space[label_below_mouse]-rect_y;}else if(label_above_mouse===null){rect_y=view.cell_tops_view_space[group[0]]-view.ctx.measureText("m").width;rect_height=view.ctx.measureText("m").width;}else if(label_below_mouse===null){rect_y=view.cell_tops_view_space[group[group.length-1]]+view.cell_heights_view_space[group[group.length-1]];rect_height=view.ctx.measureText("m").width;}view.ctx.fillRect(0,rect_y,view.getWidth()*view.supersampling_ratio,rect_height);}};var isMouseOnLabel=function isMouseOnLabel(view,mouse_y){var candidate_track=getLabelAboveMouseSpace(view,view.tracks,mouse_y,null);if(candidate_track===null){return null;}if(mouse_y<=view.cell_tops[candidate_track]+view.cell_heights[candidate_track]){return candidate_track;}else{return null;}};var getLabelAboveMouseSpace=function getLabelAboveMouseSpace(view,track_ids,y,track_to_exclude){if(y<view.cell_tops[track_ids[0]]){return null;}else{var candidate_track=null;for(var i=0;i<track_ids.length;i++){if(track_to_exclude!==null&&track_to_exclude===track_ids[i]){continue;}if(view.cell_tops[track_ids[i]]>y){break;}else{candidate_track=track_ids[i];}}return candidate_track;}};var getLabelBelowMouseSpace=function getLabelBelowMouseSpace(view,track_ids,y,track_to_exclude){if(y>view.cell_tops[track_ids[track_ids.length-1]]){return null;}else{var candidate_track=null;for(var i=track_ids.length-1;i>=0;i--){if(track_to_exclude!==null&&track_to_exclude===track_ids[i]){continue;}if(view.cell_tops[track_ids[i]]<y){break;}else{candidate_track=track_ids[i];}}return candidate_track;}};var startDragging=function startDragging(view,track_id,mouse_y){view.dragged_label_track_id=track_id;view.drag_mouse_y=mouse_y;renderAllLabels(view);};var stopDragging=function stopDragging(view,new_previous_track_id){view.drag_callback(view.dragged_label_track_id,new_previous_track_id);view.dragged_label_track_id=null;renderAllLabels(view);};OncoprintLabelView.prototype.getWidth=function(){//return this.maximum_label_width + 20;
	return Math.max(this.maximum_label_width/this.supersampling_ratio+10,70);};OncoprintLabelView.prototype.getFontSize=function(no_supersampling_adjustment){return(no_supersampling_adjustment?1:this.supersampling_ratio)*Math.max(Math.min(this.base_font_size,this.minimum_track_height),7);};OncoprintLabelView.prototype.setDragCallback=function(callback){this.drag_callback=callback;};OncoprintLabelView.prototype.removeTrack=function(model,track_id){updateFromModel(this,model);resizeAndClear(this,model);renderAllLabels(this,model);};OncoprintLabelView.prototype.moveTrack=function(model){updateFromModel(this,model);resizeAndClear(this,model);renderAllLabels(this,model);};OncoprintLabelView.prototype.addTracks=function(model,track_ids){for(var i=0;i<track_ids.length;i++){this.labels[track_ids[i]]=model.getTrackLabel(track_ids[i]);}updateFromModel(this,model);resizeAndClear(this,model);renderAllLabels(this,model);};OncoprintLabelView.prototype.setVertZoom=function(model){updateFromModel(this,model);resizeAndClear(this,model);renderAllLabels(this,model);};OncoprintLabelView.prototype.suppressRendering=function(){this.rendering_suppressed=true;};OncoprintLabelView.prototype.releaseRendering=function(){this.rendering_suppressed=false;renderAllLabels(this);};OncoprintLabelView.prototype.toSVGGroup=function(model,full_labels,offset_x,offset_y){var root=svgfactory.group(offset_x||0,offset_y||0);var cell_tops=model.getCellTops();var tracks=model.getTracks();for(var i=0;i<tracks.length;i++){var track_id=tracks[i];var y=cell_tops[track_id]+model.getCellHeight(track_id)/2;var label=model.getTrackLabel(track_id);var text_elt=svgfactory.text(full_labels?label:shortenLabelIfNecessary(this,label),0,y,this.getFontSize(true),'Arial','bold',"bottom");text_elt.setAttribute("dy","0.35em");root.appendChild(text_elt);}return root;};return OncoprintLabelView;}();module.exports=OncoprintLabelView;},{"./svgfactory.js":16}],7:[function(require,module,exports){var svgfactory=require('./svgfactory.js');var nodeIsVisible=function nodeIsVisible(node){var ret=true;while(node.tagName.toLowerCase()!=="body"){if(!$(node).is(":visible")){ret=false;break;}node=node.parentNode;}return ret;};var OncoprintLegendView=function(){function OncoprintLegendView($div,base_width,base_height){this.$div=$div;this.$svg=$(svgfactory.svg(200,200)).appendTo(this.$div);this.base_width=base_width;this.base_height=base_height;this.rendering_suppressed=false;this.width=$div.width();this.rule_set_label_config={weight:'bold',size:12,font:'Arial'};this.rule_label_config={weight:'normal',size:12,font:'Arial'};this.padding_after_rule_set_label=10;this.padding_between_rules=20;this.padding_between_rule_set_rows=10;}var getMaximumLabelWidth=function getMaximumLabelWidth(view,model){var rule_sets=model.getRuleSets();var maximum=0;for(var i=0;i<rule_sets.length;i++){if(rule_sets[i].exclude_from_legend||typeof rule_sets[i].legend_label==='undefined'){continue;}var label=svgfactory.text(rule_sets[i].legend_label,0,0,view.rule_set_label_config.size,view.rule_set_label_config.font,view.rule_set_label_config.weight);view.$svg[0].appendChild(label);maximum=Math.max(maximum,label.getBBox().width);label.parentNode.removeChild(label);}return maximum;};var renderLegend=function renderLegend(view,model,target_svg,show_all){if(view.rendering_suppressed){return;}if(typeof target_svg==='undefined'){target_svg=view.$svg[0];}if(!nodeIsVisible(target_svg)){return;}$(target_svg).empty();var everything_group=svgfactory.group(0,0);target_svg.appendChild(everything_group);var rule_sets=model.getRuleSets();var y=0;var rule_start_x=200;for(var i=0;i<rule_sets.length;i++){if(rule_sets[i].exclude_from_legend&&!show_all){continue;}var rule_set_group=svgfactory.group(0,y);everything_group.appendChild(rule_set_group);(function addLabel(){if(typeof rule_sets[i].legend_label!=='undefined'&&rule_sets[i].legend_label.length>0){var label=svgfactory.text(rule_sets[i].legend_label,0,0,12,'Arial','bold');rule_set_group.appendChild(label);svgfactory.wrapText(label,rule_start_x);}})();var x=rule_start_x+view.padding_after_rule_set_label;var in_group_y_offset=0;var rules=model.getActiveRules(rule_sets[i].rule_set_id);for(var j=0;j<rules.length;j++){var rule=rules[j].rule;if(rule.exclude_from_legend){continue;}var group=ruleToSVGGroup(rule,view,model,target_svg);group.setAttribute('transform','translate('+x+','+in_group_y_offset+')');rule_set_group.appendChild(group);if(x+group.getBBox().width>view.width){x=rule_start_x+view.padding_after_rule_set_label;in_group_y_offset=rule_set_group.getBBox().height+view.padding_between_rule_set_rows;group.setAttribute('transform','translate('+x+','+in_group_y_offset+')');}x+=group.getBBox().width;x+=view.padding_between_rules;}y+=rule_set_group.getBBox().height;y+=3*view.padding_between_rule_set_rows;}var everything_box=everything_group.getBBox();view.$svg[0].setAttribute('width',everything_box.width);view.$svg[0].setAttribute('height',everything_box.height);};var ruleToSVGGroup=function ruleToSVGGroup(rule,view,model,target_svg){var root=svgfactory.group(0,0);var config=rule.getLegendConfig();if(config.type==='rule'){var concrete_shapes=rule.apply(config.target,model.getCellWidth(true),view.base_height);for(var i=0;i<concrete_shapes.length;i++){root.appendChild(svgfactory.fromShape(concrete_shapes[i],0,0));}if(typeof rule.legend_label!=='undefined'){var font_size=12;var text_node=svgfactory.text(rule.legend_label,model.getCellWidth(true)+5,view.base_height/2,font_size,'Arial','normal');target_svg.appendChild(text_node);var height=text_node.getBBox().height;text_node.setAttribute('y',parseFloat(text_node.getAttribute('y'))-height/2);target_svg.removeChild(text_node);root.appendChild(text_node);}}else if(config.type==='number'){var num_decimal_digits=2;var display_range=config.range.map(function(x){var num_digit_multiplier=Math.pow(10,num_decimal_digits);return Math.round(x*num_digit_multiplier)/num_digit_multiplier;});root.appendChild(svgfactory.text(display_range[0],0,0,12,'Arial','normal'));root.appendChild(svgfactory.text(display_range[1],50,0,12,'Arial','normal'));var mesh=100;var points=[];points.push([5,20]);for(var i=0;i<mesh;i++){var t=i/mesh;var h=config.interpFn((1-t)*config.range[0]+t*config.range[1]);var height=20*h;points.push([5+40*i/mesh,20-height]);}points.push([45,20]);root.appendChild(svgfactory.path(points,config.color,config.color));}return root;};OncoprintLegendView.prototype.setWidth=function(w,model){this.width=w;renderLegend(this,model);};OncoprintLegendView.prototype.removeTrack=function(model){renderLegend(this,model);};OncoprintLegendView.prototype.addTracks=function(model){renderLegend(this,model);};OncoprintLegendView.prototype.setTrackData=function(model){renderLegend(this,model);};OncoprintLegendView.prototype.shareRuleSet=function(model){renderLegend(this,model);};OncoprintLegendView.prototype.setRuleSet=function(model){renderLegend(this,model);};OncoprintLegendView.prototype.hideTrackLegends=function(model){renderLegend(this,model);};OncoprintLegendView.prototype.showTrackLegends=function(model){renderLegend(this,model);};OncoprintLegendView.prototype.suppressRendering=function(){this.rendering_suppressed=true;};OncoprintLegendView.prototype.releaseRendering=function(model){this.rendering_suppressed=false;renderLegend(this,model);};OncoprintLegendView.prototype.toSVGGroup=function(model,offset_x,offset_y){var root=svgfactory.group(offset_x||0,offset_y||0);this.$svg.append(root);renderLegend(this,model,root,true);root.parentNode.removeChild(root);return root;};return OncoprintLegendView;}();module.exports=OncoprintLegendView;},{"./svgfactory.js":16}],8:[function(require,module,exports){var binarysearch=require('./binarysearch.js');var CachedProperty=require('./CachedProperty.js');function ifndef(x,val){return typeof x==="undefined"?val:x;}var UnionOfSets=function(){// a set, to be passed in as argument, is an object where the values are truthy
	function UnionOfSets(){this.union_count={};this.sets={};}var setOfKeys=function setOfKeys(obj){var set={};for(var k in obj){if(typeof obj[k]!=='undefined'){set[k]=true;}}return set;};UnionOfSets.prototype.putSet=function(id,set){this.removeSet(id);this.sets[id]=set;var union_count=this.union_count;for(var k in set){if(set[k]){this.union_count[k]=this.union_count[k]||0;this.union_count[k]+=1;}}};UnionOfSets.prototype.removeSet=function(id){var union_count=this.union_count;var old_set=this.sets[id]||{};for(var k in old_set){if(old_set[k]){union_count[k]-=1;if(union_count[k]===0){delete union_count[k];}}}delete this.sets[id];};UnionOfSets.prototype.getUnion=function(){return setOfKeys(this.union_count);};return UnionOfSets;}();var setUnion=function setUnion(list_of_sets){var union={};for(var i=0;i<list_of_sets.length;i++){var set=list_of_sets[i];for(var k in set){if(set.hasOwnProperty(k)){union[k]=true;}}}return union;};var objectValues=function objectValues(obj){return Object.keys(obj).map(function(key){return obj[key];});};var arrayUnique=function arrayUnique(arr){var present={};var unique=[];for(var i=0;i<arr.length;i++){if(typeof present[arr[i]]==='undefined'){present[arr[i]]=true;unique.push(arr[i]);}}return unique;};var copyShallowObject=function copyShallowObject(obj){var copy={};for(var key in obj){if(obj.hasOwnProperty(key)){copy[key]=obj[key];}}return copy;};var OncoprintModel=function(){var MIN_ZOOM_PIXELS=100;function OncoprintModel(init_cell_padding,init_cell_padding_on,init_horz_zoom,init_vert_zoom,init_cell_width,init_track_group_padding){var model=this;// Global properties
	this.sort_config={};// Rendering Properties
	this.cell_width=ifndef(init_cell_width,6);this.horz_zoom=ifndef(init_horz_zoom,1);this.vert_zoom=ifndef(init_vert_zoom,1);this.horz_scroll=0;this.vert_scroll=0;this.bottom_padding=20;this.track_group_padding=ifndef(init_track_group_padding,10);this.cell_padding=ifndef(init_cell_padding,3);this.cell_padding_on=ifndef(init_cell_padding_on,true);this.cell_padding_off_cell_width_threshold=2;this.cell_padding_off_because_of_zoom=this.getCellWidth()<this.cell_padding_off_cell_width_threshold;this.id_order=[];this.visible_id_order=[];this.hidden_ids={};// Track Properties
	this.track_label={};this.track_description={};this.cell_height={};this.track_padding={};this.track_data_id_key={};this.track_tooltip_fn={};this.track_removable={};this.track_remove_callback={};this.track_sort_cmp_fn={};this.track_sort_direction_changeable={};this.track_sort_direction={};// 1: ascending, -1: descending, 0: not
	this.track_data={};this.track_rule_set_id={};// track id -> rule set id
	this.track_active_rules={};// from track id to active rule map (map with rule ids as keys)
	this.track_info={};// Rule Set Properties
	this.rule_sets={};// map from rule set id to rule set
	// Cached and Recomputed Properties
	this.track_id_to_datum=new CachedProperty({},function(model,track_id){var curr=model.track_id_to_datum.get();if(model.getContainingTrackGroup(track_id)!==null){var map={};var data=model.getTrackData(track_id)||[];var data_id_key=model.getTrackDataIdKey(track_id)||'';for(var i=0;i<data.length;i++){map[data[i][data_id_key]]=data[i];}curr[track_id]=map;}else{delete curr[track_id];}return curr;});this.track_present_ids=new CachedProperty(new UnionOfSets(),function(model,track_id){var union=model.track_present_ids.get();if(model.getContainingTrackGroup(track_id)!==null){var ids={};var data=model.getTrackData(track_id)||[];var data_id_key=model.getTrackDataIdKey(track_id)||'';for(var i=0;i<data.length;i++){ids[data[i][data_id_key]]=true;}union.putSet(track_id,ids);}else{union.removeSet(track_id);}return union;});this.present_ids=new CachedProperty({},function(){return model.track_present_ids.get().getUnion();});this.track_present_ids.addBoundProperty(this.present_ids);this.id_to_index={};this.track_groups=[];this.track_group_sort_priority=[];this.track_tops=new CachedProperty({},function(){var tops={};var groups=model.getTrackGroups();var y=0;for(var i=0;i<groups.length;i++){var group=groups[i];for(var j=0;j<group.length;j++){var track_id=group[j];tops[track_id]=y;y+=model.getTrackHeight(track_id);}if(group.length>0){y+=model.getTrackGroupPadding();}}return tops;});this.cell_tops=new CachedProperty({},function(){var track_tops=model.track_tops.get();var cell_tops={};for(var k in track_tops){if(track_tops.hasOwnProperty(k)){cell_tops[k]=track_tops[k]+model.getTrackPadding(k);}}return cell_tops;});this.label_tops=new CachedProperty({},function(){return model.cell_tops.get();});this.track_tops.addBoundProperty(this.cell_tops);this.cell_tops.addBoundProperty(this.label_tops);this.column_left=new CachedProperty({},function(){var cell_width=model.getCellWidth(true);var cell_padding=model.getCellPadding(true);var left={};var ids=model.getIdOrder();for(var i=0;i<ids.length;i++){left[ids[i]]=i*(cell_width+cell_padding);}return left;});this.zoomed_column_left=new CachedProperty({},function(){var cell_width=model.getCellWidth();var cell_padding=model.getCellPadding();var left={};var ids=model.getIdOrder();for(var i=0;i<ids.length;i++){left[ids[i]]=i*(cell_width+cell_padding);}return left;});this.column_left.addBoundProperty(this.zoomed_column_left);this.precomputed_comparator=new CachedProperty({},function(model,track_id){var curr_precomputed_comparator=model.precomputed_comparator.get();curr_precomputed_comparator[track_id]=new PrecomputedComparator(model.getTrackData(track_id),model.getTrackSortComparator(track_id),model.getTrackSortDirection(track_id),model.getTrackDataIdKey(track_id));return curr_precomputed_comparator;});// track_id -> PrecomputedComparator
	}OncoprintModel.prototype.toggleCellPadding=function(){this.cell_padding_on=!this.cell_padding_on;this.column_left.update();return this.cell_padding_on;};OncoprintModel.prototype.getCellPadding=function(base){return this.cell_padding*(base?1:this.horz_zoom)*+this.cell_padding_on*+!this.cell_padding_off_because_of_zoom;};OncoprintModel.prototype.getHorzZoom=function(){return this.horz_zoom;};OncoprintModel.prototype.getHorzZoomToFit=function(width,ids){ids=ids||[];var width_to_fit_in;var done=false;var suppose_cell_padding_off_because_of_zoom=this.cell_padding_off_because_of_zoom;var zoom;while(!done){var effective_cell_padding=this.getCellPadding(true)*+!suppose_cell_padding_off_because_of_zoom;if(ids.length===0){width_to_fit_in=(this.getCellWidth(true)+effective_cell_padding)*this.getIdOrder().length;}else{var furthest_right_id_index=-1;var furthest_left_id_index=Number.POSITIVE_INFINITY;var id_to_index_map=this.getIdToIndexMap();for(var i=0;i<ids.length;i++){furthest_right_id_index=Math.max(furthest_right_id_index,id_to_index_map[ids[i]]);furthest_left_id_index=Math.min(furthest_left_id_index,id_to_index_map[ids[i]]);}width_to_fit_in=(this.getCellWidth(true)+effective_cell_padding)*(furthest_right_id_index-furthest_left_id_index)+this.getCellWidth(true);}zoom=Math.max(Math.min(1,width/width_to_fit_in),this.getMinZoom());if(this.getCellWidth(true)*zoom<this.cell_padding_off_cell_width_threshold&&!suppose_cell_padding_off_because_of_zoom){suppose_cell_padding_off_because_of_zoom=true;}else{done=true;}}return zoom;};OncoprintModel.prototype.getMinZoom=function(){return Math.min(MIN_ZOOM_PIXELS/(this.getIdOrder().length*this.getCellWidth(true)+(this.getIdOrder().length-1)*this.getCellPadding(true)),1);};OncoprintModel.prototype.setHorzScroll=function(s){this.horz_scroll=Math.max(0,s);return this.horz_scroll;};OncoprintModel.prototype.setVertScroll=function(s){this.vert_scroll=Math.max(0,s);return this.vert_scroll;};OncoprintModel.prototype.getHorzScroll=function(){return this.horz_scroll;};OncoprintModel.prototype.getVertScroll=function(){return this.vert_scroll;};var setCellPaddingOffBecauseOfZoom=function setCellPaddingOffBecauseOfZoom(model,val){model.cell_padding_off_because_of_zoom=val;model.column_left.update();};OncoprintModel.prototype.setHorzZoom=function(z){var min_zoom=this.getMinZoom();if(z<=1&&z>=min_zoom){this.horz_zoom=z;}else if(z>1){this.horz_zoom=1;}else if(z<min_zoom){this.horz_zoom=min_zoom;}this.column_left.update();if(this.getCellWidth()<this.cell_padding_off_cell_width_threshold&&!this.cell_padding_off_because_of_zoom){setCellPaddingOffBecauseOfZoom(this,true);}else if(this.getCellWidth()>=this.cell_padding_off_cell_width_threshold&&this.cell_padding_off_because_of_zoom){setCellPaddingOffBecauseOfZoom(this,false);}return this.horz_zoom;};OncoprintModel.prototype.getVertZoom=function(){return this.vert_zoom;};OncoprintModel.prototype.setVertZoom=function(z){if(z<=1&&z>=0){this.vert_zoom=z;}else if(z>1){this.vert_zoom=1;}else if(z<0){this.vert_zoom=0;}this.track_tops.update();return this.vert_zoom;};OncoprintModel.prototype.hideTrackLegends=function(track_ids){track_ids=[].concat(track_ids);for(var i=0;i<track_ids.length;i++){this.getRuleSet(track_ids[i]).exclude_from_legend=true;}};OncoprintModel.prototype.showTrackLegends=function(track_ids){track_ids=[].concat(track_ids);for(var i=0;i<track_ids.length;i++){this.getRuleSet(track_ids[i]).exclude_from_legend=false;}};OncoprintModel.prototype.getIdentifiedShapeListList=function(track_id,use_base_width,sort_by_z){var active_rules={};var data=this.getTrackData(track_id);var id_key=this.getTrackDataIdKey(track_id);var shapes=this.getRuleSet(track_id).apply(data,this.getCellWidth(use_base_width),this.getCellHeight(track_id),active_rules);this.track_active_rules[track_id]=active_rules;var z_comparator=function z_comparator(shapeA,shapeB){var zA=parseFloat(shapeA.z);var zB=parseFloat(shapeB.z);if(zA<zB){return-1;}else if(zA>zB){return 1;}else{return 0;}};return shapes.map(function(shape_list,index){if(sort_by_z){shape_list.sort(z_comparator);}return{id:data[index][id_key],shape_list:shape_list};});};OncoprintModel.prototype.getActiveRules=function(rule_set_id){var list_of_active_rules_maps=[];for(var track_id in this.track_rule_set_id){if(this.track_rule_set_id.hasOwnProperty(track_id)&&this.track_rule_set_id[track_id]===rule_set_id){list_of_active_rules_maps.push(this.track_active_rules[track_id]);}}var active_rules=setUnion(list_of_active_rules_maps);return this.rule_sets[rule_set_id].getRulesWithId().filter(function(rule_with_id){return!!active_rules[rule_with_id.id];});};OncoprintModel.prototype.getRuleSets=function(){// return rule sets, sorted by associating each with the lowest track id its on
	var self=this;var sorted_tracks=this.getTracks().sort();var rule_set_ids=sorted_tracks.map(function(track_id){return self.track_rule_set_id[track_id];});var unique_rule_set_ids=arrayUnique(rule_set_ids);return unique_rule_set_ids.map(function(rule_set_id){return self.rule_sets[rule_set_id];});};OncoprintModel.prototype.getCellWidth=function(base){return this.cell_width*(base?1:this.horz_zoom);};OncoprintModel.prototype.getCellHeight=function(track_id){return this.cell_height[track_id]*this.vert_zoom;};OncoprintModel.prototype.getTrackInfo=function(track_id){return this.track_info[track_id];};OncoprintModel.prototype.setTrackInfo=function(track_id,msg){this.track_info[track_id]=msg;};OncoprintModel.prototype.getTrackHeight=function(track_id){return this.getCellHeight(track_id)+2*this.getTrackPadding(track_id);};OncoprintModel.prototype.getTrackPadding=function(track_id){return this.track_padding[track_id]*this.vert_zoom;};OncoprintModel.prototype.getBottomPadding=function(){return this.bottom_padding;};OncoprintModel.prototype.getTrackSortDirection=function(track_id){return this.track_sort_direction[track_id];};OncoprintModel.prototype.setTrackSortDirection=function(track_id,dir){// see above for dir options
	this.track_sort_direction[track_id]=dir;this.precomputed_comparator.update(this,track_id);};var computeIdToIndex=function computeIdToIndex(model){model.id_to_index={};var id_order=model.getIdOrder(true);for(var i=0;i<id_order.length;i++){model.id_to_index[id_order[i]]=i;}Object.freeze(model.id_to_index);};var computeVisibleIdOrder=function computeVisibleIdOrder(model){var hidden_ids=model.hidden_ids;model.visible_id_order=model.id_order.filter(function(id){return!hidden_ids[id];});Object.freeze(model.visible_id_order);};OncoprintModel.prototype.setCellPaddingOn=function(cell_padding_on){this.cell_padding_on=cell_padding_on;this.column_left.update();};OncoprintModel.prototype.getIdOrder=function(all){if(all){return this.id_order;// TODO: should be read-only
	}else{return this.visible_id_order;}};OncoprintModel.prototype.getIdToIndexMap=function(){return this.id_to_index;};OncoprintModel.prototype.getHiddenIds=function(){var hidden_ids=this.hidden_ids;return this.id_order.filter(function(id){return!!hidden_ids[id];});};OncoprintModel.prototype.setIdOrder=function(ids){this.id_order=ids.slice();Object.freeze(this.id_order);computeIdToIndex(this);computeVisibleIdOrder(this);this.column_left.update();};OncoprintModel.prototype.hideIds=function(to_hide,show_others){if(show_others){this.hidden_ids={};}for(var j=0,len=to_hide.length;j<len;j++){this.hidden_ids[to_hide[j]]=true;}computeVisibleIdOrder(this);this.column_left.update();};OncoprintModel.prototype.moveTrackGroup=function(from_index,to_index){var new_groups=[];var group_to_move=this.track_groups[from_index];for(var i=0;i<this.track_groups.length;i++){if(i!==from_index&&i!==to_index){new_groups.push(this.track_groups[i]);}if(i===to_index){new_groups.push(group_to_move);}}this.track_groups=new_groups;this.track_tops.update();return this.track_groups;};OncoprintModel.prototype.addTracks=function(params_list){for(var i=0;i<params_list.length;i++){var params=params_list[i];addTrack(this,params.track_id,params.target_group,params.cell_height,params.track_padding,params.data_id_key,params.tooltipFn,params.removable,params.removeCallback,params.label,params.description,params.track_info,params.sortCmpFn,params.sort_direction_changeable,params.init_sort_direction,params.data,params.rule_set);}this.track_tops.update();};var addTrack=function addTrack(model,track_id,target_group,cell_height,track_padding,data_id_key,tooltipFn,removable,removeCallback,label,description,track_info,sortCmpFn,sort_direction_changeable,init_sort_direction,data,rule_set){model.track_label[track_id]=ifndef(label,"Label");model.track_description[track_id]=ifndef(description,"");model.cell_height[track_id]=ifndef(cell_height,23);model.track_padding[track_id]=ifndef(track_padding,5);model.track_tooltip_fn[track_id]=ifndef(tooltipFn,function(d){return d+'';});model.track_removable[track_id]=ifndef(removable,false);model.track_remove_callback[track_id]=ifndef(removeCallback,function(){});model.track_sort_cmp_fn[track_id]=ifndef(sortCmpFn,function(){return 0;});model.track_sort_direction_changeable[track_id]=ifndef(sort_direction_changeable,false);model.track_data[track_id]=ifndef(data,[]);model.track_data_id_key[track_id]=ifndef(data_id_key,'id');model.track_info[track_id]=ifndef(track_info,"");if(typeof rule_set!=='undefined'){model.rule_sets[rule_set.rule_set_id]=rule_set;model.track_rule_set_id[track_id]=rule_set.rule_set_id;}model.track_sort_direction[track_id]=ifndef(init_sort_direction,1);target_group=ifndef(target_group,0);while(target_group>=model.track_groups.length){model.track_groups.push([]);}model.track_groups[target_group].push(track_id);model.track_id_to_datum.update(model,track_id);model.track_present_ids.update(model,track_id);model.precomputed_comparator.update(model,track_id);model.setIdOrder(Object.keys(model.present_ids.get()));};var _getContainingTrackGroup=function _getContainingTrackGroup(oncoprint_model,track_id,return_reference){var group;track_id=parseInt(track_id);for(var i=0;i<oncoprint_model.track_groups.length;i++){if(oncoprint_model.track_groups[i].indexOf(track_id)>-1){group=oncoprint_model.track_groups[i];break;}}if(group){return return_reference?group:group.slice();}else{return null;}};var isRuleSetUsed=function isRuleSetUsed(model,rule_set_id){var used=false;var tracks=model.getTracks();for(var i=0;i<tracks.length;i++){if(model.track_rule_set_id[tracks[i]]===rule_set_id){used=true;break;}}return used;};OncoprintModel.prototype.removeTrack=function(track_id){var rule_set_id=this.track_rule_set_id[track_id];this.track_remove_callback[track_id](track_id);delete this.track_data[track_id];delete this.track_rule_set_id[track_id];delete this.track_label[track_id];delete this.cell_height[track_id];delete this.track_padding[track_id];delete this.track_data_id_key[track_id];delete this.track_tooltip_fn[track_id];delete this.track_removable[track_id];delete this.track_remove_callback[track_id];delete this.track_sort_cmp_fn[track_id];delete this.track_sort_direction_changeable[track_id];delete this.track_sort_direction[track_id];delete this.track_info[track_id];var containing_track_group=_getContainingTrackGroup(this,track_id,true);if(containing_track_group!==null){containing_track_group.splice(containing_track_group.indexOf(track_id),1);}this.track_tops.update();this.track_present_ids.update(this,track_id);this.track_id_to_datum.update(this,track_id);this.setIdOrder(Object.keys(this.present_ids.get()));var rule_set_used=isRuleSetUsed(this,rule_set_id);if(!rule_set_used){delete this.rule_sets[rule_set_id];}};OncoprintModel.prototype.getOverlappingCell=function(x,y){// First, see if it's in a column
	var id_order=this.getIdOrder();var zoomed_column_left=this.getZoomedColumnLeft();var nearest_id_index=binarysearch(id_order,x,function(id){return zoomed_column_left[id];},true);if(x<=zoomed_column_left[id_order[nearest_id_index]]+this.getCellWidth()){var id=id_order[nearest_id_index];var tracks=this.getTracks();var cell_tops=this.getCellTops();var nearest_track_index=binarysearch(tracks,y,function(track){return cell_tops[track];},true);var nearest_track=tracks[nearest_track_index];if(y<cell_tops[nearest_track]+this.getCellHeight(nearest_track)){return{'id':id,'track':nearest_track,'top':cell_tops[nearest_track],'left':zoomed_column_left[id]};}}return null;};OncoprintModel.prototype.getTrackDatum=function(track_id,id){var datum=this.track_id_to_datum.get()[track_id][id];if(typeof datum==='undefined'){datum=null;}return datum;};OncoprintModel.prototype.getTrackTops=function(desired_track_id){if(typeof desired_track_id==='undefined'){return copyShallowObject(this.track_tops.get());}else{return this.track_tops.get()[desired_track_id];}};OncoprintModel.prototype.getCellTops=function(desired_track_id){if(typeof desired_track_id==='undefined'){return copyShallowObject(this.cell_tops.get());}else{return this.cell_tops.get()[desired_track_id];}};OncoprintModel.prototype.getLabelTops=function(desired_track_id){if(typeof desired_track_id==='undefined'){return copyShallowObject(this.label_tops.get());}else{return this.label_tops.get()[desired_track_id];}};OncoprintModel.prototype.getContainingTrackGroup=function(track_id){return _getContainingTrackGroup(this,track_id,false);};OncoprintModel.prototype.getTrackGroups=function(){// TODO: make read-only
	return this.track_groups;};OncoprintModel.prototype.getTracks=function(){var ret=[];for(var i=0;i<this.track_groups.length;i++){for(var j=0;j<this.track_groups[i].length;j++){ret.push(this.track_groups[i][j]);}}return ret;};OncoprintModel.prototype.getIdsInLeftInterval=function(left,right){var cell_width=this.getCellWidth();var cell_padding=this.getCellPadding();var id_order=this.getIdOrder();// left_id_index and right_id_index are inclusive
	var left_id_index=Math.floor(left/(cell_width+cell_padding));var left_remainder=left-left_id_index*(cell_width+cell_padding);if(left_remainder>cell_width){left_id_index+=1;}var right_id_index=Math.floor(right/(cell_width+cell_padding));return id_order.slice(left_id_index,right_id_index+1);};OncoprintModel.prototype.getColumnLeft=function(id){if(typeof id==='undefined'){return this.column_left.get();}else{return this.column_left.get()[id];}};OncoprintModel.prototype.getZoomedColumnLeft=function(id){if(typeof id==='undefined'){return this.zoomed_column_left.get();}else{return this.zoomed_column_left.get()[id];}};OncoprintModel.prototype.getCellViewHeight=function(){var tracks=this.getTracks();var last_track=tracks[tracks.length-1];return this.getTrackTops(last_track)+this.getTrackHeight(last_track)+this.getBottomPadding();};OncoprintModel.prototype.getCellViewWidth=function(){return this.getIdOrder().length*(this.getCellWidth()+this.getCellPadding())-this.getCellPadding();};OncoprintModel.prototype.moveTrack=function(track_id,new_previous_track){var track_group=_getContainingTrackGroup(this,track_id,true);if(track_group!==null){track_group.splice(track_group.indexOf(track_id),1);var new_position=new_previous_track===null?0:track_group.indexOf(new_previous_track)+1;track_group.splice(new_position,0,track_id);}this.track_tops.update();};OncoprintModel.prototype.getTrackLabel=function(track_id){return this.track_label[track_id];};OncoprintModel.prototype.getTrackDescription=function(track_id){return this.track_description[track_id];};OncoprintModel.prototype.getTrackTooltipFn=function(track_id){return this.track_tooltip_fn[track_id];};OncoprintModel.prototype.setTrackTooltipFn=function(track_id,tooltipFn){this.track_tooltip_fn[track_id]=tooltipFn;};OncoprintModel.prototype.getTrackDataIdKey=function(track_id){return this.track_data_id_key[track_id];};OncoprintModel.prototype.getTrackGroupPadding=function(){return this.track_group_padding;};OncoprintModel.prototype.isTrackRemovable=function(track_id){return this.track_removable[track_id];};OncoprintModel.prototype.isTrackSortDirectionChangeable=function(track_id){return this.track_sort_direction_changeable[track_id];};OncoprintModel.prototype.getRuleSet=function(track_id){return this.rule_sets[this.track_rule_set_id[track_id]];};OncoprintModel.prototype.shareRuleSet=function(source_track_id,target_track_id){var curr_rule_set_id=this.track_rule_set_id[target_track_id];var should_delete_curr_rule_set=true;for(var track_id in this.track_rule_set_id){if(this.track_rule_set_id.hasOwnProperty(track_id)&&track_id!==source_track_id+''){if(this.track_rule_set_id[track_id]===curr_rule_set_id){should_delete_curr_rule_set=false;break;}}}if(should_delete_curr_rule_set){delete this.rule_sets[curr_rule_set_id];}delete this.track_active_rules[target_track_id];this.track_rule_set_id[target_track_id]=this.track_rule_set_id[source_track_id];};OncoprintModel.prototype.setRuleSet=function(track_id,rule_set){var curr_rule_set_id=this.track_rule_set_id[track_id];this.rule_sets[rule_set.rule_set_id]=rule_set;this.track_rule_set_id[track_id]=rule_set.rule_set_id;var rule_set_used=isRuleSetUsed(this,curr_rule_set_id);if(!rule_set_used){delete this.rule_sets[curr_rule_set_id];}};OncoprintModel.prototype.getTrackSortComparator=function(track_id){return this.track_sort_cmp_fn[track_id];};OncoprintModel.prototype.setTrackSortComparator=function(track_id,sortCmpFn){this.track_sort_cmp_fn[track_id]=sortCmpFn;this.precomputed_comparator.update(this,track_id);};OncoprintModel.prototype.getTrackData=function(track_id){return this.track_data[track_id];};OncoprintModel.prototype.setTrackData=function(track_id,data,data_id_key){this.track_data[track_id]=data;this.track_data_id_key[track_id]=data_id_key;this.track_id_to_datum.update(this,track_id);this.track_present_ids.update(this,track_id);this.setIdOrder(Object.keys(this.present_ids.get()));this.precomputed_comparator.update(this,track_id);};OncoprintModel.prototype.computeTrackIdToDatum=function(track_id){this.track_id_to_datum[track_id]={};var track_data=this.track_data[track_id]||[];var track_id_key=this.track_data_id_key[track_id];for(var i=0;i<track_data.length;i++){this.track_id_to_datum[track_id][track_data[i][track_id_key]]=track_data[i];}};OncoprintModel.prototype.setTrackGroupSortPriority=function(priority){this.track_group_sort_priority=priority;this.sort();};var sortAlphabetical=function sortAlphabetical(model){var id_order=model.getIdOrder(true).slice();id_order.sort(function(a,b){return a.localeCompare(b);});model.setIdOrder(id_order);};var sortByTracks=function sortByTracks(model){var track_group_sort_priority=model.track_group_sort_priority;var track_groups=model.getTrackGroups();var track_groups_in_sort_order;if(track_group_sort_priority.length<track_groups.length){track_groups_in_sort_order=track_groups;}else{track_groups_in_sort_order=track_group_sort_priority.map(function(x){return track_groups[x];});}var track_sort_priority=track_groups_in_sort_order.reduce(function(acc,next){return acc.concat(next);},[]);var precomputed_comparator=model.precomputed_comparator.get();var curr_id_to_index=model.getIdToIndexMap();var combinedComparator=function combinedComparator(idA,idB){var res=0;for(var i=0;i<track_sort_priority.length;i++){res=precomputed_comparator[track_sort_priority[i]].compare(idA,idB);if(res!==0){break;}}if(res===0){// stable sort
	res=curr_id_to_index[idA]<curr_id_to_index[idB]?-1:1;// will never be the same, no need to check for 0
	}return res;};var id_order=model.getIdOrder(true).slice();id_order.sort(combinedComparator);model.setIdOrder(id_order);};OncoprintModel.prototype.sort=function(){this.sort_config=this.sort_config||{};if(this.sort_config.type==="alphabetical"){sortAlphabetical(this);}else if(this.sort_config.type==="order"){this.setIdOrder(this.sort_config.order);}else{sortByTracks(this);}};OncoprintModel.prototype.setSortConfig=function(params){this.sort_config=params;};return OncoprintModel;}();var PrecomputedComparator=function(){function PrecomputedComparator(list,comparator,sort_direction,element_identifier_key){var directed_comparator=function directed_comparator(d1,d2){if(sort_direction===0){return 0;}var res=comparator(d1,d2);if(res===2){return 1;}else if(res===-2){return-1;}else{return res*sort_direction;}};var sorted_list=list.sort(directed_comparator);this.change_points=[];// i is a change point iff comp(elt[i], elt[i+1]) !== 0
	for(var i=0;i<sorted_list.length;i++){if(i===sorted_list.length-1){break;}if(directed_comparator(sorted_list[i],sorted_list[i+1])!==0){this.change_points.push(i);}}// Note that by this process change_points is sorted
	this.id_to_index={};for(var i=0;i<sorted_list.length;i++){this.id_to_index[sorted_list[i][element_identifier_key]]=i;}}PrecomputedComparator.prototype.compare=function(idA,idB){var indA=this.id_to_index[idA];var indB=this.id_to_index[idB];if(typeof indA==='undefined'&&typeof indB==='undefined'){return 0;}else if(typeof indA==='undefined'){return 1;}else if(typeof indB==='undefined'){return-1;}var should_negate_result=false;if(indA===indB){return 0;}else if(indA>indB){// switch if necessary to make process WLOG
	var tmp=indA;indA=indB;indB=tmp;should_negate_result=true;}// See if any changepoints in [indA, indB)
	var upper_bd_excl=this.change_points.length;var lower_bd_incl=0;var middle;var res=0;while(true){middle=Math.floor((lower_bd_incl+upper_bd_excl)/2);if(lower_bd_incl===upper_bd_excl){break;}else if(this.change_points[middle]>=indB){upper_bd_excl=middle;}else if(this.change_points[middle]<indA){lower_bd_incl=middle+1;}else{res=-1;break;}}if(should_negate_result){res=res*-1;}return res;};return PrecomputedComparator;}();module.exports=OncoprintModel;},{"./CachedProperty.js":1,"./binarysearch.js":2}],9:[function(require,module,exports){/* Rule:
	     *
	     * condition: function from datum to boolean
	     * shapes - a list of Shapes
	     * legend_label
	     * exclude_from_legend
	     *
	     * Shape:
	     * type
	     * x
	     * y
	     * ... shape-specific attrs ...
	     *
	     * Attrs by shape:
	     *
	     * rectangle: x, y, width, height, stroke, stroke-width, fill
	     * triangle: x1, y1, x2, y2, x3, y3, stroke, stroke-width, fill
	     * ellipse: x, y, width, height, stroke, stroke-width, fill
	     * line: x1, y1, x2, y2, stroke, stroke-width
	     */var Shape=require('./oncoprintshape.js');function ifndef(x,val){return typeof x==="undefined"?val:x;}function makeIdCounter(){var id=0;return function(){id+=1;return id;};}function makeUniqueColorGetter(init_used_colors){init_used_colors=init_used_colors||[];var colors=["#3366cc","#dc3912","#ff9900","#109618","#990099","#0099c6","#dd4477","#66aa00","#b82e2e","#316395","#994499","#22aa99","#aaaa11","#6633cc","#e67300","#8b0707","#651067","#329262","#5574a6","#3b3eac","#b77322","#16d620","#b91383","#f4359e","#9c5935","#a9c413","#2a778d","#668d1c","#bea413","#0c5922","#743411"];// Source: D3
	var index=0;var used_colors={};for(var i=0;i<init_used_colors.length;i++){used_colors[init_used_colors[i]]=true;}return function(){var next_color=colors[index%colors.length];while(used_colors[next_color]){var darker_next_color=darkenHexColor(next_color);if(darker_next_color===next_color){break;}next_color=darker_next_color;}used_colors[next_color]=true;index+=1;return next_color;};};function shallowExtend(target,source){var ret={};for(var key in target){if(target.hasOwnProperty(key)){ret[key]=target[key];}}for(var key in source){if(source.hasOwnProperty(key)){ret[key]=source[key];}}return ret;}function objectValues(obj){return Object.keys(obj).map(function(key){return obj[key];});}var NA_SHAPES=[{'type':'rectangle','fill':'rgba(125, 125, 125, 1)','z':0}];var NA_STRING="na";var NA_LABEL="N/A";var extractRGBA=function extractRGBA(str){var ret=[0,0,0,1];if(str[0]==="#"){// hex, convert to rgba
	var r=parseInt(str[1]+str[2],16);var g=parseInt(str[3]+str[4],16);var b=parseInt(str[5]+str[6],16);str='rgba('+r+','+g+','+b+',1)';}var match=str.match(/^[\s]*rgba\([\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*,[\s]*([0-9.]+)[\s]*\)[\s]*$/);if(match.length===5){ret=[parseFloat(match[1])/255,parseFloat(match[2])/255,parseFloat(match[3])/255,parseFloat(match[4])];}return ret;};var colorToHex=function colorToHex(str){var r;var g;var b;var rgba_match=str.match(/^[\s]*rgba\([\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*,[\s]*([0-9.]+)[\s]*\)[\s]*$/);if(rgba_match&&rgba_match.length===5){r=parseInt(rgba_match[1]).toString(16);g=parseInt(rgba_match[2]).toString(16);b=parseInt(rgba_match[3]).toString(16);if(r.length===1){r='0'+r;}if(g.length===1){g='0'+g;}if(b.length===1){b='0'+b;}return'#'+r+g+b;}var rgb_match=str.match(/^[\s]*rgb\([\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*\)[\s]*$/);if(rgb_match&&rgb_match.length===4){r=parseInt(rgb_match[1]).toString(16);g=parseInt(rgb_match[2]).toString(16);b=parseInt(rgb_match[3]).toString(16);if(r.length===1){r='0'+r;}if(g.length===1){g='0'+g;}if(b.length===1){b='0'+b;}return'#'+r+g+b;}return str;};var darkenHexColor=function darkenHexColor(str){var r=str[1]+str[2];var g=str[3]+str[4];var b=str[5]+str[6];var darkenHexChannel=function darkenHexChannel(c){c=parseInt(c,16);c*=0.95;c=Math.round(c);c=c.toString(16);if(c.length===1){c='0'+c;}return c;};r=darkenHexChannel(r);g=darkenHexChannel(g);b=darkenHexChannel(b);return'#'+r+g+b;};var RuleSet=function(){var getRuleSetId=makeIdCounter();var getRuleId=makeIdCounter();function RuleSet(params){/* params:
	             * - legend_label
	             * - exclude_from_legend
	             */this.rule_set_id=getRuleSetId();this.legend_label=params.legend_label;this.exclude_from_legend=params.exclude_from_legend;this.active_rule_ids={};this.rules_with_id=[];}RuleSet.prototype.getLegendLabel=function(){return this.legend_label;};RuleSet.prototype.getRuleSetId=function(){return this.rule_set_id;};RuleSet.prototype.addRules=function(list_of_params){var self=this;return list_of_params.map(function(params){return self.addRule(params);});};RuleSet.prototype.addRule=function(params){var rule_id=getRuleId();this.rules_with_id.push({id:rule_id,rule:new Rule(params)});return rule_id;};RuleSet.prototype.removeRule=function(rule_id){var index=-1;for(var i=0;i<this.rules_with_id.length;i++){if(this.rules_with_id[i].id===rule_id){index=i;break;}}if(index>-1){this.rules_with_id.splice(index,1);}delete this.active_rule_ids[rule_id];};RuleSet.prototype.getRuleWithId=function(rule_id){var ret=null;for(var i=0;i<this.rules_with_id.length;i++){if(this.rules_with_id[i].id===rule_id){ret=this.rules_with_id[i];break;}}return ret;};RuleSet.prototype.isExcludedFromLegend=function(){return this.exclude_from_legend;};RuleSet.prototype.getRecentlyUsedRules=function(){var self=this;return Object.keys(this.active_rule_ids).map(function(rule_id){return self.getRule(rule_id);});};RuleSet.prototype.applyRulesToDatum=function(rules_with_id,datum,cell_width,cell_height){var shapes=[];var rules_len=rules_with_id.length;for(var j=0;j<rules_len;j++){shapes=shapes.concat(rules_with_id[j].rule.apply(datum,cell_width,cell_height));}return shapes;};RuleSet.prototype.apply=function(data,cell_width,cell_height,out_active_rules){// Returns a list of lists of concrete shapes, in the same order as data
	var ret=[];for(var i=0;i<data.length;i++){var rules=this.getRulesWithId(data[i]);if(typeof out_active_rules!=='undefined'){for(var j=0;j<rules.length;j++){out_active_rules[rules[j].id]=true;}}ret.push(this.applyRulesToDatum(rules,data[i],cell_width,cell_height));}return ret;};return RuleSet;}();var LookupRuleSet=function(){function LookupRuleSet(params){RuleSet.call(this,params);this.lookup_map_by_key_and_value={};this.lookup_map_by_key={};this.universal_rules=[];this.rule_id_to_conditions={};this.addRule(NA_STRING,true,{shapes:NA_SHAPES,legend_label:NA_LABEL,exclude_from_legend:false,legend_config:{'type':'rule','target':{'na':true}}});}LookupRuleSet.prototype=Object.create(RuleSet.prototype);LookupRuleSet.prototype.getRulesWithId=function(datum){if(typeof datum==='undefined'){return this.rules_with_id;}var ret=[];ret=ret.concat(this.universal_rules);for(var key in datum){if(typeof datum[key]!=='undefined'){var key_rule=this.lookup_map_by_key[key];if(typeof key_rule!=='undefined'){ret.push(key_rule);}var key_and_value_rule=this.lookup_map_by_key_and_value[key]&&this.lookup_map_by_key_and_value[key][datum[key]]||undefined;if(typeof key_and_value_rule!=='undefined'){ret.push(key_and_value_rule);}}}return ret;};var indexRuleForLookup=function indexRuleForLookup(rule_set,condition_key,condition_value,rule_with_id){if(condition_key===null){rule_set.universal_rules.push(rule_with_id);}else{if(condition_value===null){rule_set.lookup_map_by_key[condition_key]=rule_with_id;}else{rule_set.lookup_map_by_key_and_value[condition_key]=rule_set.lookup_map_by_key_and_value[condition_key]||{};rule_set.lookup_map_by_key_and_value[condition_key][condition_value]=rule_with_id;}}rule_set.rule_id_to_conditions[rule_with_id.id]=rule_set.rule_id_to_conditions[rule_with_id.id]||[];rule_set.rule_id_to_conditions[rule_with_id.id].push({key:condition_key,value:condition_value});};LookupRuleSet.prototype.addRule=function(condition_key,condition_value,params){var rule_id=RuleSet.prototype.addRule.call(this,params);indexRuleForLookup(this,condition_key,condition_value,this.getRuleWithId(rule_id));return rule_id;};LookupRuleSet.prototype.linkExistingRule=function(condition_key,condition_value,existing_rule_id){indexRuleForLookup(this,condition_key,condition_value,this.getRuleWithId(existing_rule_id));};LookupRuleSet.prototype.removeRule=function(rule_id){RuleSet.prototype.removeRule.call(this,rule_id);while(this.rule_id_to_conditions[rule_id].length>0){var condition=this.rule_id_to_conditions[rule_id].pop();if(condition.key===null){var index=-1;for(var i=0;i<this.universal_rules.length;i++){if(this.universal_rules[i].id===rule_id){index=i;break;}}if(index>-1){this.universal_rules.splice(index,1);}}else{if(condition.value===null){delete this.lookup_map_by_key[condition.key];}else{delete this.lookup_map_by_key_and_value[condition.key][condition.value];}}}delete this.rule_id_to_conditions[rule_id];};return LookupRuleSet;}();var ConditionRuleSet=function(){function ConditionRuleSet(params){RuleSet.call(this,params);this.rule_id_to_condition={};this.addRule(function(d){return d[NA_STRING]===true;},{shapes:NA_SHAPES,legend_label:NA_LABEL,exclude_from_legend:false,legend_config:{'type':'rule','target':{'na':true}}});}ConditionRuleSet.prototype=Object.create(RuleSet.prototype);ConditionRuleSet.prototype.getRulesWithId=function(datum){if(typeof datum==='undefined'){return this.rules_with_id;}var ret=[];for(var i=0;i<this.rules_with_id.length;i++){if(this.rule_id_to_condition[this.rules_with_id[i].id](datum)){ret.push(this.rules_with_id[i]);}}return ret;};ConditionRuleSet.prototype.addRule=function(condition,params){var rule_id=RuleSet.prototype.addRule.call(this,params);this.rule_id_to_condition[rule_id]=condition;return rule_id;};ConditionRuleSet.prototype.removeRule=function(rule_id){RuleSet.prototype.removeRule.call(this,rule_id);delete this.rule_id_to_condition[rule_id];};return ConditionRuleSet;}();var CategoricalRuleSet=function(){function CategoricalRuleSet(params){/* params
	             * - category_key
	             * - categoryToColor
	             */LookupRuleSet.call(this,params);this.category_key=params.category_key;this.category_to_color=ifndef(params.category_to_color,{});this.getUnusedColor=makeUniqueColorGetter(objectValues(this.category_to_color).map(colorToHex));for(var category in this.category_to_color){if(this.category_to_color.hasOwnProperty(category)){var color=this.category_to_color[category];addCategoryRule(this,category,color);this.used_colors[colorToHex(color)]=true;}}}CategoricalRuleSet.prototype=Object.create(LookupRuleSet.prototype);var addCategoryRule=function addCategoryRule(ruleset,category,color){var legend_rule_target={};legend_rule_target[ruleset.category_key]=category;var rule_params={shapes:[{type:'rectangle',fill:color}],legend_label:category,exclude_from_legend:false,legend_config:{'type':'rule','target':legend_rule_target}};ruleset.addRule(ruleset.category_key,category,rule_params);};CategoricalRuleSet.prototype.apply=function(data,cell_width,cell_height,out_active_rules){// First ensure there is a color for all categories
	for(var i=0,data_len=data.length;i<data_len;i++){if(data[i][NA_STRING]){continue;}var category=data[i][this.category_key];if(!this.category_to_color.hasOwnProperty(category)){var color=this.getUnusedColor(this);this.category_to_color[category]=color;addCategoryRule(this,category,color);}}// Then propagate the call up
	return LookupRuleSet.prototype.apply.call(this,data,cell_width,cell_height,out_active_rules);};return CategoricalRuleSet;}();var LinearInterpRuleSet=function(){function LinearInterpRuleSet(params){/* params
	             * - log_scale
	             * - value_key
	             * - value_range
	             */ConditionRuleSet.call(this,params);this.value_key=params.value_key;this.value_range=params.value_range;this.log_scale=params.log_scale;// boolean
	this.inferred_value_range;this.makeInterpFn=function(){var range=this.getEffectiveValueRange();if(this.log_scale){var shift_to_make_pos=Math.abs(range[0])+1;var log_range=Math.log(range[1]+shift_to_make_pos)-Math.log(range[0]+shift_to_make_pos);var log_range_lower=Math.log(range[0]+shift_to_make_pos);return function(val){val=parseFloat(val);return(Math.log(val+shift_to_make_pos)-log_range_lower)/log_range;};}else{var range_spread=range[1]-range[0];var range_lower=range[0];return function(val){val=parseFloat(val);return(val-range_lower)/range_spread;};}};}LinearInterpRuleSet.prototype=Object.create(ConditionRuleSet.prototype);LinearInterpRuleSet.prototype.getEffectiveValueRange=function(){var ret=this.value_range&&this.value_range.slice()||[undefined,undefined];if(typeof ret[0]==="undefined"){ret[0]=this.inferred_value_range[0];}if(typeof ret[1]==="undefined"){ret[1]=this.inferred_value_range[1];}if(ret[0]===ret[1]){// Make sure non-empty interval
	ret[0]-=ret[0]/2;ret[1]+=ret[1]/2;}return ret;};LinearInterpRuleSet.prototype.apply=function(data,cell_width,cell_height,out_active_rules){// First find value range
	var value_min=Number.POSITIVE_INFINITY;var value_max=Number.NEGATIVE_INFINITY;for(var i=0,datalen=data.length;i<datalen;i++){var d=data[i];if(isNaN(d[this.value_key])){continue;}value_min=Math.min(value_min,d[this.value_key]);value_max=Math.max(value_max,d[this.value_key]);}if(value_min===Number.POSITIVE_INFINITY){value_min=0;}if(value_max===Number.NEGATIVE_INFINITY){value_max=0;}this.inferred_value_range=[value_min,value_max];this.updateLinearRules();// Then propagate the call up
	return ConditionRuleSet.prototype.apply.call(this,data,cell_width,cell_height,out_active_rules);};LinearInterpRuleSet.prototype.updateLinearRules=function(){throw"Not implemented in abstract class";};return LinearInterpRuleSet;}();var GradientRuleSet=function(){function GradientRuleSet(params){/* params
	             * - color_range
	             */LinearInterpRuleSet.call(this,params);this.color_range;(function setUpColorRange(self){var color_start;var color_end;try{color_start=params.color_range[0].match(/rgba\(([\d.,]+)\)/).split(',').map(parseFloat);color_end=params.color_range[1].match(/rgba\(([\d.,]+)\)/).split(',').map(parseFloat);if(color_start.length!==4||color_end.length!==4){throw"wrong number of color components";}}catch(err){color_start=[0,0,0,1];color_end=[255,0,0,1];}self.color_range=color_start.map(function(c,i){return[c,color_end[i]];});})(this);this.gradient_rule;}GradientRuleSet.prototype=Object.create(LinearInterpRuleSet.prototype);GradientRuleSet.prototype.updateLinearRules=function(){if(typeof this.gradient_rule!=="undefined"){this.removeRule(this.gradient_rule);}var interpFn=this.makeInterpFn();var value_key=this.value_key;var color_range=this.color_range;this.gradient_rule=this.addRule(function(d){return d[NA_STRING]!==true;},{shapes:[{type:'rectangle',fill:function fill(d){var t=interpFn(d[value_key]);return"rgba("+color_range.map(function(arr){return(1-t)*arr[0]+t*arr[1];}).join(",")+")";}}],exclude_from_legend:false,legend_config:{'type':'gradient','range':this.getEffectiveValueRange()}});};return GradientRuleSet;}();var BarRuleSet=function(){function BarRuleSet(params){LinearInterpRuleSet.call(this,params);this.bar_rule;this.fill=params.fill||'rgba(156,123,135,1)';}BarRuleSet.prototype=Object.create(LinearInterpRuleSet.prototype);BarRuleSet.prototype.updateLinearRules=function(){if(typeof this.bar_rule!=="undefined"){this.removeRule(this.bar_rule);}var interpFn=this.makeInterpFn();var value_key=this.value_key;this.bar_rule=this.addRule(function(d){return d[NA_STRING]!==true;},{shapes:[{type:'rectangle',y:function y(d){var t=interpFn(d[value_key]);return(1-t)*100+"%";},height:function height(d){var t=interpFn(d[value_key]);return t*100+"%";},fill:this.fill}],exclude_from_legend:false,legend_config:{'type':'number','range':this.getEffectiveValueRange(),'color':this.fill,'interpFn':interpFn}});};return BarRuleSet;}();var StackedBarRuleSet=function(){function StackedBarRuleSet(params){/* params
	             * - categories
	             * - value_key
	             * - fills
	             */ConditionRuleSet.call(this,params);var value_key=params.value_key;var fills=params.fills||[];var categories=params.categories||[];var getUnusedColor=makeUniqueColorGetter(fills);// Initialize with default values
	while(fills.length<categories.length){fills.push(getUnusedColor());}var self=this;for(var i=0;i<categories.length;i++){(function(I){var legend_target={};legend_target[value_key]={};for(var j=0;j<categories.length;j++){legend_target[value_key][categories[j]]=0;}legend_target[value_key][categories[I]]=1;self.addRule(function(d){return d[NA_STRING]!==true;},{shapes:[{type:'rectangle',fill:fills[I],width:'100%',height:function height(d){var total=0;for(var j=0;j<categories.length;j++){total+=parseFloat(d[value_key][categories[j]]);}return parseFloat(d[value_key][categories[I]])*100/total+'%';},y:function y(d){var total=0;var prev_vals_sum=0;for(var j=0;j<categories.length;j++){var new_val=parseFloat(d[value_key][categories[j]]);if(j<I){prev_vals_sum+=new_val;}total+=new_val;}return prev_vals_sum*100/total+'%';}}],exclude_from_legend:false,legend_config:{'type':'rule','target':legend_target},legend_label:categories[I]});})(i);}}StackedBarRuleSet.prototype=Object.create(ConditionRuleSet.prototype);return StackedBarRuleSet;}();var GeneticAlterationRuleSet=function(){function GeneticAlterationRuleSet(params){/* params:
	             * - rule_params
	             */LookupRuleSet.call(this,params);(function addRules(self){var rule_params=params.rule_params;for(var key in rule_params){if(rule_params.hasOwnProperty(key)){var key_rule_params=rule_params[key];if(key==='*'){self.addRule(null,null,shallowExtend(rule_params['*'],{'legend_config':{'type':'rule','target':{}}}));}else{for(var value in key_rule_params){if(key_rule_params.hasOwnProperty(value)){var equiv_values=value.split(",");var legend_rule_target={};legend_rule_target[equiv_values[0]]=value;var rule_id=self.addRule(key,equiv_values[0]==='*'?null:equiv_values[0],shallowExtend(key_rule_params[value],{'legend_config':{'type':'rule','target':legend_rule_target}}));for(var i=1;i<equiv_values.length;i++){self.linkExistingRule(key,equiv_values[i]==='*'?null:equiv_values[i],rule_id);}}}}}}})(this);}GeneticAlterationRuleSet.prototype=Object.create(LookupRuleSet.prototype);return GeneticAlterationRuleSet;}();var Rule=function(){function Rule(params){this.shapes=params.shapes.map(function(shape){if(shape.type==='rectangle'){return new Shape.Rectangle(shape);}else if(shape.type==='triangle'){return new Shape.Triangle(shape);}else if(shape.type==='ellipse'){return new Shape.Ellipse(shape);}else if(shape.type==='line'){return new Shape.Line(shape);}});this.legend_label=typeof params.legend_label==="undefined"?"":params.legend_label;this.exclude_from_legend=params.exclude_from_legend;this.legend_config=params.legend_config;// {'type':'rule', 'target': {'mut_type':'MISSENSE'}} or {'type':'number', 'color':'rgba(1,2,3,1), 'range':[lower, upper]} or {'type':'gradient', 'color_range':['rgba(...)' or '#...', 'rgba(...)' or '#...'], 'number_range':[lower, upper]}
	}Rule.prototype.getLegendConfig=function(){return this.legend_config;};Rule.prototype.apply=function(d,cell_width,cell_height){// Gets concrete shapes (i.e. computed
	// real values from percentages)
	var concrete_shapes=[];for(var i=0,shapes_len=this.shapes.length;i<shapes_len;i++){concrete_shapes.push(this.shapes[i].getComputedParams(d,cell_width,cell_height));}return concrete_shapes;};Rule.prototype.isExcludedFromLegend=function(){return this.exclude_from_legend;};return Rule;}();module.exports=function(params){if(params.type==='categorical'){return new CategoricalRuleSet(params);}else if(params.type==='gradient'){return new GradientRuleSet(params);}else if(params.type==='bar'){return new BarRuleSet(params);}else if(params.type==='stacked_bar'){return new StackedBarRuleSet(params);}else if(params.type==='gene'){return new GeneticAlterationRuleSet(params);}};},{"./oncoprintshape.js":10}],10:[function(require,module,exports){var Shape=function(){var default_parameter_values={'width':'100%','height':'100%','x':'0%','y':'0%','z':0,'x1':'0%','x2':'0%','x3':'0%','y1':'0%','y2':'0%','y3':'0%','stroke':'rgba(0,0,0,0)','fill':'rgba(23,23,23,1)','stroke-width':'0','stroke-opacity':'0'};var parameter_name_to_dimension_index={'stroke-width':0,'width':0,'x':0,'x1':0,'x2':0,'x3':0,'height':1,'y':1,'y1':1,'y2':1,'y3':1};function Shape(params){this.params=params;this.params_with_type={};this.completeWithDefaults();this.markParameterTypes();}Shape.prototype.completeWithDefaults=function(){var required_parameters=this.getRequiredParameters();for(var i=0;i<required_parameters.length;i++){var param=required_parameters[i];this.params[param]=typeof this.params[param]==='undefined'?default_parameter_values[param]:this.params[param];}};Shape.prototype.markParameterTypes=function(){var parameters=Object.keys(this.params);for(var i=0;i<parameters.length;i++){var param_name=parameters[i];var param_val=this.params[param_name];if(typeof param_val==='function'){this.params_with_type[param_name]={'type':'function','value':param_val};}else{this.params_with_type[param_name]={'type':'value','value':param_val};}}};Shape.prototype.getComputedParams=function(d,base_width,base_height){var computed_params={};var param_names=Object.keys(this.params_with_type);var dimensions=[base_width,base_height];for(var i=0;i<param_names.length;i++){var param_name=param_names[i];var param_val_map=this.params_with_type[param_name];var param_val=param_val_map.value;if(param_name!=='type'){if(param_val_map.type==='function'){param_val=param_val(d);}if(param_val[param_val.length-1]==='%'){// check a couple of commonly-used special cases to avoid slower parseFloat
	if(param_val==='100%'){param_val=1;}else{param_val=parseFloat(param_val)/100;}param_val*=dimensions[parameter_name_to_dimension_index[param_name]];}}computed_params[param_name]=param_val;}return computed_params;};return Shape;}();var Rectangle=function(){function Rectangle(params){Shape.call(this,params);}Rectangle.prototype=Object.create(Shape.prototype);Rectangle.prototype.getRequiredParameters=function(){return['width','height','x','y','z','stroke','fill','stroke-width'];};return Rectangle;}();var Triangle=function(){function Triangle(params){Shape.call(this,params);}Triangle.prototype=Object.create(Shape.prototype);Triangle.prototype.getRequiredParameters=function(){return['x1','x2','x3','y1','y2','y3','z','stroke','fill','stroke-width'];};return Triangle;}();var Ellipse=function(){function Ellipse(params){Shape.call(this,params);}Ellipse.prototype=Object.create(Shape.prototype);Ellipse.prototype.getRequiredParameters=function(){return['width','height','x','y','z','stroke','fill','stroke-width'];};return Ellipse;}();var Line=function(){function Line(params){Shape.call(this,params);}Line.prototype=Object.create(Shape.prototype);Line.prototype.getRequiredParameters=function(){return['x1','x2','y1','y2','z','stroke','stroke-width'];};return Line;}();module.exports={'Rectangle':Rectangle,'Triangle':Triangle,'Ellipse':Ellipse,'Line':Line};},{}],11:[function(require,module,exports){var makeSVGElement=function makeSVGElement(tag,attrs){var el=document.createElementNS('http://www.w3.org/2000/svg',tag);for(var k in attrs){if(attrs.hasOwnProperty(k)){el.setAttribute(k,attrs[k]);}}return el;};var extractRGBA=function extractRGBA(str){var ret=[0,0,0,1];if(str[0]==="#"){// hex, convert to rgba
	var r=parseInt(str[1]+str[2],16);var g=parseInt(str[3]+str[4],16);var b=parseInt(str[5]+str[6],16);str='rgba('+r+','+g+','+b+',1)';}var match=str.match(/^[\s]*rgba\([\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*,[\s]*([0-9.]+)[\s]*\)[\s]*$/);if(match&&match.length===5){ret=[parseFloat(match[1])/255,parseFloat(match[2])/255,parseFloat(match[3])/255,parseFloat(match[4])];}return ret;};var extractColor=function extractColor(str){if(str.indexOf("rgb(")>-1){return{'rgb':str,'opacity':1};}var rgba_arr=extractRGBA(str);return{'rgb':'rgb('+rgba_arr[0]*255+','+rgba_arr[1]*255+','+rgba_arr[2]*255+')','opacity':rgba_arr[3]};};var rectangleToSVG=function rectangleToSVG(params,offset_x,offset_y){var stroke_color=extractColor(params.stroke);var fill_color=extractColor(params.fill);return makeSVGElement('rect',{width:params.width,height:params.height,x:parseFloat(params.x)+offset_x,y:parseFloat(params.y)+offset_y,stroke:stroke_color.rgb,'stroke-opacity':stroke_color.opacity,'stroke-width':params['stroke-width'],fill:fill_color.rgb,'fill-opacity':fill_color.opacity});};var triangleToSVG=function triangleToSVG(params,offset_x,offset_y){var stroke_color=extractColor(params.stroke);var fill_color=extractColor(params.fill);return makeSVGElement('polygon',{points:[[parseFloat(params.x1)+offset_x,parseFloat(params.y1)+offset_y],[parseFloat(params.x2)+offset_x,parseFloat(params.y2)+offset_y],[parseFloat(params.x3)+offset_x,parseFloat(params.y3)+offset_y]].map(function(a){return a[0]+','+a[1];}).join(' '),stroke:stroke_color.rgb,'stroke-opacity':stroke_color.opacity,'stroke-width':params['stroke-width'],fill:fill_color.rgb,'fill-opacity':fill_color.opacity});};var ellipseToSVG=function ellipseToSVG(params,offset_x,offset_y){var stroke_color=extractColor(params.stroke);var fill_color=extractColor(params.fill);return makeSVGElement('ellipse',{rx:parseFloat(params.width)/2,height:parseFloat(params.height)/2,cx:parseFloat(params.x)+offset_x,cy:parseFloat(params.y)+offset_y,stroke:stroke_color.rgb,'stroke-opacity':stroke_color.opacity,'stroke-width':params['stroke-width'],fill:fill_color.rgb,'fill-opacity':fill_color.opacity});};var lineToSVG=function lineToSVG(params,offset_x,offset_y){var stroke_color=extractColor(params.stroke);return makeSVGElement('line',{x1:parseFloat(params.x1)+offset_x,y1:parseFloat(params.y1)+offset_y,x2:parseFloat(params.x2)+offset_x,y2:parseFloat(params.y2)+offset_y,stroke:stroke_color.rgb,'stroke-opacity':stroke_color.opacity,'stroke-width':params['stroke-width']});};module.exports=function(oncoprint_shape_computed_params,offset_x,offset_y){var type=oncoprint_shape_computed_params.type;if(type==='rectangle'){return rectangleToSVG(oncoprint_shape_computed_params,offset_x,offset_y);}else if(type==='triangle'){return triangleToSVG(oncoprint_shape_computed_params,offset_x,offset_y);}else if(type==='ellipse'){return ellipseToSVG(oncoprint_shape_computed_params,offset_x,offset_y);}else if(type==='line'){return lineToSVG(oncoprint_shape_computed_params,offset_x,offset_y);}};},{}],12:[function(require,module,exports){var OncoprintToolTip=function(){function OncoprintToolTip($container,params){params=params||{};this.$container=$container;this.$div=$('<div></div>').appendTo($container).css({'background-color':'rgba(255,255,255,1)','position':'absolute','display':'none','border':'1px solid black','max-width':300,'min-width':150});if(params.noselect){this.$div.addClass("noselect");}this.hide_timeout_id=undefined;this.show_timeout_id=undefined;this.center=false;this.shown=false;var self=this;this.$div.on("mousemove",function(evt){evt.stopPropagation();cancelScheduledHide(self);});this.$div.on("mouseleave",function(evt){evt.stopPropagation();self.hide();});}OncoprintToolTip.prototype.show=function(wait,page_x,page_y,html_str,fade){cancelScheduledHide(this);if(typeof wait!=='undefined'&&!this.shown){var self=this;cancelScheduledShow(this);this.show_timeout_id=setTimeout(function(){doShow(self,page_x,page_y,html_str,fade);},wait);}else{doShow(this,page_x,page_y,html_str,fade);}};var doShow=function doShow(tt,page_x,page_y,html_str,fade){cancelScheduledShow(tt);tt.show_timeout_id=undefined;tt.$div.html(html_str);if(!fade){tt.$div.show();}else{tt.$div.stop().fadeIn('fast');}var container_offset=tt.$container.offset();var x=page_x-container_offset.left-(tt.center?tt.$div.width()/2:0);var y=page_y-container_offset.top-tt.$div.height();tt.$div.css({'top':y,'left':x,'z-index':9999});tt.shown=true;};var doHide=function doHide(tt,fade){cancelScheduledHide(tt);tt.hide_timeout_id=undefined;if(!fade){tt.$div.hide();}else{tt.$div.fadeOut();}tt.shown=false;};var cancelScheduledShow=function cancelScheduledShow(tt){clearTimeout(tt.show_timeout_id);tt.show_timeout_id=undefined;};var cancelScheduledHide=function cancelScheduledHide(tt){clearTimeout(tt.hide_timeout_id);tt.hide_timeout_id=undefined;};OncoprintToolTip.prototype.showIfNotAlreadyGoingTo=function(wait,page_x,page_y,html_str){if(typeof this.show_timeout_id==='undefined'){this.show(wait,page_x,page_y,html_str);}};OncoprintToolTip.prototype.hideIfNotAlreadyGoingTo=function(wait){if(typeof this.hide_timeout_id==='undefined'){this.hide(wait);}};OncoprintToolTip.prototype.hide=function(wait){cancelScheduledShow(this);if(!this.shown){return;}if(typeof wait!=='undefined'){var self=this;cancelScheduledHide(this);this.hide_timeout_id=setTimeout(function(){doHide(self);},wait);}else{doHide(this);}};OncoprintToolTip.prototype.fadeIn=function(wait,page_x,page_y,html_str){this.show(wait,page_x,page_y,html_str,true);};return OncoprintToolTip;}();module.exports=OncoprintToolTip;},{}],13:[function(require,module,exports){var svgfactory=require('./svgfactory.js');var OncoprintTrackInfoView=function(){function OncoprintTrackInfoView($div){this.$div=$div;this.font_size=12;this.font_family='Arial';this.font_weight='bold';this.width=0;this.rendering_suppressed=false;}var renderAllInfo=function renderAllInfo(view,model){if(view.rendering_suppressed){return;}view.$div.empty();var tracks=model.getTracks();view.width=0;var label_tops=model.getLabelTops();for(var i=0;i<tracks.length;i++){var $new_label=$('<span>').css({'position':'absolute','font-family':view.font_family,'font-weight':view.font_weight,'font-size':view.font_size}).addClass('noselect');$new_label.text(model.getTrackInfo(tracks[i]));$new_label.appendTo(view.$div);$new_label.css({'top':label_tops[tracks[i]]+(model.getCellHeight(tracks[i])-$new_label.outerHeight())/2});view.width=Math.max(view.width,$new_label[0].clientWidth);}};var resize=function resize(view,model){view.$div.css({'width':view.getWidth(),'height':model.getCellViewHeight()});};OncoprintTrackInfoView.prototype.getWidth=function(){return this.width+10;};OncoprintTrackInfoView.prototype.addTracks=function(model){renderAllInfo(this,model);resize(this,model);};OncoprintTrackInfoView.prototype.moveTrack=function(model){renderAllInfo(this,model);resize(this,model);};OncoprintTrackInfoView.prototype.removeTrack=function(model){renderAllInfo(this,model);resize(this,model);};OncoprintTrackInfoView.prototype.setTrackInfo=function(model){renderAllInfo(this,model);resize(this,model);};OncoprintTrackInfoView.prototype.suppressRendering=function(){this.rendering_suppressed=true;};OncoprintTrackInfoView.prototype.releaseRendering=function(model){this.rendering_suppressed=false;renderAllInfo(this,model);resize(this,model);};OncoprintTrackInfoView.prototype.toSVGGroup=function(model,offset_x,offset_y){var root=svgfactory.group(offset_x||0,offset_y||0);var cell_tops=model.getCellTops();var tracks=model.getTracks();for(var i=0;i<tracks.length;i++){var track_id=tracks[i];var y=cell_tops[track_id]+model.getCellHeight(track_id)/2;var info=model.getTrackInfo(track_id);var text_elt=svgfactory.text(info,0,y,this.font_size,this.font_family,this.font_weight,"bottom");text_elt.setAttribute("dy","0.35em");root.appendChild(text_elt);}return root;};return OncoprintTrackInfoView;}();module.exports=OncoprintTrackInfoView;},{"./svgfactory.js":16}],14:[function(require,module,exports){var OncoprintTrackOptionsView=function(){function OncoprintTrackOptionsView($div,moveUpCallback,moveDownCallback,removeCallback,sortChangeCallback){// removeCallback: function(track_id)
	var position=$div.css('position');if(position!=='absolute'&&position!=='relative'){console.log("WARNING: div passed to OncoprintTrackOptionsView must be absolute or relative positioned - layout problems will occur");}this.moveUpCallback=moveUpCallback;this.moveDownCallback=moveDownCallback;this.removeCallback=removeCallback;// function(track_id) { ... }
	this.sortChangeCallback=sortChangeCallback;// function(track_id, dir) { ... }
	this.$div=$div;this.img_size;this.rendering_suppressed=false;this.track_options_$elts={};this.menu_shown={};var self=this;$(document).click(function(){for(var track_id in self.track_options_$elts){if(self.track_options_$elts.hasOwnProperty(track_id)){hideTrackMenu(self,track_id);}}});this.interaction_disabled=false;}var renderAllOptions=function renderAllOptions(view,model){if(this.rendering_suppressed){return;}view.$div.empty();var tracks=model.getTracks();var minimum_track_height=Number.POSITIVE_INFINITY;for(var i=0;i<tracks.length;i++){minimum_track_height=Math.min(minimum_track_height,model.getTrackHeight(tracks[i]));}view.img_size=Math.floor(minimum_track_height*0.75);for(var i=0;i<tracks.length;i++){renderTrackOptions(view,model,tracks[i]);}};var hideTrackMenu=function hideTrackMenu(view,track_id){view.menu_shown[track_id]=false;var $elts=view.track_options_$elts[track_id];$elts.$div.css({'z-index':1});$elts.$dropdown.css({'border':'1px solid rgba(125,125,125,0)'});$elts.$img.css({'border':'1px solid rgba(125,125,125,0)'});$elts.$dropdown.fadeOut(100);};var showTrackMenu=function showTrackMenu(view,track_id){view.menu_shown[track_id]=true;var $elts=view.track_options_$elts[track_id];$elts.$div.css({'z-index':10});$elts.$dropdown.css({'border':'1px solid rgba(125,125,125,1)'});$elts.$img.css({'border':'1px solid rgba(125,125,125,1)'});$elts.$dropdown.fadeIn(100);};var hideMenusExcept=function hideMenusExcept(view,track_id){track_id=track_id.toString();for(var other_track_id in view.track_options_$elts){if(view.track_options_$elts.hasOwnProperty(other_track_id)){if(other_track_id===track_id){continue;}hideTrackMenu(view,other_track_id);}}};var $makeDropdownOption=function $makeDropdownOption(text,weight,callback){return $('<li>').text(text).css({'font-weight':weight,'font-size':12,'cursor':'pointer','border-bottom':'1px solid rgba(0,0,0,0.3)'}).click(callback).hover(function(){$(this).css({'background-color':'rgb(200,200,200)'});},function(){$(this).css({'background-color':'rgba(255,255,255,0)'});});};var $makeDropdownSeparator=function $makeDropdownSeparator(){return $('<li>').css({'border-top':'1px solid black'});};var renderTrackOptions=function renderTrackOptions(view,model,track_id){var $div,$img,$dropdown;//if (model.isTrackRemovable(track_id) || model.isTrackSortDirectionChangeable(track_id)) {
	$div=$('<div>').appendTo(view.$div).css({'position':'absolute','left':'0px','top':model.getTrackTops(track_id)+'px'});$img=$('<img/>').appendTo($div).attr({'src':'images/menudots.svg','width':view.img_size,'height':view.img_size,'alt':'Track options'}).css({'float':'left','cursor':'pointer','border':'1px solid rgba(125,125,125,0)'});$dropdown=$('<ul>').appendTo($div).css({'width':120,'display':'none','list-style-type':'none','padding-left':'6','padding-right':'6','float':'right','background-color':'rgb(255,255,255)'});view.track_options_$elts[track_id]={'$div':$div,'$img':$img,'$dropdown':$dropdown};$img.hover(function(evt){if(!view.menu_shown[track_id]){$(this).css({'border':'1px solid rgba(125,125,125,0.3)'});}},function(evt){if(!view.menu_shown[track_id]){$(this).css({'border':'1px solid rgba(125,125,125,0)'});}});$img.click(function(evt){evt.stopPropagation();if($dropdown.is(":visible")){hideTrackMenu(view,track_id);}else{showTrackMenu(view,track_id);}hideMenusExcept(view,track_id);});//}
	$dropdown.append($makeDropdownOption('Move up','normal',function(evt){evt.stopPropagation();view.moveUpCallback(track_id);}));$dropdown.append($makeDropdownOption('Move down','normal',function(evt){evt.stopPropagation();view.moveDownCallback(track_id);}));if(model.isTrackRemovable(track_id)){$dropdown.append($makeDropdownOption('Remove track','normal',function(evt){evt.stopPropagation();view.removeCallback(track_id);}));}if(model.isTrackSortDirectionChangeable(track_id)){$dropdown.append($makeDropdownSeparator());var $sort_inc_li;var $sort_dec_li;var $dont_sort_li;$sort_inc_li=$makeDropdownOption('Sort a-Z',model.getTrackSortDirection(track_id)===1?'bold':'normal',function(evt){evt.stopPropagation();$sort_inc_li.css('font-weight','bold');$sort_dec_li.css('font-weight','normal');$dont_sort_li.css('font-weight','normal');view.sortChangeCallback(track_id,1);});$sort_dec_li=$makeDropdownOption('Sort Z-a',model.getTrackSortDirection(track_id)===-1?'bold':'normal',function(evt){evt.stopPropagation();$sort_inc_li.css('font-weight','normal');$sort_dec_li.css('font-weight','bold');$dont_sort_li.css('font-weight','normal');view.sortChangeCallback(track_id,-1);});$dont_sort_li=$makeDropdownOption('Don\'t sort track',model.getTrackSortDirection(track_id)===0?'bold':'normal',function(evt){evt.stopPropagation();$sort_inc_li.css('font-weight','normal');$sort_dec_li.css('font-weight','normal');$dont_sort_li.css('font-weight','bold');view.sortChangeCallback(track_id,0);});$dropdown.append($sort_inc_li);$dropdown.append($sort_dec_li);$dropdown.append($dont_sort_li);}};OncoprintTrackOptionsView.prototype.enableInteraction=function(){this.interaction_disabled=false;};OncoprintTrackOptionsView.prototype.disableInteraction=function(){this.interaction_disabled=true;};OncoprintTrackOptionsView.prototype.suppressRendering=function(){this.rendering_suppressed=true;};OncoprintTrackOptionsView.prototype.releaseRendering=function(model){this.rendering_suppressed=false;renderAllOptions(this,model);};OncoprintTrackOptionsView.prototype.getWidth=function(){return 10+this.img_size;};OncoprintTrackOptionsView.prototype.addTracks=function(model){renderAllOptions(this,model);};OncoprintTrackOptionsView.prototype.moveTrack=function(model){renderAllOptions(this,model);};OncoprintTrackOptionsView.prototype.removeTrack=function(model,track_id){delete this.track_options_$elts[track_id];renderAllOptions(this,model);};return OncoprintTrackOptionsView;}();module.exports=OncoprintTrackOptionsView;},{}],15:[function(require,module,exports){var gl_matrix=require('gl-matrix');var svgfactory=require('./svgfactory.js');// TODO: antialiasing
	var getNewCanvas=function getNewCanvas(view){var old_canvas=view.$canvas[0];var new_canvas=old_canvas.cloneNode();var parent_node=old_canvas.parentNode;parent_node.removeChild(old_canvas);parent_node.insertBefore(new_canvas,view.$overlay_canvas[0]);view.$canvas=$(new_canvas);};var getWebGLCanvasContext=function getWebGLCanvasContext(view){try{var canvas=view.$canvas[0];var ctx=canvas.getContext("experimental-webgl",{alpha:false,antialias:view.antialias});ctx.clearColor(1.0,1.0,1.0,1.0);ctx.clear(ctx.COLOR_BUFFER_BIT|ctx.DEPTH_BUFFER_BIT);ctx.viewportWidth=canvas.width;ctx.viewportHeight=canvas.height;ctx.viewport(0,0,ctx.viewportWidth,ctx.viewportHeight);ctx.enable(ctx.DEPTH_TEST);ctx.enable(ctx.BLEND);ctx.blendEquation(ctx.FUNC_ADD);ctx.blendFunc(ctx.SRC_ALPHA,ctx.ONE_MINUS_SRC_ALPHA);ctx.depthMask(false);return ctx;}catch(e){return null;}};var extractRGBA=function extractRGBA(str){var ret=[0,0,0,1];if(str[0]==="#"){// hex, convert to rgba
	var r=parseInt(str[1]+str[2],16);var g=parseInt(str[3]+str[4],16);var b=parseInt(str[5]+str[6],16);str='rgba('+r+','+g+','+b+',1)';}var match=str.match(/^[\s]*rgba\([\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*,[\s]*([0-9.]+)[\s]*\)[\s]*$/);if(match&&match.length===5){ret=[parseFloat(match[1])/255,parseFloat(match[2])/255,parseFloat(match[3])/255,parseFloat(match[4])];}return ret;};var createShaderProgram=function createShaderProgram(view,vertex_shader,fragment_shader){var program=view.ctx.createProgram();view.ctx.attachShader(program,vertex_shader);view.ctx.attachShader(program,fragment_shader);view.ctx.linkProgram(program);var success=view.ctx.getProgramParameter(program,view.ctx.LINK_STATUS);if(!success){var msg=view.ctx.getProgramInfoLog(program);view.ctx.deleteProgram(program);throw"Unable to link shader program: "+msg;}return program;};var createShader=function createShader(view,source,type){var shader=view.ctx.createShader(view.ctx[type]);view.ctx.shaderSource(shader,source);view.ctx.compileShader(shader);var success=view.ctx.getShaderParameter(shader,view.ctx.COMPILE_STATUS);if(!success){var msg=view.ctx.getShaderInfoLog(shader);view.ctx.deleteShader(shader);throw"Unable to compile shader: "+msg;}return shader;};var OncoprintWebGLCellView=function(){function OncoprintWebGLCellView($container,$canvas,$overlay_canvas,$dummy_scroll_div,model,tooltip,highlight_area_callback){this.$container=$container;this.$canvas=$canvas;this.$overlay_canvas=$overlay_canvas;this.supersampling_ratio=2;this.antialias=true;this.antialias_on_cell_width_thresh=5;getWebGLContextAndSetUpMatricesAndShaders(this);getOverlayContextAndClear(this);this.visible_area_width=$canvas[0].width;var self=this;this.$container.scroll(function(){var scroll_left=self.$container.scrollLeft();self.$canvas.css('left',scroll_left);self.$overlay_canvas.css('left',scroll_left);self.scroll(model,scroll_left);});this.tooltip=tooltip;this.tooltip.center=true;this.scroll_x=0;this.scroll_y=0;this.$dummy_scroll_div=$dummy_scroll_div;this.identified_shape_list_list={};this.vertex_position_buffer_by_zone={};// track_id -> zone_id -> gl.createBuffer()
	this.vertex_color_buffer_by_zone={};// track_id -> zone_id -> gl.createBuffer()
	this.vertex_position_array={};// track_id -> zone_id -> vertex list
	this.vertex_color_array={};// track_id -> zone_id -> vertex list
	this.rendering_suppressed=false;this.highlight_area_callback=typeof highlight_area_callback==='undefined'?function(){}:highlight_area_callback;// function(left, right) { ... }
	(function initializeOverlayEvents(self){var dragging=false;var drag_diff_minimum=10;var drag_start_x;var drag_end_x;var prev_overlapping_cell=null;var dragIsValid=function dragIsValid(drag_start_x,drag_end_x){return Math.abs(drag_start_x-drag_end_x)>=drag_diff_minimum;};var executeDrag=function executeDrag(){if(!dragging){return;}dragging=false;if(!dragIsValid(drag_start_x,drag_end_x)){return;}var left=Math.min(drag_start_x,drag_end_x);var right=Math.max(drag_start_x,drag_end_x);self.highlight_area_callback(left+self.scroll_x,right+self.scroll_x);};$(document).on("mousemove",function(){if(self.rendering_suppressed){return;}clearOverlay(self);tooltip.hide();});self.$overlay_canvas.on("mousemove",function(evt){evt.stopPropagation();if(self.rendering_suppressed){return;}clearOverlay(self);var offset=self.$overlay_canvas.offset();var mouseX=evt.pageX-offset.left;var mouseY=evt.pageY-offset.top;if(!dragging){var overlapping_cell=model.getOverlappingCell(mouseX+self.scroll_x,mouseY);var overlapping_datum=overlapping_cell===null?null:model.getTrackDatum(overlapping_cell.track,overlapping_cell.id);if(overlapping_datum!==null){var left=model.getZoomedColumnLeft(overlapping_cell.id)-self.scroll_x;overlayStrokeRect(self,left,model.getCellTops(overlapping_cell.track),model.getCellWidth(),model.getCellHeight(overlapping_cell.track),"rgba(0,0,0,1)");var tracks=model.getTracks();for(var i=0;i<tracks.length;i++){if(model.getTrackDatum(tracks[i],overlapping_cell.id)!==null){overlayStrokeRect(self,left,model.getCellTops(tracks[i]),model.getCellWidth(),model.getCellHeight(tracks[i]),"rgba(0,0,0,0.5)");}}tooltip.show(250,model.getZoomedColumnLeft(overlapping_cell.id)+model.getCellWidth()/2+offset.left-self.scroll_x,model.getCellTops(overlapping_cell.track)+offset.top,model.getTrackTooltipFn(overlapping_cell.track)(overlapping_datum));prev_overlapping_cell=overlapping_cell;}else{tooltip.hideIfNotAlreadyGoingTo(150);overlapping_cell=null;}}else{overlapping_cell=null;drag_end_x=mouseX;var left=Math.min(mouseX,drag_start_x);var right=Math.max(mouseX,drag_start_x);var drag_rect_fill=dragIsValid(drag_start_x,drag_end_x)?'rgba(0,0,0,0.3)':'rgba(0,0,0,0.2)';overlayFillRect(self,left,0,right-left,model.getCellViewHeight(),drag_rect_fill);}});self.$overlay_canvas.on("mousedown",function(evt){dragging=true;drag_start_x=evt.pageX-self.$overlay_canvas.offset().left;drag_end_x=drag_start_x;tooltip.hide();});self.$overlay_canvas.on("mouseup",function(evt){executeDrag();});self.$overlay_canvas.on("mouseleave",function(evt){executeDrag();});})(this);}var overlayStrokeRect=function overlayStrokeRect(view,x,y,width,height,color){var ctx=view.overlay_ctx;ctx.strokeStyle=color;ctx.strokeWidth=10;ctx.strokeRect(view.supersampling_ratio*x,view.supersampling_ratio*y,view.supersampling_ratio*width,view.supersampling_ratio*height);};var overlayFillRect=function overlayFillRect(view,x,y,width,height,color){var ctx=view.overlay_ctx;ctx.fillStyle=color;ctx.fillRect(view.supersampling_ratio*x,view.supersampling_ratio*y,view.supersampling_ratio*width,view.supersampling_ratio*height);};var clearOverlay=function clearOverlay(view){view.overlay_ctx.fillStyle="rgba(0,0,0,0)";view.overlay_ctx.clearRect(0,0,view.$overlay_canvas[0].width,view.$overlay_canvas[0].height);};var getOverlayContextAndClear=function getOverlayContextAndClear(view){view.overlay_ctx=view.$overlay_canvas[0].getContext('2d');clearOverlay(view);};var getWebGLContextAndSetUpMatrices=function getWebGLContextAndSetUpMatrices(view){view.ctx=getWebGLCanvasContext(view);(function initializeMatrices(self){var mvMatrix=gl_matrix.mat4.create();gl_matrix.mat4.lookAt(mvMatrix,[0,0,1],[0,0,0],[0,1,0]);self.mvMatrix=mvMatrix;var pMatrix=gl_matrix.mat4.create();gl_matrix.mat4.ortho(pMatrix,0,self.ctx.viewportWidth,self.ctx.viewportHeight,0,-5,1000);// y axis inverted so that y increases down like SVG
	self.pMatrix=pMatrix;})(view);};var getWebGLContextAndSetUpMatricesAndShaders=function getWebGLContextAndSetUpMatricesAndShaders(view){getWebGLContextAndSetUpMatrices(view);(function initializeShaders(self){// Initialize shaders
	var vertex_shader_source=['attribute vec3 aVertexPosition;','attribute vec4 aVertexColor;','','uniform float scrollX;','uniform float zoomX;','uniform float scrollY;','uniform float zoomY;','uniform mat4 uMVMatrix;','uniform mat4 uPMatrix;','uniform float offsetY;','uniform float supersamplingRatio;','varying vec4 vColor;','void main(void) {','	gl_Position = vec4(aVertexPosition, 1.0);','	gl_Position[1] += offsetY;','	gl_Position[0] *= zoomX;','	gl_Position -= vec4(scrollX, 0.0, 0.0, 0.0);','	gl_Position[0] *= supersamplingRatio;','	gl_Position[1] *= supersamplingRatio;','	gl_Position = uPMatrix * uMVMatrix * gl_Position;','	vColor = aVertexColor;','}'].join('\n');var fragment_shader_source=['precision mediump float;','varying vec4 vColor;','','void main(void) {','   gl_FragColor = vColor;','}'].join('\n');var vertex_shader=createShader(self,vertex_shader_source,'VERTEX_SHADER');var fragment_shader=createShader(self,fragment_shader_source,'FRAGMENT_SHADER');var shader_program=createShaderProgram(self,vertex_shader,fragment_shader);shader_program.vertexPositionAttribute=self.ctx.getAttribLocation(shader_program,'aVertexPosition');self.ctx.enableVertexAttribArray(shader_program.vertexPositionAttribute);shader_program.vertexColorAttribute=self.ctx.getAttribLocation(shader_program,'aVertexColor');self.ctx.enableVertexAttribArray(shader_program.vertexColorAttribute);shader_program.pMatrixUniform=self.ctx.getUniformLocation(shader_program,'uPMatrix');shader_program.mvMatrixUniform=self.ctx.getUniformLocation(shader_program,'uMVMatrix');shader_program.scrollXUniform=self.ctx.getUniformLocation(shader_program,'scrollX');shader_program.zoomXUniform=self.ctx.getUniformLocation(shader_program,'zoomX');shader_program.offsetYUniform=self.ctx.getUniformLocation(shader_program,'offsetY');shader_program.supersamplingRatioUniform=self.ctx.getUniformLocation(shader_program,'supersamplingRatio');self.shader_program=shader_program;})(view);};var resizeAndClear=function resizeAndClear(view,model){var height=model.getCellViewHeight();var total_width=view.getTotalWidth(model);var visible_area_width=view.visible_area_width;view.$dummy_scroll_div.css('width',total_width);view.$canvas[0].height=view.supersampling_ratio*height;view.$canvas[0].style.height=height+'px';view.$overlay_canvas[0].height=view.supersampling_ratio*height;view.$overlay_canvas[0].style.height=height+'px';view.$canvas[0].width=view.supersampling_ratio*visible_area_width;view.$canvas[0].style.width=visible_area_width+'px';view.$overlay_canvas[0].width=view.supersampling_ratio*visible_area_width;view.$overlay_canvas[0].style.width=visible_area_width+'px';view.$container.css('height',height);view.$container.css('width',visible_area_width);view.$container.scrollLeft(Math.min(view.$container.scrollLeft(),total_width-view.visible_area_width));getWebGLContextAndSetUpMatrices(view);getOverlayContextAndClear(view);};var renderAllTracks=function renderAllTracks(view,model){if(view.rendering_suppressed){return;}var scroll_x=view.scroll_x;var zoom_x=model.getHorzZoom();var horz_zone_id=Math.floor(scroll_x/view.visible_area_width);resizeAndClear(view,model);view.ctx.clearColor(1.0,1.0,1.0,1.0);view.ctx.clear(view.ctx.COLOR_BUFFER_BIT|view.ctx.DEPTH_BUFFER_BIT);var tracks=model.getTracks();for(var i=0;i<tracks.length;i++){var track_id=tracks[i];var cell_top=model.getCellTops(track_id);var buffers=getZoneBuffers(view,track_id,horz_zone_id);if(buffers.position.numItems===0){continue;}view.ctx.useProgram(view.shader_program);view.ctx.bindBuffer(view.ctx.ARRAY_BUFFER,buffers.position);view.ctx.vertexAttribPointer(view.shader_program.vertexPositionAttribute,buffers.position.itemSize,view.ctx.FLOAT,false,0,0);view.ctx.bindBuffer(view.ctx.ARRAY_BUFFER,buffers.color);view.ctx.vertexAttribPointer(view.shader_program.vertexColorAttribute,buffers.color.itemSize,view.ctx.FLOAT,false,0,0);view.ctx.uniformMatrix4fv(view.shader_program.pMatrixUniform,false,view.pMatrix);view.ctx.uniformMatrix4fv(view.shader_program.mvMatrixUniform,false,view.mvMatrix);view.ctx.uniform1f(view.shader_program.scrollXUniform,scroll_x);view.ctx.uniform1f(view.shader_program.zoomXUniform,zoom_x);view.ctx.uniform1f(view.shader_program.offsetYUniform,cell_top);view.ctx.uniform1f(view.shader_program.supersamplingRatioUniform,view.supersampling_ratio);view.ctx.drawArrays(view.ctx.TRIANGLES,0,buffers.position.numItems);}};var addVertexColor=function addVertexColor(vertex_color_array,rgba_str,n_times){var color=extractRGBA(rgba_str);for(var h=0;h<n_times;h++){vertex_color_array.push(color[0],color[1],color[2],color[3]);}};var clearZoneBuffers=function clearZoneBuffers(view,model,track_id){var tracks_to_clear;if(typeof track_id==='undefined'){tracks_to_clear=model.getTracks();}else{tracks_to_clear=[track_id];}for(var i=0;i<tracks_to_clear.length;i++){delete view.vertex_position_buffer_by_zone[tracks_to_clear[i]];delete view.vertex_color_buffer_by_zone[tracks_to_clear[i]];}};var getZoneBuffers=function getZoneBuffers(view,track_id,zone_id){view.vertex_position_buffer_by_zone[track_id]=view.vertex_position_buffer_by_zone[track_id]||{};view.vertex_color_buffer_by_zone[track_id]=view.vertex_color_buffer_by_zone[track_id]||{};if(typeof view.vertex_position_buffer_by_zone[track_id][zone_id]==='undefined'){var vertex_position_buffer=view.ctx.createBuffer();var vertex_color_buffer=view.ctx.createBuffer();var vertex_position_array=[];var vertex_color_array=[];for(var z=0;z<2;z++){if(view.vertex_position_array[track_id].hasOwnProperty(zone_id+z)&&view.vertex_color_array[track_id].hasOwnProperty(zone_id+z)){vertex_position_array=vertex_position_array.concat(view.vertex_position_array[track_id][zone_id+z]);vertex_color_array=vertex_color_array.concat(view.vertex_color_array[track_id][zone_id+z]);}}view.ctx.bindBuffer(view.ctx.ARRAY_BUFFER,vertex_position_buffer);view.ctx.bufferData(view.ctx.ARRAY_BUFFER,new Float32Array(vertex_position_array),view.ctx.STATIC_DRAW);vertex_position_buffer.itemSize=3;vertex_position_buffer.numItems=vertex_position_array.length/vertex_position_buffer.itemSize;view.ctx.bindBuffer(view.ctx.ARRAY_BUFFER,vertex_color_buffer);view.ctx.bufferData(view.ctx.ARRAY_BUFFER,new Float32Array(vertex_color_array),view.ctx.STATIC_DRAW);vertex_color_buffer.itemSize=4;vertex_color_buffer.numItems=vertex_color_array.length/vertex_color_buffer.itemSize;view.vertex_position_buffer_by_zone[track_id][zone_id]=vertex_position_buffer;view.vertex_color_buffer_by_zone[track_id][zone_id]=vertex_color_buffer;}return{'position':view.vertex_position_buffer_by_zone[track_id][zone_id],'color':view.vertex_color_buffer_by_zone[track_id][zone_id]};};var computeVertexPositionsAndVertexColors=function computeVertexPositionsAndVertexColors(view,model,track_id){if(view.rendering_suppressed){return;}var zone_to_vertex_color_array={};var zone_to_vertex_position_array={};var identified_shape_list_list=view.identified_shape_list_list[track_id];var id_to_left=model.getColumnLeft();var halfsqrt2=Math.sqrt(2)/2;// Compute vertex and color arrays
	var vertex_position_array;var vertex_color_array;for(var i=0;i<identified_shape_list_list.length;i++){var shape_list=identified_shape_list_list[i].shape_list;var id=identified_shape_list_list[i].id;if(typeof id_to_left[id]==='undefined'){continue;}var offset_x=id_to_left[id];var horz_zone_id=Math.floor(offset_x*model.getHorzZoom()/view.visible_area_width);zone_to_vertex_position_array[horz_zone_id]=zone_to_vertex_position_array[horz_zone_id]||[];vertex_position_array=zone_to_vertex_position_array[horz_zone_id];zone_to_vertex_color_array[horz_zone_id]=zone_to_vertex_color_array[horz_zone_id]||[];vertex_color_array=zone_to_vertex_color_array[horz_zone_id];for(var j=0;j<shape_list.length;j++){var shape=shape_list[j];if(shape.type==="rectangle"){// Stroke
	var x=parseFloat(shape.x)+offset_x,y=parseFloat(shape.y),height=parseFloat(shape.height),width=parseFloat(shape.width);var stroke_width=parseFloat(shape['stroke-width']);vertex_position_array.push(x,y,j);vertex_position_array.push(x+width,y,j);vertex_position_array.push(x+width,y+height,j);vertex_position_array.push(x,y,j);vertex_position_array.push(x+width,y+height,j);vertex_position_array.push(x,y+height,j);addVertexColor(vertex_color_array,shape.fill,6);if(stroke_width>0){// left side
	vertex_position_array.push(x,y,j);vertex_position_array.push(x+stroke_width,y,j);vertex_position_array.push(x+stroke_width,y+height,j);vertex_position_array.push(x,y,j);vertex_position_array.push(x+stroke_width,y+height,j);vertex_position_array.push(x,y+height,j);// right side
	vertex_position_array.push(x+width,y,j);vertex_position_array.push(x+width-stroke_width,y,j);vertex_position_array.push(x+width-stroke_width,y+height,j);vertex_position_array.push(x+width,y,j);vertex_position_array.push(x+width-stroke_width,y+height,j);vertex_position_array.push(x+width,y+height,j);// top side
	vertex_position_array.push(x,y,j);vertex_position_array.push(x+width,y,j);vertex_position_array.push(x+width,y+stroke_width,j);vertex_position_array.push(x,y,j);vertex_position_array.push(x+width,y+stroke_width,j);vertex_position_array.push(x,y+stroke_width,j);// bottom side
	vertex_position_array.push(x,y+height,j);vertex_position_array.push(x+width,y+height,j);vertex_position_array.push(x+width,y+height-stroke_width,j);vertex_position_array.push(x,y+height,j);vertex_position_array.push(x+width,y+height-stroke_width,j);vertex_position_array.push(x,y+height-stroke_width,j);addVertexColor(vertex_color_array,shape.stroke,6*4);}}else if(shape.type==="triangle"){vertex_position_array.push(offset_x+parseFloat(shape.x1),parseFloat(shape.y1),j);vertex_position_array.push(offset_x+parseFloat(shape.x2),parseFloat(shape.y2),j);vertex_position_array.push(offset_x+parseFloat(shape.x3),parseFloat(shape.y3),j);addVertexColor(vertex_color_array,shape.fill,3);}else if(shape.type==="ellipse"){var center={x:offset_x+parseFloat(shape.x)+parseFloat(shape.width)/2,y:parseFloat(shape.y)+parseFloat(shape.height)/2};var horzrad=parseFloat(shape.width)/2;var vertrad=parseFloat(shape.height)/2;vertex_position_array.push(center.x,center.y,j);vertex_position_array.push(center.x+horzrad,center.y,j);vertex_position_array.push(center.x+halfsqrt2*horzrad,center.y+halfsqrt2*vertrad,j);vertex_position_array.push(center.x,center.y,j);vertex_position_array.push(center.x+halfsqrt2*horzrad,center.y+halfsqrt2*vertrad,j);vertex_position_array.push(center.x,center.y+vertrad,j);vertex_position_array.push(center.x,center.y,j);vertex_position_array.push(center.x,center.y+vertrad,j);vertex_position_array.push(center.x-halfsqrt2*horzrad,center.y+halfsqrt2*vertrad,j);vertex_position_array.push(center.x,center.y,j);vertex_position_array.push(center.x-halfsqrt2*horzrad,center.y+halfsqrt2*vertrad,j);vertex_position_array.push(center.x-horzrad,center.y,j);vertex_position_array.push(center.x,center.y,j);vertex_position_array.push(center.x-horzrad,center.y,j);vertex_position_array.push(center.x-halfsqrt2*horzrad,center.y-halfsqrt2*vertrad,j);vertex_position_array.push(center.x,center.y,j);vertex_position_array.push(center.x-halfsqrt2*horzrad,center.y-halfsqrt2*vertrad,j);vertex_position_array.push(center.x,center.y-vertrad,j);vertex_position_array.push(center.x,center.y,j);vertex_position_array.push(center.x,center.y-vertrad,j);vertex_position_array.push(center.x+halfsqrt2*horzrad,center.y-halfsqrt2*vertrad,j);vertex_position_array.push(center.x,center.y,j);vertex_position_array.push(center.x+halfsqrt2*horzrad,center.y-halfsqrt2*vertrad,j);vertex_position_array.push(center.x+horzrad,center.y,j);addVertexColor(vertex_color_array,shape.fill,3*8);}else if(shape.type==="line"){// For simplicity of dealing with webGL we'll implement lines as thin triangle pairs
	var x1=parseFloat(shape.x1)+offset_x;var x2=parseFloat(shape.x2)+offset_x;var y1=parseFloat(shape.y1);var y2=parseFloat(shape.y2);if(x1!==x2){// WLOG make x1,y1 the one on the left
	if(Math.min(x1,x2)===x2){var tmpx1=x1;var tmpy1=y1;x1=x2;y1=y2;x2=tmpx1;y2=tmpy1;}}var perpendicular_vector=[y2-y1,x1-x2];var perpendicular_vector_length=Math.sqrt(perpendicular_vector[0]*perpendicular_vector[0]+perpendicular_vector[1]*perpendicular_vector[1]);var unit_perp_vector=[perpendicular_vector[0]/perpendicular_vector_length,perpendicular_vector[1]/perpendicular_vector_length];var half_stroke_width=parseFloat(shape['stroke-width'])/2;var direction1=[unit_perp_vector[0]*half_stroke_width,unit_perp_vector[1]*half_stroke_width];var direction2=[direction1[0]*-1,direction1[1]*-1];var A=[x1+direction1[0],y1+direction1[1]];var B=[x1+direction2[0],y1+direction2[1]];var C=[x2+direction1[0],y2+direction1[1]];var D=[x2+direction2[0],y2+direction2[1]];vertex_position_array.push(A[0],A[1],j);vertex_position_array.push(B[0],B[1],j);vertex_position_array.push(C[0],C[1],j);vertex_position_array.push(C[0],C[1],j);vertex_position_array.push(D[0],D[1],j);vertex_position_array.push(B[0],B[1],j);addVertexColor(vertex_color_array,shape.stroke,3*2);}}}view.vertex_position_array[track_id]=zone_to_vertex_position_array;view.vertex_color_array[track_id]=zone_to_vertex_color_array;};var getShapes=function getShapes(view,model,track_id){if(view.rendering_suppressed){return;}view.identified_shape_list_list[track_id]=model.getIdentifiedShapeListList(track_id,true,true);};var refreshCanvas=function refreshCanvas(view){getNewCanvas(view);getWebGLContextAndSetUpMatricesAndShaders(view);};OncoprintWebGLCellView.prototype.isUsable=function(){return this.ctx!==null;};OncoprintWebGLCellView.prototype.removeTrack=function(model,track_id){clearZoneBuffers(this,model);delete this.identified_shape_list_list[track_id];delete this.vertex_position_array[track_id];delete this.vertex_color_array[track_id];renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.moveTrack=function(model){clearZoneBuffers(this,model);renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.addTracks=function(model,track_ids){clearZoneBuffers(this,model);for(var i=0;i<track_ids.length;i++){getShapes(this,model,track_ids[i]);computeVertexPositionsAndVertexColors(this,model,track_ids[i]);}renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.setIdOrder=function(model,ids){clearZoneBuffers(this,model);var track_ids=model.getTracks();for(var i=0;i<track_ids.length;i++){computeVertexPositionsAndVertexColors(this,model,track_ids[i]);}renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.setTrackGroupSortPriority=function(model){clearZoneBuffers(this,model);renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.sort=function(model){clearZoneBuffers(this,model);var track_ids=model.getTracks();for(var i=0;i<track_ids.length;i++){computeVertexPositionsAndVertexColors(this,model,track_ids[i]);}renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.suppressRendering=function(){this.rendering_suppressed=true;};OncoprintWebGLCellView.prototype.releaseRendering=function(model){this.rendering_suppressed=false;var track_ids=model.getTracks();for(var i=0;i<track_ids.length;i++){getShapes(this,model,track_ids[i]);computeVertexPositionsAndVertexColors(this,model,track_ids[i]);}renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.hideIds=function(model){clearZoneBuffers(this,model);var track_ids=model.getTracks();for(var i=0;i<track_ids.length;i++){computeVertexPositionsAndVertexColors(this,model,track_ids[i]);}renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.setTrackData=function(model,track_id){clearZoneBuffers(this,model,track_id);getShapes(this,model,track_id);computeVertexPositionsAndVertexColors(this,model,track_id);renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.setRuleSet=function(model,target_track_id){clearZoneBuffers(this,model,target_track_id);getShapes(this,model,target_track_id);computeVertexPositionsAndVertexColors(this,model,target_track_id);renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.shareRuleSet=function(model,target_track_id){clearZoneBuffers(this,model,target_track_id);getShapes(this,model,target_track_id);computeVertexPositionsAndVertexColors(this,model,target_track_id);renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.setSortConfig=function(model){this.sort(model);};OncoprintWebGLCellView.prototype.scroll=function(model,offset){this.scroll_x=offset;renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.setHorzZoom=function(model){var cell_width=model.getCellWidth();if(cell_width<this.antialias_on_cell_width_thresh){if(!this.antialias){this.antialias=true;refreshCanvas(this);}}else{if(this.antialias){this.antialias=false;refreshCanvas(this);}}clearZoneBuffers(this,model);var track_ids=model.getTracks();for(var i=0;i<track_ids.length;i++){// need to recompute this only because of rezoning for scrolls
	computeVertexPositionsAndVertexColors(this,model,track_ids[i]);}renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.setVertZoom=function(model){clearZoneBuffers(this,model);var track_ids=model.getTracks();for(var i=0;i<track_ids.length;i++){getShapes(this,model,track_ids[i]);computeVertexPositionsAndVertexColors(this,model,track_ids[i]);}renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.getTotalWidth=function(model,base){return(model.getCellWidth(base)+model.getCellPadding(base))*model.getIdOrder().length;};OncoprintWebGLCellView.prototype.getWidth=function(){return this.visible_area_width;};OncoprintWebGLCellView.prototype.setWidth=function(w,model){this.visible_area_width=w;// need to rezone for new visible area width
	clearZoneBuffers(this,model);var track_ids=model.getTracks();for(var i=0;i<track_ids.length;i++){// need to recompute this only because of rezoning for scrolls
	computeVertexPositionsAndVertexColors(this,model,track_ids[i]);}renderAllTracks(this,model);// in the process it will call resizeAndClear
	};OncoprintWebGLCellView.prototype.setCellPaddingOn=function(model){clearZoneBuffers(this,model);var track_ids=model.getTracks();for(var i=0;i<track_ids.length;i++){computeVertexPositionsAndVertexColors(this,model,track_ids[i]);}renderAllTracks(this,model);};OncoprintWebGLCellView.prototype.toSVGGroup=function(model,offset_x,offset_y){var root=svgfactory.group(offset_x||0,offset_y||0);var cell_tops=model.getCellTops();var tracks=model.getTracks();var zoomedColumnLeft=model.getZoomedColumnLeft();for(var i=0;i<tracks.length;i++){var track_id=tracks[i];var offset_y=cell_tops[track_id];var identified_shape_list_list=model.getIdentifiedShapeListList(track_id,false,true);for(var j=0;j<identified_shape_list_list.length;j++){var id_sl=identified_shape_list_list[j];var id=id_sl.id;var sl=id_sl.shape_list;var offset_x=zoomedColumnLeft[id];if(typeof offset_x==='undefined'){// hidden id
	continue;}for(var h=0;h<sl.length;h++){root.appendChild(svgfactory.fromShape(sl[h],offset_x,offset_y));}}}return root;};return OncoprintWebGLCellView;}();module.exports=OncoprintWebGLCellView;},{"./svgfactory.js":16,"gl-matrix":17}],16:[function(require,module,exports){var makeSVGElement=require('./makesvgelement.js');var shapeToSVG=require('./oncoprintshapetosvg.js');var extractRGBA=function extractRGBA(str){var ret=[0,0,0,1];if(str[0]==="#"){// hex, convert to rgba
	var r=parseInt(str[1]+str[2],16);var g=parseInt(str[3]+str[4],16);var b=parseInt(str[5]+str[6],16);str='rgba('+r+','+g+','+b+',1)';}var match=str.match(/^[\s]*rgba\([\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*,[\s]*([0-9]+)[\s]*,[\s]*([0-9.]+)[\s]*\)[\s]*$/);if(match&&match.length===5){ret=[parseFloat(match[1])/255,parseFloat(match[2])/255,parseFloat(match[3])/255,parseFloat(match[4])];}return ret;};var extractColor=function extractColor(str){if(str.indexOf("rgb(")>-1){return{'rgb':str,'opacity':1};}var rgba_arr=extractRGBA(str);return{'rgb':'rgb('+rgba_arr[0]*255+','+rgba_arr[1]*255+','+rgba_arr[2]*255+')','opacity':rgba_arr[3]};};module.exports={text:function text(content,x,y,size,family,weight,alignment_baseline){size=size||12;var alignment_baseline_y_offset=size;if(alignment_baseline==="middle"){alignment_baseline_y_offset=size/2;}else if(alignment_baseline==="bottom"){alignment_baseline_y_offset=0;}var elt=makeSVGElement('text',{'x':x||0,'y':(y||0)+alignment_baseline_y_offset,'font-size':size,'font-family':family||'serif','font-weight':weight||'normal','text-anchor':'start'});elt.textContent=content+'';return elt;},group:function group(x,y){x=x||0;y=y||0;return makeSVGElement('g',{'transform':'translate('+x+','+y+')','x':x,'y':y});},svg:function svg(width,height){return makeSVGElement('svg',{'width':width||0,'height':height||0});},wrapText:function wrapText(in_dom_text_svg_elt,width){var text=in_dom_text_svg_elt.textContent;in_dom_text_svg_elt.textContent="";var words=text.split(" ");var dy=0;var tspan=makeSVGElement('tspan',{'x':'0','dy':dy});in_dom_text_svg_elt.appendChild(tspan);var curr_tspan_words=[];for(var i=0;i<words.length;i++){curr_tspan_words.push(words[i]);tspan.textContent=curr_tspan_words.join(" ");if(tspan.getComputedTextLength()>width){tspan.textContent=curr_tspan_words.slice(0,curr_tspan_words.length-1).join(" ");dy=in_dom_text_svg_elt.getBBox().height;curr_tspan_words=[words[i]];tspan=makeSVGElement('tspan',{'x':'0','dy':dy});in_dom_text_svg_elt.appendChild(tspan);tspan.textContent=words[i];}}},fromShape:function fromShape(oncoprint_shape_computed_params,offset_x,offset_y){return shapeToSVG(oncoprint_shape_computed_params,offset_x,offset_y);},polygon:function polygon(points,fill){return makeSVGElement('polygon',{'points':points,'fill':fill});},rect:function rect(x,y,width,height,fill){return makeSVGElement('rect',{'x':x,'y':y,'width':width,'height':height,'fill':fill});},bgrect:function bgrect(width,height,fill){return makeSVGElement('rect',{'width':width,'height':height,'fill':fill});},path:function path(points,stroke,fill){points=points.map(function(pt){return pt.join(",");});points[0]='M'+points[0];for(var i=1;i<points.length;i++){points[i]='L'+points[i];}stroke=extractColor(stroke);fill=extractColor(fill);return makeSVGElement('path',{'d':points.join(" "),'stroke':stroke.rgb,'stroke-opacity':stroke.opacity,'fill':fill.rgb,'fill-opacity':fill.opacity});}};},{"./makesvgelement.js":4,"./oncoprintshapetosvg.js":11}],17:[function(require,module,exports){/**
	     * @fileoverview gl-matrix - High performance matrix and vector operations
	     * @author Brandon Jones
	     * @author Colin MacKenzie IV
	     * @version 2.3.0
	     *//* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	     Permission is hereby granted, free of charge, to any person obtaining a copy
	     of this software and associated documentation files (the "Software"), to deal
	     in the Software without restriction, including without limitation the rights
	     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	     copies of the Software, and to permit persons to whom the Software is
	     furnished to do so, subject to the following conditions:
	
	     The above copyright notice and this permission notice shall be included in
	     all copies or substantial portions of the Software.
	
	     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	     THE SOFTWARE. */// END HEADER
	exports.glMatrix=require("./gl-matrix/common.js");exports.mat2=require("./gl-matrix/mat2.js");exports.mat2d=require("./gl-matrix/mat2d.js");exports.mat3=require("./gl-matrix/mat3.js");exports.mat4=require("./gl-matrix/mat4.js");exports.quat=require("./gl-matrix/quat.js");exports.vec2=require("./gl-matrix/vec2.js");exports.vec3=require("./gl-matrix/vec3.js");exports.vec4=require("./gl-matrix/vec4.js");},{"./gl-matrix/common.js":18,"./gl-matrix/mat2.js":19,"./gl-matrix/mat2d.js":20,"./gl-matrix/mat3.js":21,"./gl-matrix/mat4.js":22,"./gl-matrix/quat.js":23,"./gl-matrix/vec2.js":24,"./gl-matrix/vec3.js":25,"./gl-matrix/vec4.js":26}],18:[function(require,module,exports){/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	     Permission is hereby granted, free of charge, to any person obtaining a copy
	     of this software and associated documentation files (the "Software"), to deal
	     in the Software without restriction, including without limitation the rights
	     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	     copies of the Software, and to permit persons to whom the Software is
	     furnished to do so, subject to the following conditions:
	
	     The above copyright notice and this permission notice shall be included in
	     all copies or substantial portions of the Software.
	
	     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	     THE SOFTWARE. *//**
	     * @class Common utilities
	     * @name glMatrix
	     */var glMatrix={};// Constants
	glMatrix.EPSILON=0.000001;glMatrix.ARRAY_TYPE=typeof Float32Array!=='undefined'?Float32Array:Array;glMatrix.RANDOM=Math.random;/**
	     * Sets the type of array used when creating new vectors and matrices
	     *
	     * @param {Type} type Array type, such as Float32Array or Array
	     */glMatrix.setMatrixArrayType=function(type){GLMAT_ARRAY_TYPE=type;};var degree=Math.PI/180;/**
	     * Convert Degree To Radian
	     *
	     * @param {Number} Angle in Degrees
	     */glMatrix.toRadian=function(a){return a*degree;};module.exports=glMatrix;},{}],19:[function(require,module,exports){/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	     Permission is hereby granted, free of charge, to any person obtaining a copy
	     of this software and associated documentation files (the "Software"), to deal
	     in the Software without restriction, including without limitation the rights
	     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	     copies of the Software, and to permit persons to whom the Software is
	     furnished to do so, subject to the following conditions:
	
	     The above copyright notice and this permission notice shall be included in
	     all copies or substantial portions of the Software.
	
	     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	     THE SOFTWARE. */var glMatrix=require("./common.js");/**
	     * @class 2x2 Matrix
	     * @name mat2
	     */var mat2={};/**
	     * Creates a new identity mat2
	     *
	     * @returns {mat2} a new 2x2 matrix
	     */mat2.create=function(){var out=new glMatrix.ARRAY_TYPE(4);out[0]=1;out[1]=0;out[2]=0;out[3]=1;return out;};/**
	     * Creates a new mat2 initialized with values from an existing matrix
	     *
	     * @param {mat2} a matrix to clone
	     * @returns {mat2} a new 2x2 matrix
	     */mat2.clone=function(a){var out=new glMatrix.ARRAY_TYPE(4);out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[3];return out;};/**
	     * Copy the values from one mat2 to another
	     *
	     * @param {mat2} out the receiving matrix
	     * @param {mat2} a the source matrix
	     * @returns {mat2} out
	     */mat2.copy=function(out,a){out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[3];return out;};/**
	     * Set a mat2 to the identity matrix
	     *
	     * @param {mat2} out the receiving matrix
	     * @returns {mat2} out
	     */mat2.identity=function(out){out[0]=1;out[1]=0;out[2]=0;out[3]=1;return out;};/**
	     * Transpose the values of a mat2
	     *
	     * @param {mat2} out the receiving matrix
	     * @param {mat2} a the source matrix
	     * @returns {mat2} out
	     */mat2.transpose=function(out,a){// If we are transposing ourselves we can skip a few steps but have to cache some values
	if(out===a){var a1=a[1];out[1]=a[2];out[2]=a1;}else{out[0]=a[0];out[1]=a[2];out[2]=a[1];out[3]=a[3];}return out;};/**
	     * Inverts a mat2
	     *
	     * @param {mat2} out the receiving matrix
	     * @param {mat2} a the source matrix
	     * @returns {mat2} out
	     */mat2.invert=function(out,a){var a0=a[0],a1=a[1],a2=a[2],a3=a[3],// Calculate the determinant
	det=a0*a3-a2*a1;if(!det){return null;}det=1.0/det;out[0]=a3*det;out[1]=-a1*det;out[2]=-a2*det;out[3]=a0*det;return out;};/**
	     * Calculates the adjugate of a mat2
	     *
	     * @param {mat2} out the receiving matrix
	     * @param {mat2} a the source matrix
	     * @returns {mat2} out
	     */mat2.adjoint=function(out,a){// Caching this value is nessecary if out == a
	var a0=a[0];out[0]=a[3];out[1]=-a[1];out[2]=-a[2];out[3]=a0;return out;};/**
	     * Calculates the determinant of a mat2
	     *
	     * @param {mat2} a the source matrix
	     * @returns {Number} determinant of a
	     */mat2.determinant=function(a){return a[0]*a[3]-a[2]*a[1];};/**
	     * Multiplies two mat2's
	     *
	     * @param {mat2} out the receiving matrix
	     * @param {mat2} a the first operand
	     * @param {mat2} b the second operand
	     * @returns {mat2} out
	     */mat2.multiply=function(out,a,b){var a0=a[0],a1=a[1],a2=a[2],a3=a[3];var b0=b[0],b1=b[1],b2=b[2],b3=b[3];out[0]=a0*b0+a2*b1;out[1]=a1*b0+a3*b1;out[2]=a0*b2+a2*b3;out[3]=a1*b2+a3*b3;return out;};/**
	     * Alias for {@link mat2.multiply}
	     * @function
	     */mat2.mul=mat2.multiply;/**
	     * Rotates a mat2 by the given angle
	     *
	     * @param {mat2} out the receiving matrix
	     * @param {mat2} a the matrix to rotate
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat2} out
	     */mat2.rotate=function(out,a,rad){var a0=a[0],a1=a[1],a2=a[2],a3=a[3],s=Math.sin(rad),c=Math.cos(rad);out[0]=a0*c+a2*s;out[1]=a1*c+a3*s;out[2]=a0*-s+a2*c;out[3]=a1*-s+a3*c;return out;};/**
	     * Scales the mat2 by the dimensions in the given vec2
	     *
	     * @param {mat2} out the receiving matrix
	     * @param {mat2} a the matrix to rotate
	     * @param {vec2} v the vec2 to scale the matrix by
	     * @returns {mat2} out
	     **/mat2.scale=function(out,a,v){var a0=a[0],a1=a[1],a2=a[2],a3=a[3],v0=v[0],v1=v[1];out[0]=a0*v0;out[1]=a1*v0;out[2]=a2*v1;out[3]=a3*v1;return out;};/**
	     * Creates a matrix from a given angle
	     * This is equivalent to (but much faster than):
	     *
	     *     mat2.identity(dest);
	     *     mat2.rotate(dest, dest, rad);
	     *
	     * @param {mat2} out mat2 receiving operation result
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat2} out
	     */mat2.fromRotation=function(out,rad){var s=Math.sin(rad),c=Math.cos(rad);out[0]=c;out[1]=s;out[2]=-s;out[3]=c;return out;};/**
	     * Creates a matrix from a vector scaling
	     * This is equivalent to (but much faster than):
	     *
	     *     mat2.identity(dest);
	     *     mat2.scale(dest, dest, vec);
	     *
	     * @param {mat2} out mat2 receiving operation result
	     * @param {vec2} v Scaling vector
	     * @returns {mat2} out
	     */mat2.fromScaling=function(out,v){out[0]=v[0];out[1]=0;out[2]=0;out[3]=v[1];return out;};/**
	     * Returns a string representation of a mat2
	     *
	     * @param {mat2} mat matrix to represent as a string
	     * @returns {String} string representation of the matrix
	     */mat2.str=function(a){return'mat2('+a[0]+', '+a[1]+', '+a[2]+', '+a[3]+')';};/**
	     * Returns Frobenius norm of a mat2
	     *
	     * @param {mat2} a the matrix to calculate Frobenius norm of
	     * @returns {Number} Frobenius norm
	     */mat2.frob=function(a){return Math.sqrt(Math.pow(a[0],2)+Math.pow(a[1],2)+Math.pow(a[2],2)+Math.pow(a[3],2));};/**
	     * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
	     * @param {mat2} L the lower triangular matrix
	     * @param {mat2} D the diagonal matrix
	     * @param {mat2} U the upper triangular matrix
	     * @param {mat2} a the input matrix to factorize
	     */mat2.LDU=function(L,D,U,a){L[2]=a[2]/a[0];U[0]=a[0];U[1]=a[1];U[3]=a[3]-L[2]*U[1];return[L,D,U];};module.exports=mat2;},{"./common.js":18}],20:[function(require,module,exports){/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	     Permission is hereby granted, free of charge, to any person obtaining a copy
	     of this software and associated documentation files (the "Software"), to deal
	     in the Software without restriction, including without limitation the rights
	     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	     copies of the Software, and to permit persons to whom the Software is
	     furnished to do so, subject to the following conditions:
	
	     The above copyright notice and this permission notice shall be included in
	     all copies or substantial portions of the Software.
	
	     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	     THE SOFTWARE. */var glMatrix=require("./common.js");/**
	     * @class 2x3 Matrix
	     * @name mat2d
	     *
	     * @description
	     * A mat2d contains six elements defined as:
	     * <pre>
	     * [a, c, tx,
	     *  b, d, ty]
	     * </pre>
	     * This is a short form for the 3x3 matrix:
	     * <pre>
	     * [a, c, tx,
	     *  b, d, ty,
	     *  0, 0, 1]
	     * </pre>
	     * The last row is ignored so the array is shorter and operations are faster.
	     */var mat2d={};/**
	     * Creates a new identity mat2d
	     *
	     * @returns {mat2d} a new 2x3 matrix
	     */mat2d.create=function(){var out=new glMatrix.ARRAY_TYPE(6);out[0]=1;out[1]=0;out[2]=0;out[3]=1;out[4]=0;out[5]=0;return out;};/**
	     * Creates a new mat2d initialized with values from an existing matrix
	     *
	     * @param {mat2d} a matrix to clone
	     * @returns {mat2d} a new 2x3 matrix
	     */mat2d.clone=function(a){var out=new glMatrix.ARRAY_TYPE(6);out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[3];out[4]=a[4];out[5]=a[5];return out;};/**
	     * Copy the values from one mat2d to another
	     *
	     * @param {mat2d} out the receiving matrix
	     * @param {mat2d} a the source matrix
	     * @returns {mat2d} out
	     */mat2d.copy=function(out,a){out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[3];out[4]=a[4];out[5]=a[5];return out;};/**
	     * Set a mat2d to the identity matrix
	     *
	     * @param {mat2d} out the receiving matrix
	     * @returns {mat2d} out
	     */mat2d.identity=function(out){out[0]=1;out[1]=0;out[2]=0;out[3]=1;out[4]=0;out[5]=0;return out;};/**
	     * Inverts a mat2d
	     *
	     * @param {mat2d} out the receiving matrix
	     * @param {mat2d} a the source matrix
	     * @returns {mat2d} out
	     */mat2d.invert=function(out,a){var aa=a[0],ab=a[1],ac=a[2],ad=a[3],atx=a[4],aty=a[5];var det=aa*ad-ab*ac;if(!det){return null;}det=1.0/det;out[0]=ad*det;out[1]=-ab*det;out[2]=-ac*det;out[3]=aa*det;out[4]=(ac*aty-ad*atx)*det;out[5]=(ab*atx-aa*aty)*det;return out;};/**
	     * Calculates the determinant of a mat2d
	     *
	     * @param {mat2d} a the source matrix
	     * @returns {Number} determinant of a
	     */mat2d.determinant=function(a){return a[0]*a[3]-a[1]*a[2];};/**
	     * Multiplies two mat2d's
	     *
	     * @param {mat2d} out the receiving matrix
	     * @param {mat2d} a the first operand
	     * @param {mat2d} b the second operand
	     * @returns {mat2d} out
	     */mat2d.multiply=function(out,a,b){var a0=a[0],a1=a[1],a2=a[2],a3=a[3],a4=a[4],a5=a[5],b0=b[0],b1=b[1],b2=b[2],b3=b[3],b4=b[4],b5=b[5];out[0]=a0*b0+a2*b1;out[1]=a1*b0+a3*b1;out[2]=a0*b2+a2*b3;out[3]=a1*b2+a3*b3;out[4]=a0*b4+a2*b5+a4;out[5]=a1*b4+a3*b5+a5;return out;};/**
	     * Alias for {@link mat2d.multiply}
	     * @function
	     */mat2d.mul=mat2d.multiply;/**
	     * Rotates a mat2d by the given angle
	     *
	     * @param {mat2d} out the receiving matrix
	     * @param {mat2d} a the matrix to rotate
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat2d} out
	     */mat2d.rotate=function(out,a,rad){var a0=a[0],a1=a[1],a2=a[2],a3=a[3],a4=a[4],a5=a[5],s=Math.sin(rad),c=Math.cos(rad);out[0]=a0*c+a2*s;out[1]=a1*c+a3*s;out[2]=a0*-s+a2*c;out[3]=a1*-s+a3*c;out[4]=a4;out[5]=a5;return out;};/**
	     * Scales the mat2d by the dimensions in the given vec2
	     *
	     * @param {mat2d} out the receiving matrix
	     * @param {mat2d} a the matrix to translate
	     * @param {vec2} v the vec2 to scale the matrix by
	     * @returns {mat2d} out
	     **/mat2d.scale=function(out,a,v){var a0=a[0],a1=a[1],a2=a[2],a3=a[3],a4=a[4],a5=a[5],v0=v[0],v1=v[1];out[0]=a0*v0;out[1]=a1*v0;out[2]=a2*v1;out[3]=a3*v1;out[4]=a4;out[5]=a5;return out;};/**
	     * Translates the mat2d by the dimensions in the given vec2
	     *
	     * @param {mat2d} out the receiving matrix
	     * @param {mat2d} a the matrix to translate
	     * @param {vec2} v the vec2 to translate the matrix by
	     * @returns {mat2d} out
	     **/mat2d.translate=function(out,a,v){var a0=a[0],a1=a[1],a2=a[2],a3=a[3],a4=a[4],a5=a[5],v0=v[0],v1=v[1];out[0]=a0;out[1]=a1;out[2]=a2;out[3]=a3;out[4]=a0*v0+a2*v1+a4;out[5]=a1*v0+a3*v1+a5;return out;};/**
	     * Creates a matrix from a given angle
	     * This is equivalent to (but much faster than):
	     *
	     *     mat2d.identity(dest);
	     *     mat2d.rotate(dest, dest, rad);
	     *
	     * @param {mat2d} out mat2d receiving operation result
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat2d} out
	     */mat2d.fromRotation=function(out,rad){var s=Math.sin(rad),c=Math.cos(rad);out[0]=c;out[1]=s;out[2]=-s;out[3]=c;out[4]=0;out[5]=0;return out;};/**
	     * Creates a matrix from a vector scaling
	     * This is equivalent to (but much faster than):
	     *
	     *     mat2d.identity(dest);
	     *     mat2d.scale(dest, dest, vec);
	     *
	     * @param {mat2d} out mat2d receiving operation result
	     * @param {vec2} v Scaling vector
	     * @returns {mat2d} out
	     */mat2d.fromScaling=function(out,v){out[0]=v[0];out[1]=0;out[2]=0;out[3]=v[1];out[4]=0;out[5]=0;return out;};/**
	     * Creates a matrix from a vector translation
	     * This is equivalent to (but much faster than):
	     *
	     *     mat2d.identity(dest);
	     *     mat2d.translate(dest, dest, vec);
	     *
	     * @param {mat2d} out mat2d receiving operation result
	     * @param {vec2} v Translation vector
	     * @returns {mat2d} out
	     */mat2d.fromTranslation=function(out,v){out[0]=1;out[1]=0;out[2]=0;out[3]=1;out[4]=v[0];out[5]=v[1];return out;};/**
	     * Returns a string representation of a mat2d
	     *
	     * @param {mat2d} a matrix to represent as a string
	     * @returns {String} string representation of the matrix
	     */mat2d.str=function(a){return'mat2d('+a[0]+', '+a[1]+', '+a[2]+', '+a[3]+', '+a[4]+', '+a[5]+')';};/**
	     * Returns Frobenius norm of a mat2d
	     *
	     * @param {mat2d} a the matrix to calculate Frobenius norm of
	     * @returns {Number} Frobenius norm
	     */mat2d.frob=function(a){return Math.sqrt(Math.pow(a[0],2)+Math.pow(a[1],2)+Math.pow(a[2],2)+Math.pow(a[3],2)+Math.pow(a[4],2)+Math.pow(a[5],2)+1);};module.exports=mat2d;},{"./common.js":18}],21:[function(require,module,exports){/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	     Permission is hereby granted, free of charge, to any person obtaining a copy
	     of this software and associated documentation files (the "Software"), to deal
	     in the Software without restriction, including without limitation the rights
	     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	     copies of the Software, and to permit persons to whom the Software is
	     furnished to do so, subject to the following conditions:
	
	     The above copyright notice and this permission notice shall be included in
	     all copies or substantial portions of the Software.
	
	     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	     THE SOFTWARE. */var glMatrix=require("./common.js");/**
	     * @class 3x3 Matrix
	     * @name mat3
	     */var mat3={};/**
	     * Creates a new identity mat3
	     *
	     * @returns {mat3} a new 3x3 matrix
	     */mat3.create=function(){var out=new glMatrix.ARRAY_TYPE(9);out[0]=1;out[1]=0;out[2]=0;out[3]=0;out[4]=1;out[5]=0;out[6]=0;out[7]=0;out[8]=1;return out;};/**
	     * Copies the upper-left 3x3 values into the given mat3.
	     *
	     * @param {mat3} out the receiving 3x3 matrix
	     * @param {mat4} a   the source 4x4 matrix
	     * @returns {mat3} out
	     */mat3.fromMat4=function(out,a){out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[4];out[4]=a[5];out[5]=a[6];out[6]=a[8];out[7]=a[9];out[8]=a[10];return out;};/**
	     * Creates a new mat3 initialized with values from an existing matrix
	     *
	     * @param {mat3} a matrix to clone
	     * @returns {mat3} a new 3x3 matrix
	     */mat3.clone=function(a){var out=new glMatrix.ARRAY_TYPE(9);out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[3];out[4]=a[4];out[5]=a[5];out[6]=a[6];out[7]=a[7];out[8]=a[8];return out;};/**
	     * Copy the values from one mat3 to another
	     *
	     * @param {mat3} out the receiving matrix
	     * @param {mat3} a the source matrix
	     * @returns {mat3} out
	     */mat3.copy=function(out,a){out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[3];out[4]=a[4];out[5]=a[5];out[6]=a[6];out[7]=a[7];out[8]=a[8];return out;};/**
	     * Set a mat3 to the identity matrix
	     *
	     * @param {mat3} out the receiving matrix
	     * @returns {mat3} out
	     */mat3.identity=function(out){out[0]=1;out[1]=0;out[2]=0;out[3]=0;out[4]=1;out[5]=0;out[6]=0;out[7]=0;out[8]=1;return out;};/**
	     * Transpose the values of a mat3
	     *
	     * @param {mat3} out the receiving matrix
	     * @param {mat3} a the source matrix
	     * @returns {mat3} out
	     */mat3.transpose=function(out,a){// If we are transposing ourselves we can skip a few steps but have to cache some values
	if(out===a){var a01=a[1],a02=a[2],a12=a[5];out[1]=a[3];out[2]=a[6];out[3]=a01;out[5]=a[7];out[6]=a02;out[7]=a12;}else{out[0]=a[0];out[1]=a[3];out[2]=a[6];out[3]=a[1];out[4]=a[4];out[5]=a[7];out[6]=a[2];out[7]=a[5];out[8]=a[8];}return out;};/**
	     * Inverts a mat3
	     *
	     * @param {mat3} out the receiving matrix
	     * @param {mat3} a the source matrix
	     * @returns {mat3} out
	     */mat3.invert=function(out,a){var a00=a[0],a01=a[1],a02=a[2],a10=a[3],a11=a[4],a12=a[5],a20=a[6],a21=a[7],a22=a[8],b01=a22*a11-a12*a21,b11=-a22*a10+a12*a20,b21=a21*a10-a11*a20,// Calculate the determinant
	det=a00*b01+a01*b11+a02*b21;if(!det){return null;}det=1.0/det;out[0]=b01*det;out[1]=(-a22*a01+a02*a21)*det;out[2]=(a12*a01-a02*a11)*det;out[3]=b11*det;out[4]=(a22*a00-a02*a20)*det;out[5]=(-a12*a00+a02*a10)*det;out[6]=b21*det;out[7]=(-a21*a00+a01*a20)*det;out[8]=(a11*a00-a01*a10)*det;return out;};/**
	     * Calculates the adjugate of a mat3
	     *
	     * @param {mat3} out the receiving matrix
	     * @param {mat3} a the source matrix
	     * @returns {mat3} out
	     */mat3.adjoint=function(out,a){var a00=a[0],a01=a[1],a02=a[2],a10=a[3],a11=a[4],a12=a[5],a20=a[6],a21=a[7],a22=a[8];out[0]=a11*a22-a12*a21;out[1]=a02*a21-a01*a22;out[2]=a01*a12-a02*a11;out[3]=a12*a20-a10*a22;out[4]=a00*a22-a02*a20;out[5]=a02*a10-a00*a12;out[6]=a10*a21-a11*a20;out[7]=a01*a20-a00*a21;out[8]=a00*a11-a01*a10;return out;};/**
	     * Calculates the determinant of a mat3
	     *
	     * @param {mat3} a the source matrix
	     * @returns {Number} determinant of a
	     */mat3.determinant=function(a){var a00=a[0],a01=a[1],a02=a[2],a10=a[3],a11=a[4],a12=a[5],a20=a[6],a21=a[7],a22=a[8];return a00*(a22*a11-a12*a21)+a01*(-a22*a10+a12*a20)+a02*(a21*a10-a11*a20);};/**
	     * Multiplies two mat3's
	     *
	     * @param {mat3} out the receiving matrix
	     * @param {mat3} a the first operand
	     * @param {mat3} b the second operand
	     * @returns {mat3} out
	     */mat3.multiply=function(out,a,b){var a00=a[0],a01=a[1],a02=a[2],a10=a[3],a11=a[4],a12=a[5],a20=a[6],a21=a[7],a22=a[8],b00=b[0],b01=b[1],b02=b[2],b10=b[3],b11=b[4],b12=b[5],b20=b[6],b21=b[7],b22=b[8];out[0]=b00*a00+b01*a10+b02*a20;out[1]=b00*a01+b01*a11+b02*a21;out[2]=b00*a02+b01*a12+b02*a22;out[3]=b10*a00+b11*a10+b12*a20;out[4]=b10*a01+b11*a11+b12*a21;out[5]=b10*a02+b11*a12+b12*a22;out[6]=b20*a00+b21*a10+b22*a20;out[7]=b20*a01+b21*a11+b22*a21;out[8]=b20*a02+b21*a12+b22*a22;return out;};/**
	     * Alias for {@link mat3.multiply}
	     * @function
	     */mat3.mul=mat3.multiply;/**
	     * Translate a mat3 by the given vector
	     *
	     * @param {mat3} out the receiving matrix
	     * @param {mat3} a the matrix to translate
	     * @param {vec2} v vector to translate by
	     * @returns {mat3} out
	     */mat3.translate=function(out,a,v){var a00=a[0],a01=a[1],a02=a[2],a10=a[3],a11=a[4],a12=a[5],a20=a[6],a21=a[7],a22=a[8],x=v[0],y=v[1];out[0]=a00;out[1]=a01;out[2]=a02;out[3]=a10;out[4]=a11;out[5]=a12;out[6]=x*a00+y*a10+a20;out[7]=x*a01+y*a11+a21;out[8]=x*a02+y*a12+a22;return out;};/**
	     * Rotates a mat3 by the given angle
	     *
	     * @param {mat3} out the receiving matrix
	     * @param {mat3} a the matrix to rotate
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat3} out
	     */mat3.rotate=function(out,a,rad){var a00=a[0],a01=a[1],a02=a[2],a10=a[3],a11=a[4],a12=a[5],a20=a[6],a21=a[7],a22=a[8],s=Math.sin(rad),c=Math.cos(rad);out[0]=c*a00+s*a10;out[1]=c*a01+s*a11;out[2]=c*a02+s*a12;out[3]=c*a10-s*a00;out[4]=c*a11-s*a01;out[5]=c*a12-s*a02;out[6]=a20;out[7]=a21;out[8]=a22;return out;};/**
	     * Scales the mat3 by the dimensions in the given vec2
	     *
	     * @param {mat3} out the receiving matrix
	     * @param {mat3} a the matrix to rotate
	     * @param {vec2} v the vec2 to scale the matrix by
	     * @returns {mat3} out
	     **/mat3.scale=function(out,a,v){var x=v[0],y=v[1];out[0]=x*a[0];out[1]=x*a[1];out[2]=x*a[2];out[3]=y*a[3];out[4]=y*a[4];out[5]=y*a[5];out[6]=a[6];out[7]=a[7];out[8]=a[8];return out;};/**
	     * Creates a matrix from a vector translation
	     * This is equivalent to (but much faster than):
	     *
	     *     mat3.identity(dest);
	     *     mat3.translate(dest, dest, vec);
	     *
	     * @param {mat3} out mat3 receiving operation result
	     * @param {vec2} v Translation vector
	     * @returns {mat3} out
	     */mat3.fromTranslation=function(out,v){out[0]=1;out[1]=0;out[2]=0;out[3]=0;out[4]=1;out[5]=0;out[6]=v[0];out[7]=v[1];out[8]=1;return out;};/**
	     * Creates a matrix from a given angle
	     * This is equivalent to (but much faster than):
	     *
	     *     mat3.identity(dest);
	     *     mat3.rotate(dest, dest, rad);
	     *
	     * @param {mat3} out mat3 receiving operation result
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat3} out
	     */mat3.fromRotation=function(out,rad){var s=Math.sin(rad),c=Math.cos(rad);out[0]=c;out[1]=s;out[2]=0;out[3]=-s;out[4]=c;out[5]=0;out[6]=0;out[7]=0;out[8]=1;return out;};/**
	     * Creates a matrix from a vector scaling
	     * This is equivalent to (but much faster than):
	     *
	     *     mat3.identity(dest);
	     *     mat3.scale(dest, dest, vec);
	     *
	     * @param {mat3} out mat3 receiving operation result
	     * @param {vec2} v Scaling vector
	     * @returns {mat3} out
	     */mat3.fromScaling=function(out,v){out[0]=v[0];out[1]=0;out[2]=0;out[3]=0;out[4]=v[1];out[5]=0;out[6]=0;out[7]=0;out[8]=1;return out;};/**
	     * Copies the values from a mat2d into a mat3
	     *
	     * @param {mat3} out the receiving matrix
	     * @param {mat2d} a the matrix to copy
	     * @returns {mat3} out
	     **/mat3.fromMat2d=function(out,a){out[0]=a[0];out[1]=a[1];out[2]=0;out[3]=a[2];out[4]=a[3];out[5]=0;out[6]=a[4];out[7]=a[5];out[8]=1;return out;};/**
	     * Calculates a 3x3 matrix from the given quaternion
	     *
	     * @param {mat3} out mat3 receiving operation result
	     * @param {quat} q Quaternion to create matrix from
	     *
	     * @returns {mat3} out
	     */mat3.fromQuat=function(out,q){var x=q[0],y=q[1],z=q[2],w=q[3],x2=x+x,y2=y+y,z2=z+z,xx=x*x2,yx=y*x2,yy=y*y2,zx=z*x2,zy=z*y2,zz=z*z2,wx=w*x2,wy=w*y2,wz=w*z2;out[0]=1-yy-zz;out[3]=yx-wz;out[6]=zx+wy;out[1]=yx+wz;out[4]=1-xx-zz;out[7]=zy-wx;out[2]=zx-wy;out[5]=zy+wx;out[8]=1-xx-yy;return out;};/**
	     * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
	     *
	     * @param {mat3} out mat3 receiving operation result
	     * @param {mat4} a Mat4 to derive the normal matrix from
	     *
	     * @returns {mat3} out
	     */mat3.normalFromMat4=function(out,a){var a00=a[0],a01=a[1],a02=a[2],a03=a[3],a10=a[4],a11=a[5],a12=a[6],a13=a[7],a20=a[8],a21=a[9],a22=a[10],a23=a[11],a30=a[12],a31=a[13],a32=a[14],a33=a[15],b00=a00*a11-a01*a10,b01=a00*a12-a02*a10,b02=a00*a13-a03*a10,b03=a01*a12-a02*a11,b04=a01*a13-a03*a11,b05=a02*a13-a03*a12,b06=a20*a31-a21*a30,b07=a20*a32-a22*a30,b08=a20*a33-a23*a30,b09=a21*a32-a22*a31,b10=a21*a33-a23*a31,b11=a22*a33-a23*a32,// Calculate the determinant
	det=b00*b11-b01*b10+b02*b09+b03*b08-b04*b07+b05*b06;if(!det){return null;}det=1.0/det;out[0]=(a11*b11-a12*b10+a13*b09)*det;out[1]=(a12*b08-a10*b11-a13*b07)*det;out[2]=(a10*b10-a11*b08+a13*b06)*det;out[3]=(a02*b10-a01*b11-a03*b09)*det;out[4]=(a00*b11-a02*b08+a03*b07)*det;out[5]=(a01*b08-a00*b10-a03*b06)*det;out[6]=(a31*b05-a32*b04+a33*b03)*det;out[7]=(a32*b02-a30*b05-a33*b01)*det;out[8]=(a30*b04-a31*b02+a33*b00)*det;return out;};/**
	     * Returns a string representation of a mat3
	     *
	     * @param {mat3} mat matrix to represent as a string
	     * @returns {String} string representation of the matrix
	     */mat3.str=function(a){return'mat3('+a[0]+', '+a[1]+', '+a[2]+', '+a[3]+', '+a[4]+', '+a[5]+', '+a[6]+', '+a[7]+', '+a[8]+')';};/**
	     * Returns Frobenius norm of a mat3
	     *
	     * @param {mat3} a the matrix to calculate Frobenius norm of
	     * @returns {Number} Frobenius norm
	     */mat3.frob=function(a){return Math.sqrt(Math.pow(a[0],2)+Math.pow(a[1],2)+Math.pow(a[2],2)+Math.pow(a[3],2)+Math.pow(a[4],2)+Math.pow(a[5],2)+Math.pow(a[6],2)+Math.pow(a[7],2)+Math.pow(a[8],2));};module.exports=mat3;},{"./common.js":18}],22:[function(require,module,exports){/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	     Permission is hereby granted, free of charge, to any person obtaining a copy
	     of this software and associated documentation files (the "Software"), to deal
	     in the Software without restriction, including without limitation the rights
	     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	     copies of the Software, and to permit persons to whom the Software is
	     furnished to do so, subject to the following conditions:
	
	     The above copyright notice and this permission notice shall be included in
	     all copies or substantial portions of the Software.
	
	     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	     THE SOFTWARE. */var glMatrix=require("./common.js");/**
	     * @class 4x4 Matrix
	     * @name mat4
	     */var mat4={};/**
	     * Creates a new identity mat4
	     *
	     * @returns {mat4} a new 4x4 matrix
	     */mat4.create=function(){var out=new glMatrix.ARRAY_TYPE(16);out[0]=1;out[1]=0;out[2]=0;out[3]=0;out[4]=0;out[5]=1;out[6]=0;out[7]=0;out[8]=0;out[9]=0;out[10]=1;out[11]=0;out[12]=0;out[13]=0;out[14]=0;out[15]=1;return out;};/**
	     * Creates a new mat4 initialized with values from an existing matrix
	     *
	     * @param {mat4} a matrix to clone
	     * @returns {mat4} a new 4x4 matrix
	     */mat4.clone=function(a){var out=new glMatrix.ARRAY_TYPE(16);out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[3];out[4]=a[4];out[5]=a[5];out[6]=a[6];out[7]=a[7];out[8]=a[8];out[9]=a[9];out[10]=a[10];out[11]=a[11];out[12]=a[12];out[13]=a[13];out[14]=a[14];out[15]=a[15];return out;};/**
	     * Copy the values from one mat4 to another
	     *
	     * @param {mat4} out the receiving matrix
	     * @param {mat4} a the source matrix
	     * @returns {mat4} out
	     */mat4.copy=function(out,a){out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[3];out[4]=a[4];out[5]=a[5];out[6]=a[6];out[7]=a[7];out[8]=a[8];out[9]=a[9];out[10]=a[10];out[11]=a[11];out[12]=a[12];out[13]=a[13];out[14]=a[14];out[15]=a[15];return out;};/**
	     * Set a mat4 to the identity matrix
	     *
	     * @param {mat4} out the receiving matrix
	     * @returns {mat4} out
	     */mat4.identity=function(out){out[0]=1;out[1]=0;out[2]=0;out[3]=0;out[4]=0;out[5]=1;out[6]=0;out[7]=0;out[8]=0;out[9]=0;out[10]=1;out[11]=0;out[12]=0;out[13]=0;out[14]=0;out[15]=1;return out;};/**
	     * Transpose the values of a mat4
	     *
	     * @param {mat4} out the receiving matrix
	     * @param {mat4} a the source matrix
	     * @returns {mat4} out
	     */mat4.transpose=function(out,a){// If we are transposing ourselves we can skip a few steps but have to cache some values
	if(out===a){var a01=a[1],a02=a[2],a03=a[3],a12=a[6],a13=a[7],a23=a[11];out[1]=a[4];out[2]=a[8];out[3]=a[12];out[4]=a01;out[6]=a[9];out[7]=a[13];out[8]=a02;out[9]=a12;out[11]=a[14];out[12]=a03;out[13]=a13;out[14]=a23;}else{out[0]=a[0];out[1]=a[4];out[2]=a[8];out[3]=a[12];out[4]=a[1];out[5]=a[5];out[6]=a[9];out[7]=a[13];out[8]=a[2];out[9]=a[6];out[10]=a[10];out[11]=a[14];out[12]=a[3];out[13]=a[7];out[14]=a[11];out[15]=a[15];}return out;};/**
	     * Inverts a mat4
	     *
	     * @param {mat4} out the receiving matrix
	     * @param {mat4} a the source matrix
	     * @returns {mat4} out
	     */mat4.invert=function(out,a){var a00=a[0],a01=a[1],a02=a[2],a03=a[3],a10=a[4],a11=a[5],a12=a[6],a13=a[7],a20=a[8],a21=a[9],a22=a[10],a23=a[11],a30=a[12],a31=a[13],a32=a[14],a33=a[15],b00=a00*a11-a01*a10,b01=a00*a12-a02*a10,b02=a00*a13-a03*a10,b03=a01*a12-a02*a11,b04=a01*a13-a03*a11,b05=a02*a13-a03*a12,b06=a20*a31-a21*a30,b07=a20*a32-a22*a30,b08=a20*a33-a23*a30,b09=a21*a32-a22*a31,b10=a21*a33-a23*a31,b11=a22*a33-a23*a32,// Calculate the determinant
	det=b00*b11-b01*b10+b02*b09+b03*b08-b04*b07+b05*b06;if(!det){return null;}det=1.0/det;out[0]=(a11*b11-a12*b10+a13*b09)*det;out[1]=(a02*b10-a01*b11-a03*b09)*det;out[2]=(a31*b05-a32*b04+a33*b03)*det;out[3]=(a22*b04-a21*b05-a23*b03)*det;out[4]=(a12*b08-a10*b11-a13*b07)*det;out[5]=(a00*b11-a02*b08+a03*b07)*det;out[6]=(a32*b02-a30*b05-a33*b01)*det;out[7]=(a20*b05-a22*b02+a23*b01)*det;out[8]=(a10*b10-a11*b08+a13*b06)*det;out[9]=(a01*b08-a00*b10-a03*b06)*det;out[10]=(a30*b04-a31*b02+a33*b00)*det;out[11]=(a21*b02-a20*b04-a23*b00)*det;out[12]=(a11*b07-a10*b09-a12*b06)*det;out[13]=(a00*b09-a01*b07+a02*b06)*det;out[14]=(a31*b01-a30*b03-a32*b00)*det;out[15]=(a20*b03-a21*b01+a22*b00)*det;return out;};/**
	     * Calculates the adjugate of a mat4
	     *
	     * @param {mat4} out the receiving matrix
	     * @param {mat4} a the source matrix
	     * @returns {mat4} out
	     */mat4.adjoint=function(out,a){var a00=a[0],a01=a[1],a02=a[2],a03=a[3],a10=a[4],a11=a[5],a12=a[6],a13=a[7],a20=a[8],a21=a[9],a22=a[10],a23=a[11],a30=a[12],a31=a[13],a32=a[14],a33=a[15];out[0]=a11*(a22*a33-a23*a32)-a21*(a12*a33-a13*a32)+a31*(a12*a23-a13*a22);out[1]=-(a01*(a22*a33-a23*a32)-a21*(a02*a33-a03*a32)+a31*(a02*a23-a03*a22));out[2]=a01*(a12*a33-a13*a32)-a11*(a02*a33-a03*a32)+a31*(a02*a13-a03*a12);out[3]=-(a01*(a12*a23-a13*a22)-a11*(a02*a23-a03*a22)+a21*(a02*a13-a03*a12));out[4]=-(a10*(a22*a33-a23*a32)-a20*(a12*a33-a13*a32)+a30*(a12*a23-a13*a22));out[5]=a00*(a22*a33-a23*a32)-a20*(a02*a33-a03*a32)+a30*(a02*a23-a03*a22);out[6]=-(a00*(a12*a33-a13*a32)-a10*(a02*a33-a03*a32)+a30*(a02*a13-a03*a12));out[7]=a00*(a12*a23-a13*a22)-a10*(a02*a23-a03*a22)+a20*(a02*a13-a03*a12);out[8]=a10*(a21*a33-a23*a31)-a20*(a11*a33-a13*a31)+a30*(a11*a23-a13*a21);out[9]=-(a00*(a21*a33-a23*a31)-a20*(a01*a33-a03*a31)+a30*(a01*a23-a03*a21));out[10]=a00*(a11*a33-a13*a31)-a10*(a01*a33-a03*a31)+a30*(a01*a13-a03*a11);out[11]=-(a00*(a11*a23-a13*a21)-a10*(a01*a23-a03*a21)+a20*(a01*a13-a03*a11));out[12]=-(a10*(a21*a32-a22*a31)-a20*(a11*a32-a12*a31)+a30*(a11*a22-a12*a21));out[13]=a00*(a21*a32-a22*a31)-a20*(a01*a32-a02*a31)+a30*(a01*a22-a02*a21);out[14]=-(a00*(a11*a32-a12*a31)-a10*(a01*a32-a02*a31)+a30*(a01*a12-a02*a11));out[15]=a00*(a11*a22-a12*a21)-a10*(a01*a22-a02*a21)+a20*(a01*a12-a02*a11);return out;};/**
	     * Calculates the determinant of a mat4
	     *
	     * @param {mat4} a the source matrix
	     * @returns {Number} determinant of a
	     */mat4.determinant=function(a){var a00=a[0],a01=a[1],a02=a[2],a03=a[3],a10=a[4],a11=a[5],a12=a[6],a13=a[7],a20=a[8],a21=a[9],a22=a[10],a23=a[11],a30=a[12],a31=a[13],a32=a[14],a33=a[15],b00=a00*a11-a01*a10,b01=a00*a12-a02*a10,b02=a00*a13-a03*a10,b03=a01*a12-a02*a11,b04=a01*a13-a03*a11,b05=a02*a13-a03*a12,b06=a20*a31-a21*a30,b07=a20*a32-a22*a30,b08=a20*a33-a23*a30,b09=a21*a32-a22*a31,b10=a21*a33-a23*a31,b11=a22*a33-a23*a32;// Calculate the determinant
	return b00*b11-b01*b10+b02*b09+b03*b08-b04*b07+b05*b06;};/**
	     * Multiplies two mat4's
	     *
	     * @param {mat4} out the receiving matrix
	     * @param {mat4} a the first operand
	     * @param {mat4} b the second operand
	     * @returns {mat4} out
	     */mat4.multiply=function(out,a,b){var a00=a[0],a01=a[1],a02=a[2],a03=a[3],a10=a[4],a11=a[5],a12=a[6],a13=a[7],a20=a[8],a21=a[9],a22=a[10],a23=a[11],a30=a[12],a31=a[13],a32=a[14],a33=a[15];// Cache only the current line of the second matrix
	var b0=b[0],b1=b[1],b2=b[2],b3=b[3];out[0]=b0*a00+b1*a10+b2*a20+b3*a30;out[1]=b0*a01+b1*a11+b2*a21+b3*a31;out[2]=b0*a02+b1*a12+b2*a22+b3*a32;out[3]=b0*a03+b1*a13+b2*a23+b3*a33;b0=b[4];b1=b[5];b2=b[6];b3=b[7];out[4]=b0*a00+b1*a10+b2*a20+b3*a30;out[5]=b0*a01+b1*a11+b2*a21+b3*a31;out[6]=b0*a02+b1*a12+b2*a22+b3*a32;out[7]=b0*a03+b1*a13+b2*a23+b3*a33;b0=b[8];b1=b[9];b2=b[10];b3=b[11];out[8]=b0*a00+b1*a10+b2*a20+b3*a30;out[9]=b0*a01+b1*a11+b2*a21+b3*a31;out[10]=b0*a02+b1*a12+b2*a22+b3*a32;out[11]=b0*a03+b1*a13+b2*a23+b3*a33;b0=b[12];b1=b[13];b2=b[14];b3=b[15];out[12]=b0*a00+b1*a10+b2*a20+b3*a30;out[13]=b0*a01+b1*a11+b2*a21+b3*a31;out[14]=b0*a02+b1*a12+b2*a22+b3*a32;out[15]=b0*a03+b1*a13+b2*a23+b3*a33;return out;};/**
	     * Alias for {@link mat4.multiply}
	     * @function
	     */mat4.mul=mat4.multiply;/**
	     * Translate a mat4 by the given vector
	     *
	     * @param {mat4} out the receiving matrix
	     * @param {mat4} a the matrix to translate
	     * @param {vec3} v vector to translate by
	     * @returns {mat4} out
	     */mat4.translate=function(out,a,v){var x=v[0],y=v[1],z=v[2],a00,a01,a02,a03,a10,a11,a12,a13,a20,a21,a22,a23;if(a===out){out[12]=a[0]*x+a[4]*y+a[8]*z+a[12];out[13]=a[1]*x+a[5]*y+a[9]*z+a[13];out[14]=a[2]*x+a[6]*y+a[10]*z+a[14];out[15]=a[3]*x+a[7]*y+a[11]*z+a[15];}else{a00=a[0];a01=a[1];a02=a[2];a03=a[3];a10=a[4];a11=a[5];a12=a[6];a13=a[7];a20=a[8];a21=a[9];a22=a[10];a23=a[11];out[0]=a00;out[1]=a01;out[2]=a02;out[3]=a03;out[4]=a10;out[5]=a11;out[6]=a12;out[7]=a13;out[8]=a20;out[9]=a21;out[10]=a22;out[11]=a23;out[12]=a00*x+a10*y+a20*z+a[12];out[13]=a01*x+a11*y+a21*z+a[13];out[14]=a02*x+a12*y+a22*z+a[14];out[15]=a03*x+a13*y+a23*z+a[15];}return out;};/**
	     * Scales the mat4 by the dimensions in the given vec3
	     *
	     * @param {mat4} out the receiving matrix
	     * @param {mat4} a the matrix to scale
	     * @param {vec3} v the vec3 to scale the matrix by
	     * @returns {mat4} out
	     **/mat4.scale=function(out,a,v){var x=v[0],y=v[1],z=v[2];out[0]=a[0]*x;out[1]=a[1]*x;out[2]=a[2]*x;out[3]=a[3]*x;out[4]=a[4]*y;out[5]=a[5]*y;out[6]=a[6]*y;out[7]=a[7]*y;out[8]=a[8]*z;out[9]=a[9]*z;out[10]=a[10]*z;out[11]=a[11]*z;out[12]=a[12];out[13]=a[13];out[14]=a[14];out[15]=a[15];return out;};/**
	     * Rotates a mat4 by the given angle around the given axis
	     *
	     * @param {mat4} out the receiving matrix
	     * @param {mat4} a the matrix to rotate
	     * @param {Number} rad the angle to rotate the matrix by
	     * @param {vec3} axis the axis to rotate around
	     * @returns {mat4} out
	     */mat4.rotate=function(out,a,rad,axis){var x=axis[0],y=axis[1],z=axis[2],len=Math.sqrt(x*x+y*y+z*z),s,c,t,a00,a01,a02,a03,a10,a11,a12,a13,a20,a21,a22,a23,b00,b01,b02,b10,b11,b12,b20,b21,b22;if(Math.abs(len)<glMatrix.EPSILON){return null;}len=1/len;x*=len;y*=len;z*=len;s=Math.sin(rad);c=Math.cos(rad);t=1-c;a00=a[0];a01=a[1];a02=a[2];a03=a[3];a10=a[4];a11=a[5];a12=a[6];a13=a[7];a20=a[8];a21=a[9];a22=a[10];a23=a[11];// Construct the elements of the rotation matrix
	b00=x*x*t+c;b01=y*x*t+z*s;b02=z*x*t-y*s;b10=x*y*t-z*s;b11=y*y*t+c;b12=z*y*t+x*s;b20=x*z*t+y*s;b21=y*z*t-x*s;b22=z*z*t+c;// Perform rotation-specific matrix multiplication
	out[0]=a00*b00+a10*b01+a20*b02;out[1]=a01*b00+a11*b01+a21*b02;out[2]=a02*b00+a12*b01+a22*b02;out[3]=a03*b00+a13*b01+a23*b02;out[4]=a00*b10+a10*b11+a20*b12;out[5]=a01*b10+a11*b11+a21*b12;out[6]=a02*b10+a12*b11+a22*b12;out[7]=a03*b10+a13*b11+a23*b12;out[8]=a00*b20+a10*b21+a20*b22;out[9]=a01*b20+a11*b21+a21*b22;out[10]=a02*b20+a12*b21+a22*b22;out[11]=a03*b20+a13*b21+a23*b22;if(a!==out){// If the source and destination differ, copy the unchanged last row
	out[12]=a[12];out[13]=a[13];out[14]=a[14];out[15]=a[15];}return out;};/**
	     * Rotates a matrix by the given angle around the X axis
	     *
	     * @param {mat4} out the receiving matrix
	     * @param {mat4} a the matrix to rotate
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat4} out
	     */mat4.rotateX=function(out,a,rad){var s=Math.sin(rad),c=Math.cos(rad),a10=a[4],a11=a[5],a12=a[6],a13=a[7],a20=a[8],a21=a[9],a22=a[10],a23=a[11];if(a!==out){// If the source and destination differ, copy the unchanged rows
	out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[3];out[12]=a[12];out[13]=a[13];out[14]=a[14];out[15]=a[15];}// Perform axis-specific matrix multiplication
	out[4]=a10*c+a20*s;out[5]=a11*c+a21*s;out[6]=a12*c+a22*s;out[7]=a13*c+a23*s;out[8]=a20*c-a10*s;out[9]=a21*c-a11*s;out[10]=a22*c-a12*s;out[11]=a23*c-a13*s;return out;};/**
	     * Rotates a matrix by the given angle around the Y axis
	     *
	     * @param {mat4} out the receiving matrix
	     * @param {mat4} a the matrix to rotate
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat4} out
	     */mat4.rotateY=function(out,a,rad){var s=Math.sin(rad),c=Math.cos(rad),a00=a[0],a01=a[1],a02=a[2],a03=a[3],a20=a[8],a21=a[9],a22=a[10],a23=a[11];if(a!==out){// If the source and destination differ, copy the unchanged rows
	out[4]=a[4];out[5]=a[5];out[6]=a[6];out[7]=a[7];out[12]=a[12];out[13]=a[13];out[14]=a[14];out[15]=a[15];}// Perform axis-specific matrix multiplication
	out[0]=a00*c-a20*s;out[1]=a01*c-a21*s;out[2]=a02*c-a22*s;out[3]=a03*c-a23*s;out[8]=a00*s+a20*c;out[9]=a01*s+a21*c;out[10]=a02*s+a22*c;out[11]=a03*s+a23*c;return out;};/**
	     * Rotates a matrix by the given angle around the Z axis
	     *
	     * @param {mat4} out the receiving matrix
	     * @param {mat4} a the matrix to rotate
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat4} out
	     */mat4.rotateZ=function(out,a,rad){var s=Math.sin(rad),c=Math.cos(rad),a00=a[0],a01=a[1],a02=a[2],a03=a[3],a10=a[4],a11=a[5],a12=a[6],a13=a[7];if(a!==out){// If the source and destination differ, copy the unchanged last row
	out[8]=a[8];out[9]=a[9];out[10]=a[10];out[11]=a[11];out[12]=a[12];out[13]=a[13];out[14]=a[14];out[15]=a[15];}// Perform axis-specific matrix multiplication
	out[0]=a00*c+a10*s;out[1]=a01*c+a11*s;out[2]=a02*c+a12*s;out[3]=a03*c+a13*s;out[4]=a10*c-a00*s;out[5]=a11*c-a01*s;out[6]=a12*c-a02*s;out[7]=a13*c-a03*s;return out;};/**
	     * Creates a matrix from a vector translation
	     * This is equivalent to (but much faster than):
	     *
	     *     mat4.identity(dest);
	     *     mat4.translate(dest, dest, vec);
	     *
	     * @param {mat4} out mat4 receiving operation result
	     * @param {vec3} v Translation vector
	     * @returns {mat4} out
	     */mat4.fromTranslation=function(out,v){out[0]=1;out[1]=0;out[2]=0;out[3]=0;out[4]=0;out[5]=1;out[6]=0;out[7]=0;out[8]=0;out[9]=0;out[10]=1;out[11]=0;out[12]=v[0];out[13]=v[1];out[14]=v[2];out[15]=1;return out;};/**
	     * Creates a matrix from a vector scaling
	     * This is equivalent to (but much faster than):
	     *
	     *     mat4.identity(dest);
	     *     mat4.scale(dest, dest, vec);
	     *
	     * @param {mat4} out mat4 receiving operation result
	     * @param {vec3} v Scaling vector
	     * @returns {mat4} out
	     */mat4.fromScaling=function(out,v){out[0]=v[0];out[1]=0;out[2]=0;out[3]=0;out[4]=0;out[5]=v[1];out[6]=0;out[7]=0;out[8]=0;out[9]=0;out[10]=v[2];out[11]=0;out[12]=0;out[13]=0;out[14]=0;out[15]=1;return out;};/**
	     * Creates a matrix from a given angle around a given axis
	     * This is equivalent to (but much faster than):
	     *
	     *     mat4.identity(dest);
	     *     mat4.rotate(dest, dest, rad, axis);
	     *
	     * @param {mat4} out mat4 receiving operation result
	     * @param {Number} rad the angle to rotate the matrix by
	     * @param {vec3} axis the axis to rotate around
	     * @returns {mat4} out
	     */mat4.fromRotation=function(out,rad,axis){var x=axis[0],y=axis[1],z=axis[2],len=Math.sqrt(x*x+y*y+z*z),s,c,t;if(Math.abs(len)<glMatrix.EPSILON){return null;}len=1/len;x*=len;y*=len;z*=len;s=Math.sin(rad);c=Math.cos(rad);t=1-c;// Perform rotation-specific matrix multiplication
	out[0]=x*x*t+c;out[1]=y*x*t+z*s;out[2]=z*x*t-y*s;out[3]=0;out[4]=x*y*t-z*s;out[5]=y*y*t+c;out[6]=z*y*t+x*s;out[7]=0;out[8]=x*z*t+y*s;out[9]=y*z*t-x*s;out[10]=z*z*t+c;out[11]=0;out[12]=0;out[13]=0;out[14]=0;out[15]=1;return out;};/**
	     * Creates a matrix from the given angle around the X axis
	     * This is equivalent to (but much faster than):
	     *
	     *     mat4.identity(dest);
	     *     mat4.rotateX(dest, dest, rad);
	     *
	     * @param {mat4} out mat4 receiving operation result
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat4} out
	     */mat4.fromXRotation=function(out,rad){var s=Math.sin(rad),c=Math.cos(rad);// Perform axis-specific matrix multiplication
	out[0]=1;out[1]=0;out[2]=0;out[3]=0;out[4]=0;out[5]=c;out[6]=s;out[7]=0;out[8]=0;out[9]=-s;out[10]=c;out[11]=0;out[12]=0;out[13]=0;out[14]=0;out[15]=1;return out;};/**
	     * Creates a matrix from the given angle around the Y axis
	     * This is equivalent to (but much faster than):
	     *
	     *     mat4.identity(dest);
	     *     mat4.rotateY(dest, dest, rad);
	     *
	     * @param {mat4} out mat4 receiving operation result
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat4} out
	     */mat4.fromYRotation=function(out,rad){var s=Math.sin(rad),c=Math.cos(rad);// Perform axis-specific matrix multiplication
	out[0]=c;out[1]=0;out[2]=-s;out[3]=0;out[4]=0;out[5]=1;out[6]=0;out[7]=0;out[8]=s;out[9]=0;out[10]=c;out[11]=0;out[12]=0;out[13]=0;out[14]=0;out[15]=1;return out;};/**
	     * Creates a matrix from the given angle around the Z axis
	     * This is equivalent to (but much faster than):
	     *
	     *     mat4.identity(dest);
	     *     mat4.rotateZ(dest, dest, rad);
	     *
	     * @param {mat4} out mat4 receiving operation result
	     * @param {Number} rad the angle to rotate the matrix by
	     * @returns {mat4} out
	     */mat4.fromZRotation=function(out,rad){var s=Math.sin(rad),c=Math.cos(rad);// Perform axis-specific matrix multiplication
	out[0]=c;out[1]=s;out[2]=0;out[3]=0;out[4]=-s;out[5]=c;out[6]=0;out[7]=0;out[8]=0;out[9]=0;out[10]=1;out[11]=0;out[12]=0;out[13]=0;out[14]=0;out[15]=1;return out;};/**
	     * Creates a matrix from a quaternion rotation and vector translation
	     * This is equivalent to (but much faster than):
	     *
	     *     mat4.identity(dest);
	     *     mat4.translate(dest, vec);
	     *     var quatMat = mat4.create();
	     *     quat4.toMat4(quat, quatMat);
	     *     mat4.multiply(dest, quatMat);
	     *
	     * @param {mat4} out mat4 receiving operation result
	     * @param {quat4} q Rotation quaternion
	     * @param {vec3} v Translation vector
	     * @returns {mat4} out
	     */mat4.fromRotationTranslation=function(out,q,v){// Quaternion math
	var x=q[0],y=q[1],z=q[2],w=q[3],x2=x+x,y2=y+y,z2=z+z,xx=x*x2,xy=x*y2,xz=x*z2,yy=y*y2,yz=y*z2,zz=z*z2,wx=w*x2,wy=w*y2,wz=w*z2;out[0]=1-(yy+zz);out[1]=xy+wz;out[2]=xz-wy;out[3]=0;out[4]=xy-wz;out[5]=1-(xx+zz);out[6]=yz+wx;out[7]=0;out[8]=xz+wy;out[9]=yz-wx;out[10]=1-(xx+yy);out[11]=0;out[12]=v[0];out[13]=v[1];out[14]=v[2];out[15]=1;return out;};/**
	     * Creates a matrix from a quaternion rotation, vector translation and vector scale
	     * This is equivalent to (but much faster than):
	     *
	     *     mat4.identity(dest);
	     *     mat4.translate(dest, vec);
	     *     var quatMat = mat4.create();
	     *     quat4.toMat4(quat, quatMat);
	     *     mat4.multiply(dest, quatMat);
	     *     mat4.scale(dest, scale)
	     *
	     * @param {mat4} out mat4 receiving operation result
	     * @param {quat4} q Rotation quaternion
	     * @param {vec3} v Translation vector
	     * @param {vec3} s Scaling vector
	     * @returns {mat4} out
	     */mat4.fromRotationTranslationScale=function(out,q,v,s){// Quaternion math
	var x=q[0],y=q[1],z=q[2],w=q[3],x2=x+x,y2=y+y,z2=z+z,xx=x*x2,xy=x*y2,xz=x*z2,yy=y*y2,yz=y*z2,zz=z*z2,wx=w*x2,wy=w*y2,wz=w*z2,sx=s[0],sy=s[1],sz=s[2];out[0]=(1-(yy+zz))*sx;out[1]=(xy+wz)*sx;out[2]=(xz-wy)*sx;out[3]=0;out[4]=(xy-wz)*sy;out[5]=(1-(xx+zz))*sy;out[6]=(yz+wx)*sy;out[7]=0;out[8]=(xz+wy)*sz;out[9]=(yz-wx)*sz;out[10]=(1-(xx+yy))*sz;out[11]=0;out[12]=v[0];out[13]=v[1];out[14]=v[2];out[15]=1;return out;};/**
	     * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
	     * This is equivalent to (but much faster than):
	     *
	     *     mat4.identity(dest);
	     *     mat4.translate(dest, vec);
	     *     mat4.translate(dest, origin);
	     *     var quatMat = mat4.create();
	     *     quat4.toMat4(quat, quatMat);
	     *     mat4.multiply(dest, quatMat);
	     *     mat4.scale(dest, scale)
	     *     mat4.translate(dest, negativeOrigin);
	     *
	     * @param {mat4} out mat4 receiving operation result
	     * @param {quat4} q Rotation quaternion
	     * @param {vec3} v Translation vector
	     * @param {vec3} s Scaling vector
	     * @param {vec3} o The origin vector around which to scale and rotate
	     * @returns {mat4} out
	     */mat4.fromRotationTranslationScaleOrigin=function(out,q,v,s,o){// Quaternion math
	var x=q[0],y=q[1],z=q[2],w=q[3],x2=x+x,y2=y+y,z2=z+z,xx=x*x2,xy=x*y2,xz=x*z2,yy=y*y2,yz=y*z2,zz=z*z2,wx=w*x2,wy=w*y2,wz=w*z2,sx=s[0],sy=s[1],sz=s[2],ox=o[0],oy=o[1],oz=o[2];out[0]=(1-(yy+zz))*sx;out[1]=(xy+wz)*sx;out[2]=(xz-wy)*sx;out[3]=0;out[4]=(xy-wz)*sy;out[5]=(1-(xx+zz))*sy;out[6]=(yz+wx)*sy;out[7]=0;out[8]=(xz+wy)*sz;out[9]=(yz-wx)*sz;out[10]=(1-(xx+yy))*sz;out[11]=0;out[12]=v[0]+ox-(out[0]*ox+out[4]*oy+out[8]*oz);out[13]=v[1]+oy-(out[1]*ox+out[5]*oy+out[9]*oz);out[14]=v[2]+oz-(out[2]*ox+out[6]*oy+out[10]*oz);out[15]=1;return out;};mat4.fromQuat=function(out,q){var x=q[0],y=q[1],z=q[2],w=q[3],x2=x+x,y2=y+y,z2=z+z,xx=x*x2,yx=y*x2,yy=y*y2,zx=z*x2,zy=z*y2,zz=z*z2,wx=w*x2,wy=w*y2,wz=w*z2;out[0]=1-yy-zz;out[1]=yx+wz;out[2]=zx-wy;out[3]=0;out[4]=yx-wz;out[5]=1-xx-zz;out[6]=zy+wx;out[7]=0;out[8]=zx+wy;out[9]=zy-wx;out[10]=1-xx-yy;out[11]=0;out[12]=0;out[13]=0;out[14]=0;out[15]=1;return out;};/**
	     * Generates a frustum matrix with the given bounds
	     *
	     * @param {mat4} out mat4 frustum matrix will be written into
	     * @param {Number} left Left bound of the frustum
	     * @param {Number} right Right bound of the frustum
	     * @param {Number} bottom Bottom bound of the frustum
	     * @param {Number} top Top bound of the frustum
	     * @param {Number} near Near bound of the frustum
	     * @param {Number} far Far bound of the frustum
	     * @returns {mat4} out
	     */mat4.frustum=function(out,left,right,bottom,top,near,far){var rl=1/(right-left),tb=1/(top-bottom),nf=1/(near-far);out[0]=near*2*rl;out[1]=0;out[2]=0;out[3]=0;out[4]=0;out[5]=near*2*tb;out[6]=0;out[7]=0;out[8]=(right+left)*rl;out[9]=(top+bottom)*tb;out[10]=(far+near)*nf;out[11]=-1;out[12]=0;out[13]=0;out[14]=far*near*2*nf;out[15]=0;return out;};/**
	     * Generates a perspective projection matrix with the given bounds
	     *
	     * @param {mat4} out mat4 frustum matrix will be written into
	     * @param {number} fovy Vertical field of view in radians
	     * @param {number} aspect Aspect ratio. typically viewport width/height
	     * @param {number} near Near bound of the frustum
	     * @param {number} far Far bound of the frustum
	     * @returns {mat4} out
	     */mat4.perspective=function(out,fovy,aspect,near,far){var f=1.0/Math.tan(fovy/2),nf=1/(near-far);out[0]=f/aspect;out[1]=0;out[2]=0;out[3]=0;out[4]=0;out[5]=f;out[6]=0;out[7]=0;out[8]=0;out[9]=0;out[10]=(far+near)*nf;out[11]=-1;out[12]=0;out[13]=0;out[14]=2*far*near*nf;out[15]=0;return out;};/**
	     * Generates a perspective projection matrix with the given field of view.
	     * This is primarily useful for generating projection matrices to be used
	     * with the still experiemental WebVR API.
	     *
	     * @param {mat4} out mat4 frustum matrix will be written into
	     * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
	     * @param {number} near Near bound of the frustum
	     * @param {number} far Far bound of the frustum
	     * @returns {mat4} out
	     */mat4.perspectiveFromFieldOfView=function(out,fov,near,far){var upTan=Math.tan(fov.upDegrees*Math.PI/180.0),downTan=Math.tan(fov.downDegrees*Math.PI/180.0),leftTan=Math.tan(fov.leftDegrees*Math.PI/180.0),rightTan=Math.tan(fov.rightDegrees*Math.PI/180.0),xScale=2.0/(leftTan+rightTan),yScale=2.0/(upTan+downTan);out[0]=xScale;out[1]=0.0;out[2]=0.0;out[3]=0.0;out[4]=0.0;out[5]=yScale;out[6]=0.0;out[7]=0.0;out[8]=-((leftTan-rightTan)*xScale*0.5);out[9]=(upTan-downTan)*yScale*0.5;out[10]=far/(near-far);out[11]=-1.0;out[12]=0.0;out[13]=0.0;out[14]=far*near/(near-far);out[15]=0.0;return out;};/**
	     * Generates a orthogonal projection matrix with the given bounds
	     *
	     * @param {mat4} out mat4 frustum matrix will be written into
	     * @param {number} left Left bound of the frustum
	     * @param {number} right Right bound of the frustum
	     * @param {number} bottom Bottom bound of the frustum
	     * @param {number} top Top bound of the frustum
	     * @param {number} near Near bound of the frustum
	     * @param {number} far Far bound of the frustum
	     * @returns {mat4} out
	     */mat4.ortho=function(out,left,right,bottom,top,near,far){var lr=1/(left-right),bt=1/(bottom-top),nf=1/(near-far);out[0]=-2*lr;out[1]=0;out[2]=0;out[3]=0;out[4]=0;out[5]=-2*bt;out[6]=0;out[7]=0;out[8]=0;out[9]=0;out[10]=2*nf;out[11]=0;out[12]=(left+right)*lr;out[13]=(top+bottom)*bt;out[14]=(far+near)*nf;out[15]=1;return out;};/**
	     * Generates a look-at matrix with the given eye position, focal point, and up axis
	     *
	     * @param {mat4} out mat4 frustum matrix will be written into
	     * @param {vec3} eye Position of the viewer
	     * @param {vec3} center Point the viewer is looking at
	     * @param {vec3} up vec3 pointing up
	     * @returns {mat4} out
	     */mat4.lookAt=function(out,eye,center,up){var x0,x1,x2,y0,y1,y2,z0,z1,z2,len,eyex=eye[0],eyey=eye[1],eyez=eye[2],upx=up[0],upy=up[1],upz=up[2],centerx=center[0],centery=center[1],centerz=center[2];if(Math.abs(eyex-centerx)<glMatrix.EPSILON&&Math.abs(eyey-centery)<glMatrix.EPSILON&&Math.abs(eyez-centerz)<glMatrix.EPSILON){return mat4.identity(out);}z0=eyex-centerx;z1=eyey-centery;z2=eyez-centerz;len=1/Math.sqrt(z0*z0+z1*z1+z2*z2);z0*=len;z1*=len;z2*=len;x0=upy*z2-upz*z1;x1=upz*z0-upx*z2;x2=upx*z1-upy*z0;len=Math.sqrt(x0*x0+x1*x1+x2*x2);if(!len){x0=0;x1=0;x2=0;}else{len=1/len;x0*=len;x1*=len;x2*=len;}y0=z1*x2-z2*x1;y1=z2*x0-z0*x2;y2=z0*x1-z1*x0;len=Math.sqrt(y0*y0+y1*y1+y2*y2);if(!len){y0=0;y1=0;y2=0;}else{len=1/len;y0*=len;y1*=len;y2*=len;}out[0]=x0;out[1]=y0;out[2]=z0;out[3]=0;out[4]=x1;out[5]=y1;out[6]=z1;out[7]=0;out[8]=x2;out[9]=y2;out[10]=z2;out[11]=0;out[12]=-(x0*eyex+x1*eyey+x2*eyez);out[13]=-(y0*eyex+y1*eyey+y2*eyez);out[14]=-(z0*eyex+z1*eyey+z2*eyez);out[15]=1;return out;};/**
	     * Returns a string representation of a mat4
	     *
	     * @param {mat4} mat matrix to represent as a string
	     * @returns {String} string representation of the matrix
	     */mat4.str=function(a){return'mat4('+a[0]+', '+a[1]+', '+a[2]+', '+a[3]+', '+a[4]+', '+a[5]+', '+a[6]+', '+a[7]+', '+a[8]+', '+a[9]+', '+a[10]+', '+a[11]+', '+a[12]+', '+a[13]+', '+a[14]+', '+a[15]+')';};/**
	     * Returns Frobenius norm of a mat4
	     *
	     * @param {mat4} a the matrix to calculate Frobenius norm of
	     * @returns {Number} Frobenius norm
	     */mat4.frob=function(a){return Math.sqrt(Math.pow(a[0],2)+Math.pow(a[1],2)+Math.pow(a[2],2)+Math.pow(a[3],2)+Math.pow(a[4],2)+Math.pow(a[5],2)+Math.pow(a[6],2)+Math.pow(a[7],2)+Math.pow(a[8],2)+Math.pow(a[9],2)+Math.pow(a[10],2)+Math.pow(a[11],2)+Math.pow(a[12],2)+Math.pow(a[13],2)+Math.pow(a[14],2)+Math.pow(a[15],2));};module.exports=mat4;},{"./common.js":18}],23:[function(require,module,exports){/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	     Permission is hereby granted, free of charge, to any person obtaining a copy
	     of this software and associated documentation files (the "Software"), to deal
	     in the Software without restriction, including without limitation the rights
	     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	     copies of the Software, and to permit persons to whom the Software is
	     furnished to do so, subject to the following conditions:
	
	     The above copyright notice and this permission notice shall be included in
	     all copies or substantial portions of the Software.
	
	     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	     THE SOFTWARE. */var glMatrix=require("./common.js");var mat3=require("./mat3.js");var vec3=require("./vec3.js");var vec4=require("./vec4.js");/**
	     * @class Quaternion
	     * @name quat
	     */var quat={};/**
	     * Creates a new identity quat
	     *
	     * @returns {quat} a new quaternion
	     */quat.create=function(){var out=new glMatrix.ARRAY_TYPE(4);out[0]=0;out[1]=0;out[2]=0;out[3]=1;return out;};/**
	     * Sets a quaternion to represent the shortest rotation from one
	     * vector to another.
	     *
	     * Both vectors are assumed to be unit length.
	     *
	     * @param {quat} out the receiving quaternion.
	     * @param {vec3} a the initial vector
	     * @param {vec3} b the destination vector
	     * @returns {quat} out
	     */quat.rotationTo=function(){var tmpvec3=vec3.create();var xUnitVec3=vec3.fromValues(1,0,0);var yUnitVec3=vec3.fromValues(0,1,0);return function(out,a,b){var dot=vec3.dot(a,b);if(dot<-0.999999){vec3.cross(tmpvec3,xUnitVec3,a);if(vec3.length(tmpvec3)<0.000001)vec3.cross(tmpvec3,yUnitVec3,a);vec3.normalize(tmpvec3,tmpvec3);quat.setAxisAngle(out,tmpvec3,Math.PI);return out;}else if(dot>0.999999){out[0]=0;out[1]=0;out[2]=0;out[3]=1;return out;}else{vec3.cross(tmpvec3,a,b);out[0]=tmpvec3[0];out[1]=tmpvec3[1];out[2]=tmpvec3[2];out[3]=1+dot;return quat.normalize(out,out);}};}();/**
	     * Sets the specified quaternion with values corresponding to the given
	     * axes. Each axis is a vec3 and is expected to be unit length and
	     * perpendicular to all other specified axes.
	     *
	     * @param {vec3} view  the vector representing the viewing direction
	     * @param {vec3} right the vector representing the local "right" direction
	     * @param {vec3} up    the vector representing the local "up" direction
	     * @returns {quat} out
	     */quat.setAxes=function(){var matr=mat3.create();return function(out,view,right,up){matr[0]=right[0];matr[3]=right[1];matr[6]=right[2];matr[1]=up[0];matr[4]=up[1];matr[7]=up[2];matr[2]=-view[0];matr[5]=-view[1];matr[8]=-view[2];return quat.normalize(out,quat.fromMat3(out,matr));};}();/**
	     * Creates a new quat initialized with values from an existing quaternion
	     *
	     * @param {quat} a quaternion to clone
	     * @returns {quat} a new quaternion
	     * @function
	     */quat.clone=vec4.clone;/**
	     * Creates a new quat initialized with the given values
	     *
	     * @param {Number} x X component
	     * @param {Number} y Y component
	     * @param {Number} z Z component
	     * @param {Number} w W component
	     * @returns {quat} a new quaternion
	     * @function
	     */quat.fromValues=vec4.fromValues;/**
	     * Copy the values from one quat to another
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {quat} a the source quaternion
	     * @returns {quat} out
	     * @function
	     */quat.copy=vec4.copy;/**
	     * Set the components of a quat to the given values
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {Number} x X component
	     * @param {Number} y Y component
	     * @param {Number} z Z component
	     * @param {Number} w W component
	     * @returns {quat} out
	     * @function
	     */quat.set=vec4.set;/**
	     * Set a quat to the identity quaternion
	     *
	     * @param {quat} out the receiving quaternion
	     * @returns {quat} out
	     */quat.identity=function(out){out[0]=0;out[1]=0;out[2]=0;out[3]=1;return out;};/**
	     * Sets a quat from the given angle and rotation axis,
	     * then returns it.
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {vec3} axis the axis around which to rotate
	     * @param {Number} rad the angle in radians
	     * @returns {quat} out
	     **/quat.setAxisAngle=function(out,axis,rad){rad=rad*0.5;var s=Math.sin(rad);out[0]=s*axis[0];out[1]=s*axis[1];out[2]=s*axis[2];out[3]=Math.cos(rad);return out;};/**
	     * Adds two quat's
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {quat} a the first operand
	     * @param {quat} b the second operand
	     * @returns {quat} out
	     * @function
	     */quat.add=vec4.add;/**
	     * Multiplies two quat's
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {quat} a the first operand
	     * @param {quat} b the second operand
	     * @returns {quat} out
	     */quat.multiply=function(out,a,b){var ax=a[0],ay=a[1],az=a[2],aw=a[3],bx=b[0],by=b[1],bz=b[2],bw=b[3];out[0]=ax*bw+aw*bx+ay*bz-az*by;out[1]=ay*bw+aw*by+az*bx-ax*bz;out[2]=az*bw+aw*bz+ax*by-ay*bx;out[3]=aw*bw-ax*bx-ay*by-az*bz;return out;};/**
	     * Alias for {@link quat.multiply}
	     * @function
	     */quat.mul=quat.multiply;/**
	     * Scales a quat by a scalar number
	     *
	     * @param {quat} out the receiving vector
	     * @param {quat} a the vector to scale
	     * @param {Number} b amount to scale the vector by
	     * @returns {quat} out
	     * @function
	     */quat.scale=vec4.scale;/**
	     * Rotates a quaternion by the given angle about the X axis
	     *
	     * @param {quat} out quat receiving operation result
	     * @param {quat} a quat to rotate
	     * @param {number} rad angle (in radians) to rotate
	     * @returns {quat} out
	     */quat.rotateX=function(out,a,rad){rad*=0.5;var ax=a[0],ay=a[1],az=a[2],aw=a[3],bx=Math.sin(rad),bw=Math.cos(rad);out[0]=ax*bw+aw*bx;out[1]=ay*bw+az*bx;out[2]=az*bw-ay*bx;out[3]=aw*bw-ax*bx;return out;};/**
	     * Rotates a quaternion by the given angle about the Y axis
	     *
	     * @param {quat} out quat receiving operation result
	     * @param {quat} a quat to rotate
	     * @param {number} rad angle (in radians) to rotate
	     * @returns {quat} out
	     */quat.rotateY=function(out,a,rad){rad*=0.5;var ax=a[0],ay=a[1],az=a[2],aw=a[3],by=Math.sin(rad),bw=Math.cos(rad);out[0]=ax*bw-az*by;out[1]=ay*bw+aw*by;out[2]=az*bw+ax*by;out[3]=aw*bw-ay*by;return out;};/**
	     * Rotates a quaternion by the given angle about the Z axis
	     *
	     * @param {quat} out quat receiving operation result
	     * @param {quat} a quat to rotate
	     * @param {number} rad angle (in radians) to rotate
	     * @returns {quat} out
	     */quat.rotateZ=function(out,a,rad){rad*=0.5;var ax=a[0],ay=a[1],az=a[2],aw=a[3],bz=Math.sin(rad),bw=Math.cos(rad);out[0]=ax*bw+ay*bz;out[1]=ay*bw-ax*bz;out[2]=az*bw+aw*bz;out[3]=aw*bw-az*bz;return out;};/**
	     * Calculates the W component of a quat from the X, Y, and Z components.
	     * Assumes that quaternion is 1 unit in length.
	     * Any existing W component will be ignored.
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {quat} a quat to calculate W component of
	     * @returns {quat} out
	     */quat.calculateW=function(out,a){var x=a[0],y=a[1],z=a[2];out[0]=x;out[1]=y;out[2]=z;out[3]=Math.sqrt(Math.abs(1.0-x*x-y*y-z*z));return out;};/**
	     * Calculates the dot product of two quat's
	     *
	     * @param {quat} a the first operand
	     * @param {quat} b the second operand
	     * @returns {Number} dot product of a and b
	     * @function
	     */quat.dot=vec4.dot;/**
	     * Performs a linear interpolation between two quat's
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {quat} a the first operand
	     * @param {quat} b the second operand
	     * @param {Number} t interpolation amount between the two inputs
	     * @returns {quat} out
	     * @function
	     */quat.lerp=vec4.lerp;/**
	     * Performs a spherical linear interpolation between two quat
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {quat} a the first operand
	     * @param {quat} b the second operand
	     * @param {Number} t interpolation amount between the two inputs
	     * @returns {quat} out
	     */quat.slerp=function(out,a,b,t){// benchmarks:
	//    http://jsperf.com/quaternion-slerp-implementations
	var ax=a[0],ay=a[1],az=a[2],aw=a[3],bx=b[0],by=b[1],bz=b[2],bw=b[3];var omega,cosom,sinom,scale0,scale1;// calc cosine
	cosom=ax*bx+ay*by+az*bz+aw*bw;// adjust signs (if necessary)
	if(cosom<0.0){cosom=-cosom;bx=-bx;by=-by;bz=-bz;bw=-bw;}// calculate coefficients
	if(1.0-cosom>0.000001){// standard case (slerp)
	omega=Math.acos(cosom);sinom=Math.sin(omega);scale0=Math.sin((1.0-t)*omega)/sinom;scale1=Math.sin(t*omega)/sinom;}else{// "from" and "to" quaternions are very close
	//  ... so we can do a linear interpolation
	scale0=1.0-t;scale1=t;}// calculate final values
	out[0]=scale0*ax+scale1*bx;out[1]=scale0*ay+scale1*by;out[2]=scale0*az+scale1*bz;out[3]=scale0*aw+scale1*bw;return out;};/**
	     * Performs a spherical linear interpolation with two control points
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {quat} a the first operand
	     * @param {quat} b the second operand
	     * @param {quat} c the third operand
	     * @param {quat} d the fourth operand
	     * @param {Number} t interpolation amount
	     * @returns {quat} out
	     */quat.sqlerp=function(){var temp1=quat.create();var temp2=quat.create();return function(out,a,b,c,d,t){quat.slerp(temp1,a,d,t);quat.slerp(temp2,b,c,t);quat.slerp(out,temp1,temp2,2*t*(1-t));return out;};}();/**
	     * Calculates the inverse of a quat
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {quat} a quat to calculate inverse of
	     * @returns {quat} out
	     */quat.invert=function(out,a){var a0=a[0],a1=a[1],a2=a[2],a3=a[3],dot=a0*a0+a1*a1+a2*a2+a3*a3,invDot=dot?1.0/dot:0;// TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
	out[0]=-a0*invDot;out[1]=-a1*invDot;out[2]=-a2*invDot;out[3]=a3*invDot;return out;};/**
	     * Calculates the conjugate of a quat
	     * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {quat} a quat to calculate conjugate of
	     * @returns {quat} out
	     */quat.conjugate=function(out,a){out[0]=-a[0];out[1]=-a[1];out[2]=-a[2];out[3]=a[3];return out;};/**
	     * Calculates the length of a quat
	     *
	     * @param {quat} a vector to calculate length of
	     * @returns {Number} length of a
	     * @function
	     */quat.length=vec4.length;/**
	     * Alias for {@link quat.length}
	     * @function
	     */quat.len=quat.length;/**
	     * Calculates the squared length of a quat
	     *
	     * @param {quat} a vector to calculate squared length of
	     * @returns {Number} squared length of a
	     * @function
	     */quat.squaredLength=vec4.squaredLength;/**
	     * Alias for {@link quat.squaredLength}
	     * @function
	     */quat.sqrLen=quat.squaredLength;/**
	     * Normalize a quat
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {quat} a quaternion to normalize
	     * @returns {quat} out
	     * @function
	     */quat.normalize=vec4.normalize;/**
	     * Creates a quaternion from the given 3x3 rotation matrix.
	     *
	     * NOTE: The resultant quaternion is not normalized, so you should be sure
	     * to renormalize the quaternion yourself where necessary.
	     *
	     * @param {quat} out the receiving quaternion
	     * @param {mat3} m rotation matrix
	     * @returns {quat} out
	     * @function
	     */quat.fromMat3=function(out,m){// Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
	// article "Quaternion Calculus and Fast Animation".
	var fTrace=m[0]+m[4]+m[8];var fRoot;if(fTrace>0.0){// |w| > 1/2, may as well choose w > 1/2
	fRoot=Math.sqrt(fTrace+1.0);// 2w
	out[3]=0.5*fRoot;fRoot=0.5/fRoot;// 1/(4w)
	out[0]=(m[5]-m[7])*fRoot;out[1]=(m[6]-m[2])*fRoot;out[2]=(m[1]-m[3])*fRoot;}else{// |w| <= 1/2
	var i=0;if(m[4]>m[0])i=1;if(m[8]>m[i*3+i])i=2;var j=(i+1)%3;var k=(i+2)%3;fRoot=Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k]+1.0);out[i]=0.5*fRoot;fRoot=0.5/fRoot;out[3]=(m[j*3+k]-m[k*3+j])*fRoot;out[j]=(m[j*3+i]+m[i*3+j])*fRoot;out[k]=(m[k*3+i]+m[i*3+k])*fRoot;}return out;};/**
	     * Returns a string representation of a quatenion
	     *
	     * @param {quat} vec vector to represent as a string
	     * @returns {String} string representation of the vector
	     */quat.str=function(a){return'quat('+a[0]+', '+a[1]+', '+a[2]+', '+a[3]+')';};module.exports=quat;},{"./common.js":18,"./mat3.js":21,"./vec3.js":25,"./vec4.js":26}],24:[function(require,module,exports){/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	     Permission is hereby granted, free of charge, to any person obtaining a copy
	     of this software and associated documentation files (the "Software"), to deal
	     in the Software without restriction, including without limitation the rights
	     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	     copies of the Software, and to permit persons to whom the Software is
	     furnished to do so, subject to the following conditions:
	
	     The above copyright notice and this permission notice shall be included in
	     all copies or substantial portions of the Software.
	
	     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	     THE SOFTWARE. */var glMatrix=require("./common.js");/**
	     * @class 2 Dimensional Vector
	     * @name vec2
	     */var vec2={};/**
	     * Creates a new, empty vec2
	     *
	     * @returns {vec2} a new 2D vector
	     */vec2.create=function(){var out=new glMatrix.ARRAY_TYPE(2);out[0]=0;out[1]=0;return out;};/**
	     * Creates a new vec2 initialized with values from an existing vector
	     *
	     * @param {vec2} a vector to clone
	     * @returns {vec2} a new 2D vector
	     */vec2.clone=function(a){var out=new glMatrix.ARRAY_TYPE(2);out[0]=a[0];out[1]=a[1];return out;};/**
	     * Creates a new vec2 initialized with the given values
	     *
	     * @param {Number} x X component
	     * @param {Number} y Y component
	     * @returns {vec2} a new 2D vector
	     */vec2.fromValues=function(x,y){var out=new glMatrix.ARRAY_TYPE(2);out[0]=x;out[1]=y;return out;};/**
	     * Copy the values from one vec2 to another
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the source vector
	     * @returns {vec2} out
	     */vec2.copy=function(out,a){out[0]=a[0];out[1]=a[1];return out;};/**
	     * Set the components of a vec2 to the given values
	     *
	     * @param {vec2} out the receiving vector
	     * @param {Number} x X component
	     * @param {Number} y Y component
	     * @returns {vec2} out
	     */vec2.set=function(out,x,y){out[0]=x;out[1]=y;return out;};/**
	     * Adds two vec2's
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @returns {vec2} out
	     */vec2.add=function(out,a,b){out[0]=a[0]+b[0];out[1]=a[1]+b[1];return out;};/**
	     * Subtracts vector b from vector a
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @returns {vec2} out
	     */vec2.subtract=function(out,a,b){out[0]=a[0]-b[0];out[1]=a[1]-b[1];return out;};/**
	     * Alias for {@link vec2.subtract}
	     * @function
	     */vec2.sub=vec2.subtract;/**
	     * Multiplies two vec2's
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @returns {vec2} out
	     */vec2.multiply=function(out,a,b){out[0]=a[0]*b[0];out[1]=a[1]*b[1];return out;};/**
	     * Alias for {@link vec2.multiply}
	     * @function
	     */vec2.mul=vec2.multiply;/**
	     * Divides two vec2's
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @returns {vec2} out
	     */vec2.divide=function(out,a,b){out[0]=a[0]/b[0];out[1]=a[1]/b[1];return out;};/**
	     * Alias for {@link vec2.divide}
	     * @function
	     */vec2.div=vec2.divide;/**
	     * Returns the minimum of two vec2's
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @returns {vec2} out
	     */vec2.min=function(out,a,b){out[0]=Math.min(a[0],b[0]);out[1]=Math.min(a[1],b[1]);return out;};/**
	     * Returns the maximum of two vec2's
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @returns {vec2} out
	     */vec2.max=function(out,a,b){out[0]=Math.max(a[0],b[0]);out[1]=Math.max(a[1],b[1]);return out;};/**
	     * Scales a vec2 by a scalar number
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the vector to scale
	     * @param {Number} b amount to scale the vector by
	     * @returns {vec2} out
	     */vec2.scale=function(out,a,b){out[0]=a[0]*b;out[1]=a[1]*b;return out;};/**
	     * Adds two vec2's after scaling the second operand by a scalar value
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @param {Number} scale the amount to scale b by before adding
	     * @returns {vec2} out
	     */vec2.scaleAndAdd=function(out,a,b,scale){out[0]=a[0]+b[0]*scale;out[1]=a[1]+b[1]*scale;return out;};/**
	     * Calculates the euclidian distance between two vec2's
	     *
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @returns {Number} distance between a and b
	     */vec2.distance=function(a,b){var x=b[0]-a[0],y=b[1]-a[1];return Math.sqrt(x*x+y*y);};/**
	     * Alias for {@link vec2.distance}
	     * @function
	     */vec2.dist=vec2.distance;/**
	     * Calculates the squared euclidian distance between two vec2's
	     *
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @returns {Number} squared distance between a and b
	     */vec2.squaredDistance=function(a,b){var x=b[0]-a[0],y=b[1]-a[1];return x*x+y*y;};/**
	     * Alias for {@link vec2.squaredDistance}
	     * @function
	     */vec2.sqrDist=vec2.squaredDistance;/**
	     * Calculates the length of a vec2
	     *
	     * @param {vec2} a vector to calculate length of
	     * @returns {Number} length of a
	     */vec2.length=function(a){var x=a[0],y=a[1];return Math.sqrt(x*x+y*y);};/**
	     * Alias for {@link vec2.length}
	     * @function
	     */vec2.len=vec2.length;/**
	     * Calculates the squared length of a vec2
	     *
	     * @param {vec2} a vector to calculate squared length of
	     * @returns {Number} squared length of a
	     */vec2.squaredLength=function(a){var x=a[0],y=a[1];return x*x+y*y;};/**
	     * Alias for {@link vec2.squaredLength}
	     * @function
	     */vec2.sqrLen=vec2.squaredLength;/**
	     * Negates the components of a vec2
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a vector to negate
	     * @returns {vec2} out
	     */vec2.negate=function(out,a){out[0]=-a[0];out[1]=-a[1];return out;};/**
	     * Returns the inverse of the components of a vec2
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a vector to invert
	     * @returns {vec2} out
	     */vec2.inverse=function(out,a){out[0]=1.0/a[0];out[1]=1.0/a[1];return out;};/**
	     * Normalize a vec2
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a vector to normalize
	     * @returns {vec2} out
	     */vec2.normalize=function(out,a){var x=a[0],y=a[1];var len=x*x+y*y;if(len>0){//TODO: evaluate use of glm_invsqrt here?
	len=1/Math.sqrt(len);out[0]=a[0]*len;out[1]=a[1]*len;}return out;};/**
	     * Calculates the dot product of two vec2's
	     *
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @returns {Number} dot product of a and b
	     */vec2.dot=function(a,b){return a[0]*b[0]+a[1]*b[1];};/**
	     * Computes the cross product of two vec2's
	     * Note that the cross product must by definition produce a 3D vector
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @returns {vec3} out
	     */vec2.cross=function(out,a,b){var z=a[0]*b[1]-a[1]*b[0];out[0]=out[1]=0;out[2]=z;return out;};/**
	     * Performs a linear interpolation between two vec2's
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the first operand
	     * @param {vec2} b the second operand
	     * @param {Number} t interpolation amount between the two inputs
	     * @returns {vec2} out
	     */vec2.lerp=function(out,a,b,t){var ax=a[0],ay=a[1];out[0]=ax+t*(b[0]-ax);out[1]=ay+t*(b[1]-ay);return out;};/**
	     * Generates a random vector with the given scale
	     *
	     * @param {vec2} out the receiving vector
	     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	     * @returns {vec2} out
	     */vec2.random=function(out,scale){scale=scale||1.0;var r=glMatrix.RANDOM()*2.0*Math.PI;out[0]=Math.cos(r)*scale;out[1]=Math.sin(r)*scale;return out;};/**
	     * Transforms the vec2 with a mat2
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the vector to transform
	     * @param {mat2} m matrix to transform with
	     * @returns {vec2} out
	     */vec2.transformMat2=function(out,a,m){var x=a[0],y=a[1];out[0]=m[0]*x+m[2]*y;out[1]=m[1]*x+m[3]*y;return out;};/**
	     * Transforms the vec2 with a mat2d
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the vector to transform
	     * @param {mat2d} m matrix to transform with
	     * @returns {vec2} out
	     */vec2.transformMat2d=function(out,a,m){var x=a[0],y=a[1];out[0]=m[0]*x+m[2]*y+m[4];out[1]=m[1]*x+m[3]*y+m[5];return out;};/**
	     * Transforms the vec2 with a mat3
	     * 3rd vector component is implicitly '1'
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the vector to transform
	     * @param {mat3} m matrix to transform with
	     * @returns {vec2} out
	     */vec2.transformMat3=function(out,a,m){var x=a[0],y=a[1];out[0]=m[0]*x+m[3]*y+m[6];out[1]=m[1]*x+m[4]*y+m[7];return out;};/**
	     * Transforms the vec2 with a mat4
	     * 3rd vector component is implicitly '0'
	     * 4th vector component is implicitly '1'
	     *
	     * @param {vec2} out the receiving vector
	     * @param {vec2} a the vector to transform
	     * @param {mat4} m matrix to transform with
	     * @returns {vec2} out
	     */vec2.transformMat4=function(out,a,m){var x=a[0],y=a[1];out[0]=m[0]*x+m[4]*y+m[12];out[1]=m[1]*x+m[5]*y+m[13];return out;};/**
	     * Perform some operation over an array of vec2s.
	     *
	     * @param {Array} a the array of vectors to iterate over
	     * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
	     * @param {Number} offset Number of elements to skip at the beginning of the array
	     * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
	     * @param {Function} fn Function to call for each vector in the array
	     * @param {Object} [arg] additional argument to pass to fn
	     * @returns {Array} a
	     * @function
	     */vec2.forEach=function(){var vec=vec2.create();return function(a,stride,offset,count,fn,arg){var i,l;if(!stride){stride=2;}if(!offset){offset=0;}if(count){l=Math.min(count*stride+offset,a.length);}else{l=a.length;}for(i=offset;i<l;i+=stride){vec[0]=a[i];vec[1]=a[i+1];fn(vec,vec,arg);a[i]=vec[0];a[i+1]=vec[1];}return a;};}();/**
	     * Returns a string representation of a vector
	     *
	     * @param {vec2} vec vector to represent as a string
	     * @returns {String} string representation of the vector
	     */vec2.str=function(a){return'vec2('+a[0]+', '+a[1]+')';};module.exports=vec2;},{"./common.js":18}],25:[function(require,module,exports){/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	     Permission is hereby granted, free of charge, to any person obtaining a copy
	     of this software and associated documentation files (the "Software"), to deal
	     in the Software without restriction, including without limitation the rights
	     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	     copies of the Software, and to permit persons to whom the Software is
	     furnished to do so, subject to the following conditions:
	
	     The above copyright notice and this permission notice shall be included in
	     all copies or substantial portions of the Software.
	
	     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	     THE SOFTWARE. */var glMatrix=require("./common.js");/**
	     * @class 3 Dimensional Vector
	     * @name vec3
	     */var vec3={};/**
	     * Creates a new, empty vec3
	     *
	     * @returns {vec3} a new 3D vector
	     */vec3.create=function(){var out=new glMatrix.ARRAY_TYPE(3);out[0]=0;out[1]=0;out[2]=0;return out;};/**
	     * Creates a new vec3 initialized with values from an existing vector
	     *
	     * @param {vec3} a vector to clone
	     * @returns {vec3} a new 3D vector
	     */vec3.clone=function(a){var out=new glMatrix.ARRAY_TYPE(3);out[0]=a[0];out[1]=a[1];out[2]=a[2];return out;};/**
	     * Creates a new vec3 initialized with the given values
	     *
	     * @param {Number} x X component
	     * @param {Number} y Y component
	     * @param {Number} z Z component
	     * @returns {vec3} a new 3D vector
	     */vec3.fromValues=function(x,y,z){var out=new glMatrix.ARRAY_TYPE(3);out[0]=x;out[1]=y;out[2]=z;return out;};/**
	     * Copy the values from one vec3 to another
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the source vector
	     * @returns {vec3} out
	     */vec3.copy=function(out,a){out[0]=a[0];out[1]=a[1];out[2]=a[2];return out;};/**
	     * Set the components of a vec3 to the given values
	     *
	     * @param {vec3} out the receiving vector
	     * @param {Number} x X component
	     * @param {Number} y Y component
	     * @param {Number} z Z component
	     * @returns {vec3} out
	     */vec3.set=function(out,x,y,z){out[0]=x;out[1]=y;out[2]=z;return out;};/**
	     * Adds two vec3's
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @returns {vec3} out
	     */vec3.add=function(out,a,b){out[0]=a[0]+b[0];out[1]=a[1]+b[1];out[2]=a[2]+b[2];return out;};/**
	     * Subtracts vector b from vector a
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @returns {vec3} out
	     */vec3.subtract=function(out,a,b){out[0]=a[0]-b[0];out[1]=a[1]-b[1];out[2]=a[2]-b[2];return out;};/**
	     * Alias for {@link vec3.subtract}
	     * @function
	     */vec3.sub=vec3.subtract;/**
	     * Multiplies two vec3's
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @returns {vec3} out
	     */vec3.multiply=function(out,a,b){out[0]=a[0]*b[0];out[1]=a[1]*b[1];out[2]=a[2]*b[2];return out;};/**
	     * Alias for {@link vec3.multiply}
	     * @function
	     */vec3.mul=vec3.multiply;/**
	     * Divides two vec3's
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @returns {vec3} out
	     */vec3.divide=function(out,a,b){out[0]=a[0]/b[0];out[1]=a[1]/b[1];out[2]=a[2]/b[2];return out;};/**
	     * Alias for {@link vec3.divide}
	     * @function
	     */vec3.div=vec3.divide;/**
	     * Returns the minimum of two vec3's
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @returns {vec3} out
	     */vec3.min=function(out,a,b){out[0]=Math.min(a[0],b[0]);out[1]=Math.min(a[1],b[1]);out[2]=Math.min(a[2],b[2]);return out;};/**
	     * Returns the maximum of two vec3's
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @returns {vec3} out
	     */vec3.max=function(out,a,b){out[0]=Math.max(a[0],b[0]);out[1]=Math.max(a[1],b[1]);out[2]=Math.max(a[2],b[2]);return out;};/**
	     * Scales a vec3 by a scalar number
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the vector to scale
	     * @param {Number} b amount to scale the vector by
	     * @returns {vec3} out
	     */vec3.scale=function(out,a,b){out[0]=a[0]*b;out[1]=a[1]*b;out[2]=a[2]*b;return out;};/**
	     * Adds two vec3's after scaling the second operand by a scalar value
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @param {Number} scale the amount to scale b by before adding
	     * @returns {vec3} out
	     */vec3.scaleAndAdd=function(out,a,b,scale){out[0]=a[0]+b[0]*scale;out[1]=a[1]+b[1]*scale;out[2]=a[2]+b[2]*scale;return out;};/**
	     * Calculates the euclidian distance between two vec3's
	     *
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @returns {Number} distance between a and b
	     */vec3.distance=function(a,b){var x=b[0]-a[0],y=b[1]-a[1],z=b[2]-a[2];return Math.sqrt(x*x+y*y+z*z);};/**
	     * Alias for {@link vec3.distance}
	     * @function
	     */vec3.dist=vec3.distance;/**
	     * Calculates the squared euclidian distance between two vec3's
	     *
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @returns {Number} squared distance between a and b
	     */vec3.squaredDistance=function(a,b){var x=b[0]-a[0],y=b[1]-a[1],z=b[2]-a[2];return x*x+y*y+z*z;};/**
	     * Alias for {@link vec3.squaredDistance}
	     * @function
	     */vec3.sqrDist=vec3.squaredDistance;/**
	     * Calculates the length of a vec3
	     *
	     * @param {vec3} a vector to calculate length of
	     * @returns {Number} length of a
	     */vec3.length=function(a){var x=a[0],y=a[1],z=a[2];return Math.sqrt(x*x+y*y+z*z);};/**
	     * Alias for {@link vec3.length}
	     * @function
	     */vec3.len=vec3.length;/**
	     * Calculates the squared length of a vec3
	     *
	     * @param {vec3} a vector to calculate squared length of
	     * @returns {Number} squared length of a
	     */vec3.squaredLength=function(a){var x=a[0],y=a[1],z=a[2];return x*x+y*y+z*z;};/**
	     * Alias for {@link vec3.squaredLength}
	     * @function
	     */vec3.sqrLen=vec3.squaredLength;/**
	     * Negates the components of a vec3
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a vector to negate
	     * @returns {vec3} out
	     */vec3.negate=function(out,a){out[0]=-a[0];out[1]=-a[1];out[2]=-a[2];return out;};/**
	     * Returns the inverse of the components of a vec3
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a vector to invert
	     * @returns {vec3} out
	     */vec3.inverse=function(out,a){out[0]=1.0/a[0];out[1]=1.0/a[1];out[2]=1.0/a[2];return out;};/**
	     * Normalize a vec3
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a vector to normalize
	     * @returns {vec3} out
	     */vec3.normalize=function(out,a){var x=a[0],y=a[1],z=a[2];var len=x*x+y*y+z*z;if(len>0){//TODO: evaluate use of glm_invsqrt here?
	len=1/Math.sqrt(len);out[0]=a[0]*len;out[1]=a[1]*len;out[2]=a[2]*len;}return out;};/**
	     * Calculates the dot product of two vec3's
	     *
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @returns {Number} dot product of a and b
	     */vec3.dot=function(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2];};/**
	     * Computes the cross product of two vec3's
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @returns {vec3} out
	     */vec3.cross=function(out,a,b){var ax=a[0],ay=a[1],az=a[2],bx=b[0],by=b[1],bz=b[2];out[0]=ay*bz-az*by;out[1]=az*bx-ax*bz;out[2]=ax*by-ay*bx;return out;};/**
	     * Performs a linear interpolation between two vec3's
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @param {Number} t interpolation amount between the two inputs
	     * @returns {vec3} out
	     */vec3.lerp=function(out,a,b,t){var ax=a[0],ay=a[1],az=a[2];out[0]=ax+t*(b[0]-ax);out[1]=ay+t*(b[1]-ay);out[2]=az+t*(b[2]-az);return out;};/**
	     * Performs a hermite interpolation with two control points
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @param {vec3} c the third operand
	     * @param {vec3} d the fourth operand
	     * @param {Number} t interpolation amount between the two inputs
	     * @returns {vec3} out
	     */vec3.hermite=function(out,a,b,c,d,t){var factorTimes2=t*t,factor1=factorTimes2*(2*t-3)+1,factor2=factorTimes2*(t-2)+t,factor3=factorTimes2*(t-1),factor4=factorTimes2*(3-2*t);out[0]=a[0]*factor1+b[0]*factor2+c[0]*factor3+d[0]*factor4;out[1]=a[1]*factor1+b[1]*factor2+c[1]*factor3+d[1]*factor4;out[2]=a[2]*factor1+b[2]*factor2+c[2]*factor3+d[2]*factor4;return out;};/**
	     * Performs a bezier interpolation with two control points
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the first operand
	     * @param {vec3} b the second operand
	     * @param {vec3} c the third operand
	     * @param {vec3} d the fourth operand
	     * @param {Number} t interpolation amount between the two inputs
	     * @returns {vec3} out
	     */vec3.bezier=function(out,a,b,c,d,t){var inverseFactor=1-t,inverseFactorTimesTwo=inverseFactor*inverseFactor,factorTimes2=t*t,factor1=inverseFactorTimesTwo*inverseFactor,factor2=3*t*inverseFactorTimesTwo,factor3=3*factorTimes2*inverseFactor,factor4=factorTimes2*t;out[0]=a[0]*factor1+b[0]*factor2+c[0]*factor3+d[0]*factor4;out[1]=a[1]*factor1+b[1]*factor2+c[1]*factor3+d[1]*factor4;out[2]=a[2]*factor1+b[2]*factor2+c[2]*factor3+d[2]*factor4;return out;};/**
	     * Generates a random vector with the given scale
	     *
	     * @param {vec3} out the receiving vector
	     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	     * @returns {vec3} out
	     */vec3.random=function(out,scale){scale=scale||1.0;var r=glMatrix.RANDOM()*2.0*Math.PI;var z=glMatrix.RANDOM()*2.0-1.0;var zScale=Math.sqrt(1.0-z*z)*scale;out[0]=Math.cos(r)*zScale;out[1]=Math.sin(r)*zScale;out[2]=z*scale;return out;};/**
	     * Transforms the vec3 with a mat4.
	     * 4th vector component is implicitly '1'
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the vector to transform
	     * @param {mat4} m matrix to transform with
	     * @returns {vec3} out
	     */vec3.transformMat4=function(out,a,m){var x=a[0],y=a[1],z=a[2],w=m[3]*x+m[7]*y+m[11]*z+m[15];w=w||1.0;out[0]=(m[0]*x+m[4]*y+m[8]*z+m[12])/w;out[1]=(m[1]*x+m[5]*y+m[9]*z+m[13])/w;out[2]=(m[2]*x+m[6]*y+m[10]*z+m[14])/w;return out;};/**
	     * Transforms the vec3 with a mat3.
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the vector to transform
	     * @param {mat4} m the 3x3 matrix to transform with
	     * @returns {vec3} out
	     */vec3.transformMat3=function(out,a,m){var x=a[0],y=a[1],z=a[2];out[0]=x*m[0]+y*m[3]+z*m[6];out[1]=x*m[1]+y*m[4]+z*m[7];out[2]=x*m[2]+y*m[5]+z*m[8];return out;};/**
	     * Transforms the vec3 with a quat
	     *
	     * @param {vec3} out the receiving vector
	     * @param {vec3} a the vector to transform
	     * @param {quat} q quaternion to transform with
	     * @returns {vec3} out
	     */vec3.transformQuat=function(out,a,q){// benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations
	var x=a[0],y=a[1],z=a[2],qx=q[0],qy=q[1],qz=q[2],qw=q[3],// calculate quat * vec
	ix=qw*x+qy*z-qz*y,iy=qw*y+qz*x-qx*z,iz=qw*z+qx*y-qy*x,iw=-qx*x-qy*y-qz*z;// calculate result * inverse quat
	out[0]=ix*qw+iw*-qx+iy*-qz-iz*-qy;out[1]=iy*qw+iw*-qy+iz*-qx-ix*-qz;out[2]=iz*qw+iw*-qz+ix*-qy-iy*-qx;return out;};/**
	     * Rotate a 3D vector around the x-axis
	     * @param {vec3} out The receiving vec3
	     * @param {vec3} a The vec3 point to rotate
	     * @param {vec3} b The origin of the rotation
	     * @param {Number} c The angle of rotation
	     * @returns {vec3} out
	     */vec3.rotateX=function(out,a,b,c){var p=[],r=[];//Translate point to the origin
	p[0]=a[0]-b[0];p[1]=a[1]-b[1];p[2]=a[2]-b[2];//perform rotation
	r[0]=p[0];r[1]=p[1]*Math.cos(c)-p[2]*Math.sin(c);r[2]=p[1]*Math.sin(c)+p[2]*Math.cos(c);//translate to correct position
	out[0]=r[0]+b[0];out[1]=r[1]+b[1];out[2]=r[2]+b[2];return out;};/**
	     * Rotate a 3D vector around the y-axis
	     * @param {vec3} out The receiving vec3
	     * @param {vec3} a The vec3 point to rotate
	     * @param {vec3} b The origin of the rotation
	     * @param {Number} c The angle of rotation
	     * @returns {vec3} out
	     */vec3.rotateY=function(out,a,b,c){var p=[],r=[];//Translate point to the origin
	p[0]=a[0]-b[0];p[1]=a[1]-b[1];p[2]=a[2]-b[2];//perform rotation
	r[0]=p[2]*Math.sin(c)+p[0]*Math.cos(c);r[1]=p[1];r[2]=p[2]*Math.cos(c)-p[0]*Math.sin(c);//translate to correct position
	out[0]=r[0]+b[0];out[1]=r[1]+b[1];out[2]=r[2]+b[2];return out;};/**
	     * Rotate a 3D vector around the z-axis
	     * @param {vec3} out The receiving vec3
	     * @param {vec3} a The vec3 point to rotate
	     * @param {vec3} b The origin of the rotation
	     * @param {Number} c The angle of rotation
	     * @returns {vec3} out
	     */vec3.rotateZ=function(out,a,b,c){var p=[],r=[];//Translate point to the origin
	p[0]=a[0]-b[0];p[1]=a[1]-b[1];p[2]=a[2]-b[2];//perform rotation
	r[0]=p[0]*Math.cos(c)-p[1]*Math.sin(c);r[1]=p[0]*Math.sin(c)+p[1]*Math.cos(c);r[2]=p[2];//translate to correct position
	out[0]=r[0]+b[0];out[1]=r[1]+b[1];out[2]=r[2]+b[2];return out;};/**
	     * Perform some operation over an array of vec3s.
	     *
	     * @param {Array} a the array of vectors to iterate over
	     * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
	     * @param {Number} offset Number of elements to skip at the beginning of the array
	     * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
	     * @param {Function} fn Function to call for each vector in the array
	     * @param {Object} [arg] additional argument to pass to fn
	     * @returns {Array} a
	     * @function
	     */vec3.forEach=function(){var vec=vec3.create();return function(a,stride,offset,count,fn,arg){var i,l;if(!stride){stride=3;}if(!offset){offset=0;}if(count){l=Math.min(count*stride+offset,a.length);}else{l=a.length;}for(i=offset;i<l;i+=stride){vec[0]=a[i];vec[1]=a[i+1];vec[2]=a[i+2];fn(vec,vec,arg);a[i]=vec[0];a[i+1]=vec[1];a[i+2]=vec[2];}return a;};}();/**
	     * Get the angle between two 3D vectors
	     * @param {vec3} a The first operand
	     * @param {vec3} b The second operand
	     * @returns {Number} The angle in radians
	     */vec3.angle=function(a,b){var tempA=vec3.fromValues(a[0],a[1],a[2]);var tempB=vec3.fromValues(b[0],b[1],b[2]);vec3.normalize(tempA,tempA);vec3.normalize(tempB,tempB);var cosine=vec3.dot(tempA,tempB);if(cosine>1.0){return 0;}else{return Math.acos(cosine);}};/**
	     * Returns a string representation of a vector
	     *
	     * @param {vec3} vec vector to represent as a string
	     * @returns {String} string representation of the vector
	     */vec3.str=function(a){return'vec3('+a[0]+', '+a[1]+', '+a[2]+')';};module.exports=vec3;},{"./common.js":18}],26:[function(require,module,exports){/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	     Permission is hereby granted, free of charge, to any person obtaining a copy
	     of this software and associated documentation files (the "Software"), to deal
	     in the Software without restriction, including without limitation the rights
	     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	     copies of the Software, and to permit persons to whom the Software is
	     furnished to do so, subject to the following conditions:
	
	     The above copyright notice and this permission notice shall be included in
	     all copies or substantial portions of the Software.
	
	     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	     THE SOFTWARE. */var glMatrix=require("./common.js");/**
	     * @class 4 Dimensional Vector
	     * @name vec4
	     */var vec4={};/**
	     * Creates a new, empty vec4
	     *
	     * @returns {vec4} a new 4D vector
	     */vec4.create=function(){var out=new glMatrix.ARRAY_TYPE(4);out[0]=0;out[1]=0;out[2]=0;out[3]=0;return out;};/**
	     * Creates a new vec4 initialized with values from an existing vector
	     *
	     * @param {vec4} a vector to clone
	     * @returns {vec4} a new 4D vector
	     */vec4.clone=function(a){var out=new glMatrix.ARRAY_TYPE(4);out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[3];return out;};/**
	     * Creates a new vec4 initialized with the given values
	     *
	     * @param {Number} x X component
	     * @param {Number} y Y component
	     * @param {Number} z Z component
	     * @param {Number} w W component
	     * @returns {vec4} a new 4D vector
	     */vec4.fromValues=function(x,y,z,w){var out=new glMatrix.ARRAY_TYPE(4);out[0]=x;out[1]=y;out[2]=z;out[3]=w;return out;};/**
	     * Copy the values from one vec4 to another
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the source vector
	     * @returns {vec4} out
	     */vec4.copy=function(out,a){out[0]=a[0];out[1]=a[1];out[2]=a[2];out[3]=a[3];return out;};/**
	     * Set the components of a vec4 to the given values
	     *
	     * @param {vec4} out the receiving vector
	     * @param {Number} x X component
	     * @param {Number} y Y component
	     * @param {Number} z Z component
	     * @param {Number} w W component
	     * @returns {vec4} out
	     */vec4.set=function(out,x,y,z,w){out[0]=x;out[1]=y;out[2]=z;out[3]=w;return out;};/**
	     * Adds two vec4's
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the first operand
	     * @param {vec4} b the second operand
	     * @returns {vec4} out
	     */vec4.add=function(out,a,b){out[0]=a[0]+b[0];out[1]=a[1]+b[1];out[2]=a[2]+b[2];out[3]=a[3]+b[3];return out;};/**
	     * Subtracts vector b from vector a
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the first operand
	     * @param {vec4} b the second operand
	     * @returns {vec4} out
	     */vec4.subtract=function(out,a,b){out[0]=a[0]-b[0];out[1]=a[1]-b[1];out[2]=a[2]-b[2];out[3]=a[3]-b[3];return out;};/**
	     * Alias for {@link vec4.subtract}
	     * @function
	     */vec4.sub=vec4.subtract;/**
	     * Multiplies two vec4's
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the first operand
	     * @param {vec4} b the second operand
	     * @returns {vec4} out
	     */vec4.multiply=function(out,a,b){out[0]=a[0]*b[0];out[1]=a[1]*b[1];out[2]=a[2]*b[2];out[3]=a[3]*b[3];return out;};/**
	     * Alias for {@link vec4.multiply}
	     * @function
	     */vec4.mul=vec4.multiply;/**
	     * Divides two vec4's
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the first operand
	     * @param {vec4} b the second operand
	     * @returns {vec4} out
	     */vec4.divide=function(out,a,b){out[0]=a[0]/b[0];out[1]=a[1]/b[1];out[2]=a[2]/b[2];out[3]=a[3]/b[3];return out;};/**
	     * Alias for {@link vec4.divide}
	     * @function
	     */vec4.div=vec4.divide;/**
	     * Returns the minimum of two vec4's
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the first operand
	     * @param {vec4} b the second operand
	     * @returns {vec4} out
	     */vec4.min=function(out,a,b){out[0]=Math.min(a[0],b[0]);out[1]=Math.min(a[1],b[1]);out[2]=Math.min(a[2],b[2]);out[3]=Math.min(a[3],b[3]);return out;};/**
	     * Returns the maximum of two vec4's
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the first operand
	     * @param {vec4} b the second operand
	     * @returns {vec4} out
	     */vec4.max=function(out,a,b){out[0]=Math.max(a[0],b[0]);out[1]=Math.max(a[1],b[1]);out[2]=Math.max(a[2],b[2]);out[3]=Math.max(a[3],b[3]);return out;};/**
	     * Scales a vec4 by a scalar number
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the vector to scale
	     * @param {Number} b amount to scale the vector by
	     * @returns {vec4} out
	     */vec4.scale=function(out,a,b){out[0]=a[0]*b;out[1]=a[1]*b;out[2]=a[2]*b;out[3]=a[3]*b;return out;};/**
	     * Adds two vec4's after scaling the second operand by a scalar value
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the first operand
	     * @param {vec4} b the second operand
	     * @param {Number} scale the amount to scale b by before adding
	     * @returns {vec4} out
	     */vec4.scaleAndAdd=function(out,a,b,scale){out[0]=a[0]+b[0]*scale;out[1]=a[1]+b[1]*scale;out[2]=a[2]+b[2]*scale;out[3]=a[3]+b[3]*scale;return out;};/**
	     * Calculates the euclidian distance between two vec4's
	     *
	     * @param {vec4} a the first operand
	     * @param {vec4} b the second operand
	     * @returns {Number} distance between a and b
	     */vec4.distance=function(a,b){var x=b[0]-a[0],y=b[1]-a[1],z=b[2]-a[2],w=b[3]-a[3];return Math.sqrt(x*x+y*y+z*z+w*w);};/**
	     * Alias for {@link vec4.distance}
	     * @function
	     */vec4.dist=vec4.distance;/**
	     * Calculates the squared euclidian distance between two vec4's
	     *
	     * @param {vec4} a the first operand
	     * @param {vec4} b the second operand
	     * @returns {Number} squared distance between a and b
	     */vec4.squaredDistance=function(a,b){var x=b[0]-a[0],y=b[1]-a[1],z=b[2]-a[2],w=b[3]-a[3];return x*x+y*y+z*z+w*w;};/**
	     * Alias for {@link vec4.squaredDistance}
	     * @function
	     */vec4.sqrDist=vec4.squaredDistance;/**
	     * Calculates the length of a vec4
	     *
	     * @param {vec4} a vector to calculate length of
	     * @returns {Number} length of a
	     */vec4.length=function(a){var x=a[0],y=a[1],z=a[2],w=a[3];return Math.sqrt(x*x+y*y+z*z+w*w);};/**
	     * Alias for {@link vec4.length}
	     * @function
	     */vec4.len=vec4.length;/**
	     * Calculates the squared length of a vec4
	     *
	     * @param {vec4} a vector to calculate squared length of
	     * @returns {Number} squared length of a
	     */vec4.squaredLength=function(a){var x=a[0],y=a[1],z=a[2],w=a[3];return x*x+y*y+z*z+w*w;};/**
	     * Alias for {@link vec4.squaredLength}
	     * @function
	     */vec4.sqrLen=vec4.squaredLength;/**
	     * Negates the components of a vec4
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a vector to negate
	     * @returns {vec4} out
	     */vec4.negate=function(out,a){out[0]=-a[0];out[1]=-a[1];out[2]=-a[2];out[3]=-a[3];return out;};/**
	     * Returns the inverse of the components of a vec4
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a vector to invert
	     * @returns {vec4} out
	     */vec4.inverse=function(out,a){out[0]=1.0/a[0];out[1]=1.0/a[1];out[2]=1.0/a[2];out[3]=1.0/a[3];return out;};/**
	     * Normalize a vec4
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a vector to normalize
	     * @returns {vec4} out
	     */vec4.normalize=function(out,a){var x=a[0],y=a[1],z=a[2],w=a[3];var len=x*x+y*y+z*z+w*w;if(len>0){len=1/Math.sqrt(len);out[0]=x*len;out[1]=y*len;out[2]=z*len;out[3]=w*len;}return out;};/**
	     * Calculates the dot product of two vec4's
	     *
	     * @param {vec4} a the first operand
	     * @param {vec4} b the second operand
	     * @returns {Number} dot product of a and b
	     */vec4.dot=function(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3];};/**
	     * Performs a linear interpolation between two vec4's
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the first operand
	     * @param {vec4} b the second operand
	     * @param {Number} t interpolation amount between the two inputs
	     * @returns {vec4} out
	     */vec4.lerp=function(out,a,b,t){var ax=a[0],ay=a[1],az=a[2],aw=a[3];out[0]=ax+t*(b[0]-ax);out[1]=ay+t*(b[1]-ay);out[2]=az+t*(b[2]-az);out[3]=aw+t*(b[3]-aw);return out;};/**
	     * Generates a random vector with the given scale
	     *
	     * @param {vec4} out the receiving vector
	     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	     * @returns {vec4} out
	     */vec4.random=function(out,scale){scale=scale||1.0;//TODO: This is a pretty awful way of doing this. Find something better.
	out[0]=glMatrix.RANDOM();out[1]=glMatrix.RANDOM();out[2]=glMatrix.RANDOM();out[3]=glMatrix.RANDOM();vec4.normalize(out,out);vec4.scale(out,out,scale);return out;};/**
	     * Transforms the vec4 with a mat4.
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the vector to transform
	     * @param {mat4} m matrix to transform with
	     * @returns {vec4} out
	     */vec4.transformMat4=function(out,a,m){var x=a[0],y=a[1],z=a[2],w=a[3];out[0]=m[0]*x+m[4]*y+m[8]*z+m[12]*w;out[1]=m[1]*x+m[5]*y+m[9]*z+m[13]*w;out[2]=m[2]*x+m[6]*y+m[10]*z+m[14]*w;out[3]=m[3]*x+m[7]*y+m[11]*z+m[15]*w;return out;};/**
	     * Transforms the vec4 with a quat
	     *
	     * @param {vec4} out the receiving vector
	     * @param {vec4} a the vector to transform
	     * @param {quat} q quaternion to transform with
	     * @returns {vec4} out
	     */vec4.transformQuat=function(out,a,q){var x=a[0],y=a[1],z=a[2],qx=q[0],qy=q[1],qz=q[2],qw=q[3],// calculate quat * vec
	ix=qw*x+qy*z-qz*y,iy=qw*y+qz*x-qx*z,iz=qw*z+qx*y-qy*x,iw=-qx*x-qy*y-qz*z;// calculate result * inverse quat
	out[0]=ix*qw+iw*-qx+iy*-qz-iz*-qy;out[1]=iy*qw+iw*-qy+iz*-qx-ix*-qz;out[2]=iz*qw+iw*-qz+ix*-qy-iy*-qx;out[3]=a[3];return out;};/**
	     * Perform some operation over an array of vec4s.
	     *
	     * @param {Array} a the array of vectors to iterate over
	     * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
	     * @param {Number} offset Number of elements to skip at the beginning of the array
	     * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
	     * @param {Function} fn Function to call for each vector in the array
	     * @param {Object} [arg] additional argument to pass to fn
	     * @returns {Array} a
	     * @function
	     */vec4.forEach=function(){var vec=vec4.create();return function(a,stride,offset,count,fn,arg){var i,l;if(!stride){stride=4;}if(!offset){offset=0;}if(count){l=Math.min(count*stride+offset,a.length);}else{l=a.length;}for(i=offset;i<l;i+=stride){vec[0]=a[i];vec[1]=a[i+1];vec[2]=a[i+2];vec[3]=a[i+3];fn(vec,vec,arg);a[i]=vec[0];a[i+1]=vec[1];a[i+2]=vec[2];a[i+3]=vec[3];}return a;};}();/**
	     * Returns a string representation of a vector
	     *
	     * @param {vec4} vec vector to represent as a string
	     * @returns {String} string representation of the vector
	     */vec4.str=function(a){return'vec4('+a[0]+', '+a[1]+', '+a[2]+', '+a[3]+')';};module.exports=vec4;},{"./common.js":18}]},{},[3]);

/***/ }

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,